// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/replication/replication.proto

package replication

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReplicationInfo struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Masters       []*ReplicationMasterInfo `protobuf:"bytes,1,rep,name=masters" json:"masters,omitempty"`
	Slaves        []*ReplicationSlaveInfo  `protobuf:"bytes,2,rep,name=slaves" json:"slaves,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationInfo) Reset() {
	*x = ReplicationInfo{}
	mi := &file_yamcs_protobuf_replication_replication_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationInfo) ProtoMessage() {}

func (x *ReplicationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_replication_replication_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationInfo.ProtoReflect.Descriptor instead.
func (*ReplicationInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_replication_replication_proto_rawDescGZIP(), []int{0}
}

func (x *ReplicationInfo) GetMasters() []*ReplicationMasterInfo {
	if x != nil {
		return x.Masters
	}
	return nil
}

func (x *ReplicationInfo) GetSlaves() []*ReplicationSlaveInfo {
	if x != nil {
		return x.Slaves
	}
	return nil
}

type ReplicationMasterInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance      *string  `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	Streams       []string `protobuf:"bytes,2,rep,name=streams" json:"streams,omitempty"`
	LocalAddress  *string  `protobuf:"bytes,3,opt,name=localAddress" json:"localAddress,omitempty"`
	RemoteAddress *string  `protobuf:"bytes,4,opt,name=remoteAddress" json:"remoteAddress,omitempty"`
	Push          *bool    `protobuf:"varint,5,opt,name=push" json:"push,omitempty"`
	PushTo        *string  `protobuf:"bytes,6,opt,name=pushTo" json:"pushTo,omitempty"`
	LocalTx       *int64   `protobuf:"varint,7,opt,name=localTx" json:"localTx,omitempty"`
	NextTx        *int64   `protobuf:"varint,8,opt,name=nextTx" json:"nextTx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationMasterInfo) Reset() {
	*x = ReplicationMasterInfo{}
	mi := &file_yamcs_protobuf_replication_replication_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationMasterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationMasterInfo) ProtoMessage() {}

func (x *ReplicationMasterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_replication_replication_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationMasterInfo.ProtoReflect.Descriptor instead.
func (*ReplicationMasterInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_replication_replication_proto_rawDescGZIP(), []int{1}
}

func (x *ReplicationMasterInfo) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ReplicationMasterInfo) GetStreams() []string {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *ReplicationMasterInfo) GetLocalAddress() string {
	if x != nil && x.LocalAddress != nil {
		return *x.LocalAddress
	}
	return ""
}

func (x *ReplicationMasterInfo) GetRemoteAddress() string {
	if x != nil && x.RemoteAddress != nil {
		return *x.RemoteAddress
	}
	return ""
}

func (x *ReplicationMasterInfo) GetPush() bool {
	if x != nil && x.Push != nil {
		return *x.Push
	}
	return false
}

func (x *ReplicationMasterInfo) GetPushTo() string {
	if x != nil && x.PushTo != nil {
		return *x.PushTo
	}
	return ""
}

func (x *ReplicationMasterInfo) GetLocalTx() int64 {
	if x != nil && x.LocalTx != nil {
		return *x.LocalTx
	}
	return 0
}

func (x *ReplicationMasterInfo) GetNextTx() int64 {
	if x != nil && x.NextTx != nil {
		return *x.NextTx
	}
	return 0
}

type ReplicationSlaveInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance      *string  `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	Streams       []string `protobuf:"bytes,2,rep,name=streams" json:"streams,omitempty"`
	LocalAddress  *string  `protobuf:"bytes,3,opt,name=localAddress" json:"localAddress,omitempty"`
	RemoteAddress *string  `protobuf:"bytes,4,opt,name=remoteAddress" json:"remoteAddress,omitempty"`
	Push          *bool    `protobuf:"varint,5,opt,name=push" json:"push,omitempty"`
	PullFrom      *string  `protobuf:"bytes,6,opt,name=pullFrom" json:"pullFrom,omitempty"`
	Tx            *int64   `protobuf:"varint,7,opt,name=tx" json:"tx,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationSlaveInfo) Reset() {
	*x = ReplicationSlaveInfo{}
	mi := &file_yamcs_protobuf_replication_replication_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationSlaveInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationSlaveInfo) ProtoMessage() {}

func (x *ReplicationSlaveInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_replication_replication_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationSlaveInfo.ProtoReflect.Descriptor instead.
func (*ReplicationSlaveInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_replication_replication_proto_rawDescGZIP(), []int{2}
}

func (x *ReplicationSlaveInfo) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ReplicationSlaveInfo) GetStreams() []string {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *ReplicationSlaveInfo) GetLocalAddress() string {
	if x != nil && x.LocalAddress != nil {
		return *x.LocalAddress
	}
	return ""
}

func (x *ReplicationSlaveInfo) GetRemoteAddress() string {
	if x != nil && x.RemoteAddress != nil {
		return *x.RemoteAddress
	}
	return ""
}

func (x *ReplicationSlaveInfo) GetPush() bool {
	if x != nil && x.Push != nil {
		return *x.Push
	}
	return false
}

func (x *ReplicationSlaveInfo) GetPullFrom() string {
	if x != nil && x.PullFrom != nil {
		return *x.PullFrom
	}
	return ""
}

func (x *ReplicationSlaveInfo) GetTx() int64 {
	if x != nil && x.Tx != nil {
		return *x.Tx
	}
	return 0
}

var File_yamcs_protobuf_replication_replication_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_replication_replication_proto_rawDesc = string([]byte{
	0x0a, 0x2c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c,
	0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x22,
	0xf5, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x70, 0x75, 0x73, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x75, 0x73, 0x68, 0x54, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x78, 0x22, 0xd6, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x75, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x70, 0x75, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x78,
	0x32, 0xfe, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x70, 0x69, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x16,
	0x8a, 0x92, 0x03, 0x12, 0x0a, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x16, 0xda, 0x92, 0x03, 0x12, 0x0a, 0x10, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x30,
	0x01, 0x42, 0x73, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
})

var (
	file_yamcs_protobuf_replication_replication_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_replication_replication_proto_rawDescData []byte
)

func file_yamcs_protobuf_replication_replication_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_replication_replication_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_replication_replication_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_replication_replication_proto_rawDesc), len(file_yamcs_protobuf_replication_replication_proto_rawDesc)))
	})
	return file_yamcs_protobuf_replication_replication_proto_rawDescData
}

var file_yamcs_protobuf_replication_replication_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_yamcs_protobuf_replication_replication_proto_goTypes = []any{
	(*ReplicationInfo)(nil),       // 0: yamcs.protobuf.replication.ReplicationInfo
	(*ReplicationMasterInfo)(nil), // 1: yamcs.protobuf.replication.ReplicationMasterInfo
	(*ReplicationSlaveInfo)(nil),  // 2: yamcs.protobuf.replication.ReplicationSlaveInfo
	(*emptypb.Empty)(nil),         // 3: google.protobuf.Empty
}
var file_yamcs_protobuf_replication_replication_proto_depIdxs = []int32{
	1, // 0: yamcs.protobuf.replication.ReplicationInfo.masters:type_name -> yamcs.protobuf.replication.ReplicationMasterInfo
	2, // 1: yamcs.protobuf.replication.ReplicationInfo.slaves:type_name -> yamcs.protobuf.replication.ReplicationSlaveInfo
	3, // 2: yamcs.protobuf.replication.ReplicationApi.GetReplicationInfo:input_type -> google.protobuf.Empty
	3, // 3: yamcs.protobuf.replication.ReplicationApi.SubscribeReplicationInfo:input_type -> google.protobuf.Empty
	0, // 4: yamcs.protobuf.replication.ReplicationApi.GetReplicationInfo:output_type -> yamcs.protobuf.replication.ReplicationInfo
	0, // 5: yamcs.protobuf.replication.ReplicationApi.SubscribeReplicationInfo:output_type -> yamcs.protobuf.replication.ReplicationInfo
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_replication_replication_proto_init() }
func file_yamcs_protobuf_replication_replication_proto_init() {
	if File_yamcs_protobuf_replication_replication_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_replication_replication_proto_rawDesc), len(file_yamcs_protobuf_replication_replication_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_replication_replication_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_replication_replication_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_replication_replication_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_replication_replication_proto = out.File
	file_yamcs_protobuf_replication_replication_proto_goTypes = nil
	file_yamcs_protobuf_replication_replication_proto_depIdxs = nil
}
