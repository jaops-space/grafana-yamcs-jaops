// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/processing/mdb_override_service.proto

package processing

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	mdb "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf/mdb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MdbOverrideInfo_OverrideType int32

const (
	// Override of an algorithm's text
	MdbOverrideInfo_ALGORITHM_TEXT MdbOverrideInfo_OverrideType = 0
	// Override of a parameter's type
	// (alarms, calibrators, or both)
	MdbOverrideInfo_PARAMETER MdbOverrideInfo_OverrideType = 1
)

// Enum value maps for MdbOverrideInfo_OverrideType.
var (
	MdbOverrideInfo_OverrideType_name = map[int32]string{
		0: "ALGORITHM_TEXT",
		1: "PARAMETER",
	}
	MdbOverrideInfo_OverrideType_value = map[string]int32{
		"ALGORITHM_TEXT": 0,
		"PARAMETER":      1,
	}
)

func (x MdbOverrideInfo_OverrideType) Enum() *MdbOverrideInfo_OverrideType {
	p := new(MdbOverrideInfo_OverrideType)
	*p = x
	return p
}

func (x MdbOverrideInfo_OverrideType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MdbOverrideInfo_OverrideType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_enumTypes[0].Descriptor()
}

func (MdbOverrideInfo_OverrideType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_processing_mdb_override_service_proto_enumTypes[0]
}

func (x MdbOverrideInfo_OverrideType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MdbOverrideInfo_OverrideType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MdbOverrideInfo_OverrideType(num)
	return nil
}

// Deprecated: Use MdbOverrideInfo_OverrideType.Descriptor instead.
func (MdbOverrideInfo_OverrideType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{7, 0}
}

type UpdateParameterRequest_ActionType int32

const (
	// Reset all parameter properties (calibrators+alarms) to their default
	// Mission Database value
	UpdateParameterRequest_RESET UpdateParameterRequest_ActionType = 0
	// Reset calibrators to their default MDB value
	UpdateParameterRequest_RESET_CALIBRATORS UpdateParameterRequest_ActionType = 1
	// Sets the default calibrator (the contextual ones are unmodified)
	UpdateParameterRequest_SET_DEFAULT_CALIBRATOR UpdateParameterRequest_ActionType = 2
	// Sets all calibrations (default + contextual), if default is not set,
	// the existing calibration is not modified
	UpdateParameterRequest_SET_CALIBRATORS UpdateParameterRequest_ActionType = 3
	// Reset alarms to their default Mission Database value
	UpdateParameterRequest_RESET_ALARMS UpdateParameterRequest_ActionType = 4
	// Sets the default alarms (contextual ones are unmodified)
	UpdateParameterRequest_SET_DEFAULT_ALARMS UpdateParameterRequest_ActionType = 5
	// Sets all alarms (default + contextual), if default is not set, the
	// existing alarm is not modified.
	UpdateParameterRequest_SET_ALARMS UpdateParameterRequest_ActionType = 6
)

// Enum value maps for UpdateParameterRequest_ActionType.
var (
	UpdateParameterRequest_ActionType_name = map[int32]string{
		0: "RESET",
		1: "RESET_CALIBRATORS",
		2: "SET_DEFAULT_CALIBRATOR",
		3: "SET_CALIBRATORS",
		4: "RESET_ALARMS",
		5: "SET_DEFAULT_ALARMS",
		6: "SET_ALARMS",
	}
	UpdateParameterRequest_ActionType_value = map[string]int32{
		"RESET":                  0,
		"RESET_CALIBRATORS":      1,
		"SET_DEFAULT_CALIBRATOR": 2,
		"SET_CALIBRATORS":        3,
		"RESET_ALARMS":           4,
		"SET_DEFAULT_ALARMS":     5,
		"SET_ALARMS":             6,
	}
)

func (x UpdateParameterRequest_ActionType) Enum() *UpdateParameterRequest_ActionType {
	p := new(UpdateParameterRequest_ActionType)
	*p = x
	return p
}

func (x UpdateParameterRequest_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateParameterRequest_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_enumTypes[1].Descriptor()
}

func (UpdateParameterRequest_ActionType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_processing_mdb_override_service_proto_enumTypes[1]
}

func (x UpdateParameterRequest_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UpdateParameterRequest_ActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UpdateParameterRequest_ActionType(num)
	return nil
}

// Deprecated: Use UpdateParameterRequest_ActionType.Descriptor instead.
func (UpdateParameterRequest_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{9, 0}
}

type UpdateAlgorithmRequest_ActionType int32

const (
	// Restores the original MDB definition
	UpdateAlgorithmRequest_RESET UpdateAlgorithmRequest_ActionType = 0
	// Sets the algorithm text
	UpdateAlgorithmRequest_SET UpdateAlgorithmRequest_ActionType = 1
)

// Enum value maps for UpdateAlgorithmRequest_ActionType.
var (
	UpdateAlgorithmRequest_ActionType_name = map[int32]string{
		0: "RESET",
		1: "SET",
	}
	UpdateAlgorithmRequest_ActionType_value = map[string]int32{
		"RESET": 0,
		"SET":   1,
	}
)

func (x UpdateAlgorithmRequest_ActionType) Enum() *UpdateAlgorithmRequest_ActionType {
	p := new(UpdateAlgorithmRequest_ActionType)
	*p = x
	return p
}

func (x UpdateAlgorithmRequest_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateAlgorithmRequest_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_enumTypes[2].Descriptor()
}

func (UpdateAlgorithmRequest_ActionType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_processing_mdb_override_service_proto_enumTypes[2]
}

func (x UpdateAlgorithmRequest_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UpdateAlgorithmRequest_ActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UpdateAlgorithmRequest_ActionType(num)
	return nil
}

// Deprecated: Use UpdateAlgorithmRequest_ActionType.Descriptor instead.
func (UpdateAlgorithmRequest_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{10, 0}
}

type SubscribeMdbChangesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor     *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeMdbChangesRequest) Reset() {
	*x = SubscribeMdbChangesRequest{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeMdbChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMdbChangesRequest) ProtoMessage() {}

func (x *SubscribeMdbChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMdbChangesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeMdbChangesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeMdbChangesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeMdbChangesRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

type ListMdbOverridesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor     *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMdbOverridesRequest) Reset() {
	*x = ListMdbOverridesRequest{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMdbOverridesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMdbOverridesRequest) ProtoMessage() {}

func (x *ListMdbOverridesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMdbOverridesRequest.ProtoReflect.Descriptor instead.
func (*ListMdbOverridesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListMdbOverridesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListMdbOverridesRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

type ListMdbOverridesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Overrides     []*MdbOverrideInfo     `protobuf:"bytes,1,rep,name=overrides" json:"overrides,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMdbOverridesResponse) Reset() {
	*x = ListMdbOverridesResponse{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMdbOverridesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMdbOverridesResponse) ProtoMessage() {}

func (x *ListMdbOverridesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMdbOverridesResponse.ProtoReflect.Descriptor instead.
func (*ListMdbOverridesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListMdbOverridesResponse) GetOverrides() []*MdbOverrideInfo {
	if x != nil {
		return x.Overrides
	}
	return nil
}

type GetAlgorithmOverridesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Algorithm name.
	Name          *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAlgorithmOverridesRequest) Reset() {
	*x = GetAlgorithmOverridesRequest{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAlgorithmOverridesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlgorithmOverridesRequest) ProtoMessage() {}

func (x *GetAlgorithmOverridesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlgorithmOverridesRequest.ProtoReflect.Descriptor instead.
func (*GetAlgorithmOverridesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetAlgorithmOverridesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetAlgorithmOverridesRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *GetAlgorithmOverridesRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetAlgorithmOverridesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Updated algorithm text
	TextOverride  *AlgorithmTextOverride `protobuf:"bytes,1,opt,name=textOverride" json:"textOverride,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAlgorithmOverridesResponse) Reset() {
	*x = GetAlgorithmOverridesResponse{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAlgorithmOverridesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlgorithmOverridesResponse) ProtoMessage() {}

func (x *GetAlgorithmOverridesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlgorithmOverridesResponse.ProtoReflect.Descriptor instead.
func (*GetAlgorithmOverridesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetAlgorithmOverridesResponse) GetTextOverride() *AlgorithmTextOverride {
	if x != nil {
		return x.TextOverride
	}
	return nil
}

type GetParameterOverrideRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Parameter name.
	Name          *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetParameterOverrideRequest) Reset() {
	*x = GetParameterOverrideRequest{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetParameterOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParameterOverrideRequest) ProtoMessage() {}

func (x *GetParameterOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParameterOverrideRequest.ProtoReflect.Descriptor instead.
func (*GetParameterOverrideRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetParameterOverrideRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetParameterOverrideRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *GetParameterOverrideRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// A change to a parameter's type.
//
// This can be either due to an alarm or a calibrator change.
type ParameterOverride struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parameter name
	Parameter *string `protobuf:"bytes,1,opt,name=parameter" json:"parameter,omitempty"`
	// Default calibrator (when no specific context)
	DefaultCalibrator *mdb.CalibratorInfo `protobuf:"bytes,5,opt,name=defaultCalibrator" json:"defaultCalibrator,omitempty"`
	// Calibrators under specific context
	ContextCalibrators []*mdb.ContextCalibratorInfo `protobuf:"bytes,6,rep,name=contextCalibrators" json:"contextCalibrators,omitempty"`
	// Default alarm properties (when no specific context)
	DefaultAlarm *mdb.AlarmInfo `protobuf:"bytes,7,opt,name=defaultAlarm" json:"defaultAlarm,omitempty"`
	// Alarm properties under specific context
	ContextAlarms []*mdb.ContextAlarmInfo `protobuf:"bytes,8,rep,name=contextAlarms" json:"contextAlarms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParameterOverride) Reset() {
	*x = ParameterOverride{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterOverride) ProtoMessage() {}

func (x *ParameterOverride) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterOverride.ProtoReflect.Descriptor instead.
func (*ParameterOverride) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{6}
}

func (x *ParameterOverride) GetParameter() string {
	if x != nil && x.Parameter != nil {
		return *x.Parameter
	}
	return ""
}

func (x *ParameterOverride) GetDefaultCalibrator() *mdb.CalibratorInfo {
	if x != nil {
		return x.DefaultCalibrator
	}
	return nil
}

func (x *ParameterOverride) GetContextCalibrators() []*mdb.ContextCalibratorInfo {
	if x != nil {
		return x.ContextCalibrators
	}
	return nil
}

func (x *ParameterOverride) GetDefaultAlarm() *mdb.AlarmInfo {
	if x != nil {
		return x.DefaultAlarm
	}
	return nil
}

func (x *ParameterOverride) GetContextAlarms() []*mdb.ContextAlarmInfo {
	if x != nil {
		return x.ContextAlarms
	}
	return nil
}

type MdbOverrideInfo struct {
	state                 protoimpl.MessageState        `protogen:"open.v1"`
	Type                  *MdbOverrideInfo_OverrideType `protobuf:"varint,1,opt,name=type,enum=yamcs.protobuf.processing.MdbOverrideInfo_OverrideType" json:"type,omitempty"`
	AlgorithmTextOverride *AlgorithmTextOverride        `protobuf:"bytes,2,opt,name=algorithmTextOverride" json:"algorithmTextOverride,omitempty"`
	ParameterOverride     *ParameterOverride            `protobuf:"bytes,3,opt,name=parameterOverride" json:"parameterOverride,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *MdbOverrideInfo) Reset() {
	*x = MdbOverrideInfo{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MdbOverrideInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MdbOverrideInfo) ProtoMessage() {}

func (x *MdbOverrideInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MdbOverrideInfo.ProtoReflect.Descriptor instead.
func (*MdbOverrideInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{7}
}

func (x *MdbOverrideInfo) GetType() MdbOverrideInfo_OverrideType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MdbOverrideInfo_ALGORITHM_TEXT
}

func (x *MdbOverrideInfo) GetAlgorithmTextOverride() *AlgorithmTextOverride {
	if x != nil {
		return x.AlgorithmTextOverride
	}
	return nil
}

func (x *MdbOverrideInfo) GetParameterOverride() *ParameterOverride {
	if x != nil {
		return x.ParameterOverride
	}
	return nil
}

type AlgorithmTextOverride struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Algorithm name
	Algorithm *string `protobuf:"bytes,1,opt,name=algorithm" json:"algorithm,omitempty"`
	// Algorithm text
	Text          *string `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmTextOverride) Reset() {
	*x = AlgorithmTextOverride{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmTextOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmTextOverride) ProtoMessage() {}

func (x *AlgorithmTextOverride) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmTextOverride.ProtoReflect.Descriptor instead.
func (*AlgorithmTextOverride) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{8}
}

func (x *AlgorithmTextOverride) GetAlgorithm() string {
	if x != nil && x.Algorithm != nil {
		return *x.Algorithm
	}
	return ""
}

func (x *AlgorithmTextOverride) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

// Used to change calibrators or alarms for one parameter
type UpdateParameterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Parameter name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The action by which to modify this parameter.
	Action *UpdateParameterRequest_ActionType `protobuf:"varint,4,opt,name=action,enum=yamcs.protobuf.processing.UpdateParameterRequest_ActionType" json:"action,omitempty"`
	// Used when action = SET_DEFAULT_CALIBRATOR or SET_CALIBRATORS
	DefaultCalibrator *mdb.CalibratorInfo `protobuf:"bytes,5,opt,name=defaultCalibrator" json:"defaultCalibrator,omitempty"`
	// Used when action = SET_CALIBRATORS
	ContextCalibrator []*mdb.ContextCalibratorInfo `protobuf:"bytes,6,rep,name=contextCalibrator" json:"contextCalibrator,omitempty"`
	// Used when action = SET_DEFAULT_ALARMS or SET_ALARMS
	DefaultAlarm *mdb.AlarmInfo `protobuf:"bytes,7,opt,name=defaultAlarm" json:"defaultAlarm,omitempty"`
	// Used when action = SET_ALARMS
	ContextAlarm  []*mdb.ContextAlarmInfo `protobuf:"bytes,8,rep,name=contextAlarm" json:"contextAlarm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateParameterRequest) Reset() {
	*x = UpdateParameterRequest{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateParameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateParameterRequest) ProtoMessage() {}

func (x *UpdateParameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateParameterRequest.ProtoReflect.Descriptor instead.
func (*UpdateParameterRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateParameterRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *UpdateParameterRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *UpdateParameterRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateParameterRequest) GetAction() UpdateParameterRequest_ActionType {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return UpdateParameterRequest_RESET
}

func (x *UpdateParameterRequest) GetDefaultCalibrator() *mdb.CalibratorInfo {
	if x != nil {
		return x.DefaultCalibrator
	}
	return nil
}

func (x *UpdateParameterRequest) GetContextCalibrator() []*mdb.ContextCalibratorInfo {
	if x != nil {
		return x.ContextCalibrator
	}
	return nil
}

func (x *UpdateParameterRequest) GetDefaultAlarm() *mdb.AlarmInfo {
	if x != nil {
		return x.DefaultAlarm
	}
	return nil
}

func (x *UpdateParameterRequest) GetContextAlarm() []*mdb.ContextAlarmInfo {
	if x != nil {
		return x.ContextAlarm
	}
	return nil
}

type UpdateAlgorithmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Algorithm name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The action by which to modify this algorithm
	Action *UpdateAlgorithmRequest_ActionType `protobuf:"varint,4,opt,name=action,enum=yamcs.protobuf.processing.UpdateAlgorithmRequest_ActionType" json:"action,omitempty"`
	// Used when action = SET
	Algorithm     *mdb.AlgorithmInfo `protobuf:"bytes,6,opt,name=algorithm" json:"algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateAlgorithmRequest) Reset() {
	*x = UpdateAlgorithmRequest{}
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAlgorithmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAlgorithmRequest) ProtoMessage() {}

func (x *UpdateAlgorithmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAlgorithmRequest.ProtoReflect.Descriptor instead.
func (*UpdateAlgorithmRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateAlgorithmRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *UpdateAlgorithmRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *UpdateAlgorithmRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateAlgorithmRequest) GetAction() UpdateAlgorithmRequest_ActionType {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return UpdateAlgorithmRequest_RESET
}

func (x *UpdateAlgorithmRequest) GetAlgorithm() *mdb.AlgorithmInfo {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

var File_yamcs_protobuf_processing_mdb_override_service_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_processing_mdb_override_service_proto_rawDesc = string([]byte{
	0x0a, 0x34, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x64, 0x62, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x64, 0x62, 0x2f,
	0x6d, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x1a, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x64, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x22, 0x53, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x64, 0x62, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0x64, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x64,
	0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x64, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x74,
	0x65, 0x78, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x22, 0x6b, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xed,
	0x02, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x41, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x22, 0xd5,
	0x02, 0x0a, 0x0f, 0x4d, 0x64, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x64, 0x62,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x66, 0x0a, 0x15, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x65, 0x78, 0x74,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x52, 0x15, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x45, 0x54, 0x45, 0x52, 0x10, 0x01, 0x22, 0x49, 0x0a, 0x15, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x90, 0x05, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x57, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x48,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x22, 0x99, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x54,
	0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x41, 0x4c,
	0x49, 0x42, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45,
	0x53, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x53, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x41, 0x4c, 0x41, 0x52,
	0x4d, 0x53, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x41, 0x52,
	0x4d, 0x53, 0x10, 0x06, 0x22, 0x9f, 0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x22, 0x20, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x45, 0x54, 0x10, 0x01, 0x32, 0xf3, 0x09, 0x0a, 0x0e, 0x4d, 0x64, 0x62, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x41, 0x70, 0x69, 0x12, 0xc0, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x64, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x32,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x64, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x64, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x8a, 0x92, 0x03, 0x3f, 0x6a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x4d, 0x44, 0x42, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x0a, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2d, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x12, 0xce, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x8a, 0x92, 0x03, 0x3e, 0x0a,
	0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x12, 0xc0, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x36, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x42, 0x8a, 0x92,
	0x03, 0x3e, 0x0a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2d, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d,
	0x12, 0xee, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80,
	0x01, 0x8a, 0x92, 0x03, 0x7c, 0x3a, 0x01, 0x2a, 0x5a, 0x39, 0x30, 0x01, 0x3a, 0x01, 0x2a, 0x2a,
	0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d,
	0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x2a, 0x7d, 0x2a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2d, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a,
	0x7d, 0x12, 0xdf, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x80, 0x01, 0x8a, 0x92, 0x03, 0x7c, 0x3a, 0x01, 0x2a, 0x5a, 0x39, 0x30, 0x01, 0x3a, 0x01,
	0x2a, 0x2a, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x7d, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x2a, 0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2d,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d,
	0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x2a, 0x7d, 0x12, 0xa4, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4d, 0x64, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x4d, 0x64, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x64, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28,
	0xda, 0x92, 0x03, 0x24, 0x0a, 0x0b, 0x6d, 0x64, 0x62, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x22, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x20, 0x4d, 0x44, 0x42,
	0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x30, 0x01, 0x1a, 0x10, 0x82, 0x80, 0x01, 0x0c,
	0x4d, 0x44, 0x42, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x42, 0x79, 0x0a, 0x12,
	0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x42, 0x17, 0x4d, 0x64, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
})

var (
	file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescData []byte
)

func file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_processing_mdb_override_service_proto_rawDesc), len(file_yamcs_protobuf_processing_mdb_override_service_proto_rawDesc)))
	})
	return file_yamcs_protobuf_processing_mdb_override_service_proto_rawDescData
}

var file_yamcs_protobuf_processing_mdb_override_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_yamcs_protobuf_processing_mdb_override_service_proto_goTypes = []any{
	(MdbOverrideInfo_OverrideType)(0),      // 0: yamcs.protobuf.processing.MdbOverrideInfo.OverrideType
	(UpdateParameterRequest_ActionType)(0), // 1: yamcs.protobuf.processing.UpdateParameterRequest.ActionType
	(UpdateAlgorithmRequest_ActionType)(0), // 2: yamcs.protobuf.processing.UpdateAlgorithmRequest.ActionType
	(*SubscribeMdbChangesRequest)(nil),     // 3: yamcs.protobuf.processing.SubscribeMdbChangesRequest
	(*ListMdbOverridesRequest)(nil),        // 4: yamcs.protobuf.processing.ListMdbOverridesRequest
	(*ListMdbOverridesResponse)(nil),       // 5: yamcs.protobuf.processing.ListMdbOverridesResponse
	(*GetAlgorithmOverridesRequest)(nil),   // 6: yamcs.protobuf.processing.GetAlgorithmOverridesRequest
	(*GetAlgorithmOverridesResponse)(nil),  // 7: yamcs.protobuf.processing.GetAlgorithmOverridesResponse
	(*GetParameterOverrideRequest)(nil),    // 8: yamcs.protobuf.processing.GetParameterOverrideRequest
	(*ParameterOverride)(nil),              // 9: yamcs.protobuf.processing.ParameterOverride
	(*MdbOverrideInfo)(nil),                // 10: yamcs.protobuf.processing.MdbOverrideInfo
	(*AlgorithmTextOverride)(nil),          // 11: yamcs.protobuf.processing.AlgorithmTextOverride
	(*UpdateParameterRequest)(nil),         // 12: yamcs.protobuf.processing.UpdateParameterRequest
	(*UpdateAlgorithmRequest)(nil),         // 13: yamcs.protobuf.processing.UpdateAlgorithmRequest
	(*mdb.CalibratorInfo)(nil),             // 14: yamcs.protobuf.mdb.CalibratorInfo
	(*mdb.ContextCalibratorInfo)(nil),      // 15: yamcs.protobuf.mdb.ContextCalibratorInfo
	(*mdb.AlarmInfo)(nil),                  // 16: yamcs.protobuf.mdb.AlarmInfo
	(*mdb.ContextAlarmInfo)(nil),           // 17: yamcs.protobuf.mdb.ContextAlarmInfo
	(*mdb.AlgorithmInfo)(nil),              // 18: yamcs.protobuf.mdb.AlgorithmInfo
	(*mdb.ParameterTypeInfo)(nil),          // 19: yamcs.protobuf.mdb.ParameterTypeInfo
	(*emptypb.Empty)(nil),                  // 20: google.protobuf.Empty
}
var file_yamcs_protobuf_processing_mdb_override_service_proto_depIdxs = []int32{
	10, // 0: yamcs.protobuf.processing.ListMdbOverridesResponse.overrides:type_name -> yamcs.protobuf.processing.MdbOverrideInfo
	11, // 1: yamcs.protobuf.processing.GetAlgorithmOverridesResponse.textOverride:type_name -> yamcs.protobuf.processing.AlgorithmTextOverride
	14, // 2: yamcs.protobuf.processing.ParameterOverride.defaultCalibrator:type_name -> yamcs.protobuf.mdb.CalibratorInfo
	15, // 3: yamcs.protobuf.processing.ParameterOverride.contextCalibrators:type_name -> yamcs.protobuf.mdb.ContextCalibratorInfo
	16, // 4: yamcs.protobuf.processing.ParameterOverride.defaultAlarm:type_name -> yamcs.protobuf.mdb.AlarmInfo
	17, // 5: yamcs.protobuf.processing.ParameterOverride.contextAlarms:type_name -> yamcs.protobuf.mdb.ContextAlarmInfo
	0,  // 6: yamcs.protobuf.processing.MdbOverrideInfo.type:type_name -> yamcs.protobuf.processing.MdbOverrideInfo.OverrideType
	11, // 7: yamcs.protobuf.processing.MdbOverrideInfo.algorithmTextOverride:type_name -> yamcs.protobuf.processing.AlgorithmTextOverride
	9,  // 8: yamcs.protobuf.processing.MdbOverrideInfo.parameterOverride:type_name -> yamcs.protobuf.processing.ParameterOverride
	1,  // 9: yamcs.protobuf.processing.UpdateParameterRequest.action:type_name -> yamcs.protobuf.processing.UpdateParameterRequest.ActionType
	14, // 10: yamcs.protobuf.processing.UpdateParameterRequest.defaultCalibrator:type_name -> yamcs.protobuf.mdb.CalibratorInfo
	15, // 11: yamcs.protobuf.processing.UpdateParameterRequest.contextCalibrator:type_name -> yamcs.protobuf.mdb.ContextCalibratorInfo
	16, // 12: yamcs.protobuf.processing.UpdateParameterRequest.defaultAlarm:type_name -> yamcs.protobuf.mdb.AlarmInfo
	17, // 13: yamcs.protobuf.processing.UpdateParameterRequest.contextAlarm:type_name -> yamcs.protobuf.mdb.ContextAlarmInfo
	2,  // 14: yamcs.protobuf.processing.UpdateAlgorithmRequest.action:type_name -> yamcs.protobuf.processing.UpdateAlgorithmRequest.ActionType
	18, // 15: yamcs.protobuf.processing.UpdateAlgorithmRequest.algorithm:type_name -> yamcs.protobuf.mdb.AlgorithmInfo
	4,  // 16: yamcs.protobuf.processing.MdbOverrideApi.ListMdbOverrides:input_type -> yamcs.protobuf.processing.ListMdbOverridesRequest
	6,  // 17: yamcs.protobuf.processing.MdbOverrideApi.GetAlgorithmOverrides:input_type -> yamcs.protobuf.processing.GetAlgorithmOverridesRequest
	8,  // 18: yamcs.protobuf.processing.MdbOverrideApi.GetParameterOverride:input_type -> yamcs.protobuf.processing.GetParameterOverrideRequest
	12, // 19: yamcs.protobuf.processing.MdbOverrideApi.UpdateParameter:input_type -> yamcs.protobuf.processing.UpdateParameterRequest
	13, // 20: yamcs.protobuf.processing.MdbOverrideApi.UpdateAlgorithm:input_type -> yamcs.protobuf.processing.UpdateAlgorithmRequest
	3,  // 21: yamcs.protobuf.processing.MdbOverrideApi.SubscribeMdbChanges:input_type -> yamcs.protobuf.processing.SubscribeMdbChangesRequest
	5,  // 22: yamcs.protobuf.processing.MdbOverrideApi.ListMdbOverrides:output_type -> yamcs.protobuf.processing.ListMdbOverridesResponse
	7,  // 23: yamcs.protobuf.processing.MdbOverrideApi.GetAlgorithmOverrides:output_type -> yamcs.protobuf.processing.GetAlgorithmOverridesResponse
	9,  // 24: yamcs.protobuf.processing.MdbOverrideApi.GetParameterOverride:output_type -> yamcs.protobuf.processing.ParameterOverride
	19, // 25: yamcs.protobuf.processing.MdbOverrideApi.UpdateParameter:output_type -> yamcs.protobuf.mdb.ParameterTypeInfo
	20, // 26: yamcs.protobuf.processing.MdbOverrideApi.UpdateAlgorithm:output_type -> google.protobuf.Empty
	10, // 27: yamcs.protobuf.processing.MdbOverrideApi.SubscribeMdbChanges:output_type -> yamcs.protobuf.processing.MdbOverrideInfo
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_processing_mdb_override_service_proto_init() }
func file_yamcs_protobuf_processing_mdb_override_service_proto_init() {
	if File_yamcs_protobuf_processing_mdb_override_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_processing_mdb_override_service_proto_rawDesc), len(file_yamcs_protobuf_processing_mdb_override_service_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_processing_mdb_override_service_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_processing_mdb_override_service_proto_depIdxs,
		EnumInfos:         file_yamcs_protobuf_processing_mdb_override_service_proto_enumTypes,
		MessageInfos:      file_yamcs_protobuf_processing_mdb_override_service_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_processing_mdb_override_service_proto = out.File
	file_yamcs_protobuf_processing_mdb_override_service_proto_goTypes = nil
	file_yamcs_protobuf_processing_mdb_override_service_proto_depIdxs = nil
}
