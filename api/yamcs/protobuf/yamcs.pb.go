// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/yamcs.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EndAction int32

const (
	EndAction_LOOP EndAction = 1
	EndAction_QUIT EndAction = 2
	EndAction_STOP EndAction = 3
)

// Enum value maps for EndAction.
var (
	EndAction_name = map[int32]string{
		1: "LOOP",
		2: "QUIT",
		3: "STOP",
	}
	EndAction_value = map[string]int32{
		"LOOP": 1,
		"QUIT": 2,
		"STOP": 3,
	}
)

func (x EndAction) Enum() *EndAction {
	p := new(EndAction)
	*p = x
	return p
}

func (x EndAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndAction) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_yamcs_proto_enumTypes[0].Descriptor()
}

func (EndAction) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_yamcs_proto_enumTypes[0]
}

func (x EndAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EndAction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EndAction(num)
	return nil
}

// Deprecated: Use EndAction.Descriptor instead.
func (EndAction) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{0}
}

type Value_Type int32

const (
	Value_FLOAT     Value_Type = 0
	Value_DOUBLE    Value_Type = 1
	Value_UINT32    Value_Type = 2
	Value_SINT32    Value_Type = 3
	Value_BINARY    Value_Type = 4
	Value_STRING    Value_Type = 5
	Value_TIMESTAMP Value_Type = 6
	Value_UINT64    Value_Type = 7
	Value_SINT64    Value_Type = 8
	Value_BOOLEAN   Value_Type = 9
	Value_AGGREGATE Value_Type = 10
	Value_ARRAY     Value_Type = 11
	// Enumerated values have both an integer (sint64Value) and a string representation
	Value_ENUMERATED Value_Type = 12
	Value_NONE       Value_Type = 13
)

// Enum value maps for Value_Type.
var (
	Value_Type_name = map[int32]string{
		0:  "FLOAT",
		1:  "DOUBLE",
		2:  "UINT32",
		3:  "SINT32",
		4:  "BINARY",
		5:  "STRING",
		6:  "TIMESTAMP",
		7:  "UINT64",
		8:  "SINT64",
		9:  "BOOLEAN",
		10: "AGGREGATE",
		11: "ARRAY",
		12: "ENUMERATED",
		13: "NONE",
	}
	Value_Type_value = map[string]int32{
		"FLOAT":      0,
		"DOUBLE":     1,
		"UINT32":     2,
		"SINT32":     3,
		"BINARY":     4,
		"STRING":     5,
		"TIMESTAMP":  6,
		"UINT64":     7,
		"SINT64":     8,
		"BOOLEAN":    9,
		"AGGREGATE":  10,
		"ARRAY":      11,
		"ENUMERATED": 12,
		"NONE":       13,
	}
)

func (x Value_Type) Enum() *Value_Type {
	p := new(Value_Type)
	*p = x
	return p
}

func (x Value_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Value_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_yamcs_proto_enumTypes[1].Descriptor()
}

func (Value_Type) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_yamcs_proto_enumTypes[1]
}

func (x Value_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Value_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Value_Type(num)
	return nil
}

// Deprecated: Use Value_Type.Descriptor instead.
func (Value_Type) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{0, 0}
}

type ReplaySpeed_ReplaySpeedType int32

const (
	ReplaySpeed_AFAP         ReplaySpeed_ReplaySpeedType = 1
	ReplaySpeed_FIXED_DELAY  ReplaySpeed_ReplaySpeedType = 2
	ReplaySpeed_REALTIME     ReplaySpeed_ReplaySpeedType = 3
	ReplaySpeed_STEP_BY_STEP ReplaySpeed_ReplaySpeedType = 4
)

// Enum value maps for ReplaySpeed_ReplaySpeedType.
var (
	ReplaySpeed_ReplaySpeedType_name = map[int32]string{
		1: "AFAP",
		2: "FIXED_DELAY",
		3: "REALTIME",
		4: "STEP_BY_STEP",
	}
	ReplaySpeed_ReplaySpeedType_value = map[string]int32{
		"AFAP":         1,
		"FIXED_DELAY":  2,
		"REALTIME":     3,
		"STEP_BY_STEP": 4,
	}
)

func (x ReplaySpeed_ReplaySpeedType) Enum() *ReplaySpeed_ReplaySpeedType {
	p := new(ReplaySpeed_ReplaySpeedType)
	*p = x
	return p
}

func (x ReplaySpeed_ReplaySpeedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplaySpeed_ReplaySpeedType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_yamcs_proto_enumTypes[2].Descriptor()
}

func (ReplaySpeed_ReplaySpeedType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_yamcs_proto_enumTypes[2]
}

func (x ReplaySpeed_ReplaySpeedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReplaySpeed_ReplaySpeedType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReplaySpeed_ReplaySpeedType(num)
	return nil
}

// Deprecated: Use ReplaySpeed_ReplaySpeedType.Descriptor instead.
func (ReplaySpeed_ReplaySpeedType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{5, 0}
}

type ReplayStatus_ReplayState int32

const (
	// just at the beginning or when the replay request (start, stop or packet selection) changes
	ReplayStatus_INITIALIZATION ReplayStatus_ReplayState = 0
	ReplayStatus_RUNNING        ReplayStatus_ReplayState = 1
	// The replay has reached the end with the endaction stop
	ReplayStatus_STOPPED ReplayStatus_ReplayState = 2
	// The replay stopped due to an error.
	ReplayStatus_ERROR  ReplayStatus_ReplayState = 3
	ReplayStatus_PAUSED ReplayStatus_ReplayState = 4
	// The replay is finished and closed
	ReplayStatus_CLOSED ReplayStatus_ReplayState = 5
)

// Enum value maps for ReplayStatus_ReplayState.
var (
	ReplayStatus_ReplayState_name = map[int32]string{
		0: "INITIALIZATION",
		1: "RUNNING",
		2: "STOPPED",
		3: "ERROR",
		4: "PAUSED",
		5: "CLOSED",
	}
	ReplayStatus_ReplayState_value = map[string]int32{
		"INITIALIZATION": 0,
		"RUNNING":        1,
		"STOPPED":        2,
		"ERROR":          3,
		"PAUSED":         4,
		"CLOSED":         5,
	}
)

func (x ReplayStatus_ReplayState) Enum() *ReplayStatus_ReplayState {
	p := new(ReplayStatus_ReplayState)
	*p = x
	return p
}

func (x ReplayStatus_ReplayState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplayStatus_ReplayState) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_yamcs_proto_enumTypes[3].Descriptor()
}

func (ReplayStatus_ReplayState) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_yamcs_proto_enumTypes[3]
}

func (x ReplayStatus_ReplayState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReplayStatus_ReplayState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReplayStatus_ReplayState(num)
	return nil
}

// Deprecated: Use ReplayStatus_ReplayState.Descriptor instead.
func (ReplayStatus_ReplayState) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{12, 0}
}

// Union type for storing a value
type Value struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           *Value_Type            `protobuf:"varint,1,req,name=type,enum=yamcs.protobuf.Value_Type" json:"type,omitempty"`
	FloatValue     *float32               `protobuf:"fixed32,2,opt,name=floatValue" json:"floatValue,omitempty"`
	DoubleValue    *float64               `protobuf:"fixed64,3,opt,name=doubleValue" json:"doubleValue,omitempty"`
	Sint32Value    *int32                 `protobuf:"zigzag32,4,opt,name=sint32Value" json:"sint32Value,omitempty"`
	Uint32Value    *uint32                `protobuf:"varint,5,opt,name=uint32Value" json:"uint32Value,omitempty"`
	BinaryValue    []byte                 `protobuf:"bytes,6,opt,name=binaryValue" json:"binaryValue,omitempty"`
	StringValue    *string                `protobuf:"bytes,7,opt,name=stringValue" json:"stringValue,omitempty"`
	TimestampValue *int64                 `protobuf:"varint,8,opt,name=timestampValue" json:"timestampValue,omitempty"`
	Uint64Value    *uint64                `protobuf:"varint,9,opt,name=uint64Value" json:"uint64Value,omitempty"`
	Sint64Value    *int64                 `protobuf:"zigzag64,10,opt,name=sint64Value" json:"sint64Value,omitempty"`
	BooleanValue   *bool                  `protobuf:"varint,11,opt,name=booleanValue" json:"booleanValue,omitempty"`
	AggregateValue *AggregateValue        `protobuf:"bytes,12,opt,name=aggregateValue" json:"aggregateValue,omitempty"`
	ArrayValue     []*Value               `protobuf:"bytes,13,rep,name=arrayValue" json:"arrayValue,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{0}
}

func (x *Value) GetType() Value_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Value_FLOAT
}

func (x *Value) GetFloatValue() float32 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *Value) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *Value) GetSint32Value() int32 {
	if x != nil && x.Sint32Value != nil {
		return *x.Sint32Value
	}
	return 0
}

func (x *Value) GetUint32Value() uint32 {
	if x != nil && x.Uint32Value != nil {
		return *x.Uint32Value
	}
	return 0
}

func (x *Value) GetBinaryValue() []byte {
	if x != nil {
		return x.BinaryValue
	}
	return nil
}

func (x *Value) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *Value) GetTimestampValue() int64 {
	if x != nil && x.TimestampValue != nil {
		return *x.TimestampValue
	}
	return 0
}

func (x *Value) GetUint64Value() uint64 {
	if x != nil && x.Uint64Value != nil {
		return *x.Uint64Value
	}
	return 0
}

func (x *Value) GetSint64Value() int64 {
	if x != nil && x.Sint64Value != nil {
		return *x.Sint64Value
	}
	return 0
}

func (x *Value) GetBooleanValue() bool {
	if x != nil && x.BooleanValue != nil {
		return *x.BooleanValue
	}
	return false
}

func (x *Value) GetAggregateValue() *AggregateValue {
	if x != nil {
		return x.AggregateValue
	}
	return nil
}

func (x *Value) GetArrayValue() []*Value {
	if x != nil {
		return x.ArrayValue
	}
	return nil
}

// An aggregate value is an ordered list of (member name, member value).
// Two arrays are used in order to be able to send just the values (since
// the names will not change)
type AggregateValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          []string               `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	Value         []*Value               `protobuf:"bytes,2,rep,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AggregateValue) Reset() {
	*x = AggregateValue{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AggregateValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateValue) ProtoMessage() {}

func (x *AggregateValue) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateValue.ProtoReflect.Descriptor instead.
func (*AggregateValue) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{1}
}

func (x *AggregateValue) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AggregateValue) GetValue() []*Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// Used by external clients to identify an item in the Mission Database
// If namespace is set, then the name is that of an alias, rather than
// the qualified name.
type NamedObjectId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	Namespace     *string                `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamedObjectId) Reset() {
	*x = NamedObjectId{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedObjectId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedObjectId) ProtoMessage() {}

func (x *NamedObjectId) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedObjectId.ProtoReflect.Descriptor instead.
func (*NamedObjectId) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{2}
}

func (x *NamedObjectId) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NamedObjectId) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

type NamedObjectList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	List          []*NamedObjectId       `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamedObjectList) Reset() {
	*x = NamedObjectList{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedObjectList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedObjectList) ProtoMessage() {}

func (x *NamedObjectList) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedObjectList.ProtoReflect.Descriptor instead.
func (*NamedObjectList) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{3}
}

func (x *NamedObjectList) GetList() []*NamedObjectId {
	if x != nil {
		return x.List
	}
	return nil
}

// contains histogram data
type ArchiveRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *NamedObjectId         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Num           *int32                 `protobuf:"varint,4,opt,name=num" json:"num,omitempty"`
	SeqFirst      *int64                 `protobuf:"varint,6,opt,name=seqFirst" json:"seqFirst,omitempty"`
	SeqLast       *int64                 `protobuf:"varint,7,opt,name=seqLast" json:"seqLast,omitempty"`
	First         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=first" json:"first,omitempty"`
	Last          *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last" json:"last,omitempty"`
	Extra         map[string]string      `protobuf:"bytes,10,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecord) Reset() {
	*x = ArchiveRecord{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecord) ProtoMessage() {}

func (x *ArchiveRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecord.ProtoReflect.Descriptor instead.
func (*ArchiveRecord) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{4}
}

func (x *ArchiveRecord) GetId() *NamedObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ArchiveRecord) GetNum() int32 {
	if x != nil && x.Num != nil {
		return *x.Num
	}
	return 0
}

func (x *ArchiveRecord) GetSeqFirst() int64 {
	if x != nil && x.SeqFirst != nil {
		return *x.SeqFirst
	}
	return 0
}

func (x *ArchiveRecord) GetSeqLast() int64 {
	if x != nil && x.SeqLast != nil {
		return *x.SeqLast
	}
	return 0
}

func (x *ArchiveRecord) GetFirst() *timestamppb.Timestamp {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *ArchiveRecord) GetLast() *timestamppb.Timestamp {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *ArchiveRecord) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ReplaySpeed struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Type          *ReplaySpeed_ReplaySpeedType `protobuf:"varint,1,req,name=type,enum=yamcs.protobuf.ReplaySpeed_ReplaySpeedType" json:"type,omitempty"`
	Param         *float32                     `protobuf:"fixed32,2,opt,name=param" json:"param,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplaySpeed) Reset() {
	*x = ReplaySpeed{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplaySpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaySpeed) ProtoMessage() {}

func (x *ReplaySpeed) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaySpeed.ProtoReflect.Descriptor instead.
func (*ReplaySpeed) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{5}
}

func (x *ReplaySpeed) GetType() ReplaySpeed_ReplaySpeedType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ReplaySpeed_AFAP
}

func (x *ReplaySpeed) GetParam() float32 {
	if x != nil && x.Param != nil {
		return *x.Param
	}
	return 0
}

// used to replay (concurrently) TM packets, parameters and events
type ReplayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// **Required.** The time at which the replay should start.
	Start *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=start" json:"start,omitempty"`
	// The time at which the replay should stop.
	// If unspecified, the replay will keep going as long  as there is remaining data.
	Stop *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=stop" json:"stop,omitempty"`
	// what should happen at the end of the replay
	EndAction *EndAction `protobuf:"varint,3,opt,name=endAction,enum=yamcs.protobuf.EndAction,def=2" json:"endAction,omitempty"`
	// how fast the replay should go
	Speed *ReplaySpeed `protobuf:"bytes,4,opt,name=speed" json:"speed,omitempty"`
	// Reverse the direction of the replay
	Reverse          *bool                   `protobuf:"varint,15,opt,name=reverse" json:"reverse,omitempty"`
	ParameterRequest *ParameterReplayRequest `protobuf:"bytes,8,opt,name=parameterRequest" json:"parameterRequest,omitempty"`
	// By default all Packets, Events, CommandHistory are part of the replay
	// Unless one or more of the below requests are specified.
	PacketRequest         *PacketReplayRequest         `protobuf:"bytes,9,opt,name=packetRequest" json:"packetRequest,omitempty"`
	EventRequest          *EventReplayRequest          `protobuf:"bytes,10,opt,name=eventRequest" json:"eventRequest,omitempty"`
	CommandHistoryRequest *CommandHistoryReplayRequest `protobuf:"bytes,11,opt,name=commandHistoryRequest" json:"commandHistoryRequest,omitempty"`
	PpRequest             *PpReplayRequest             `protobuf:"bytes,12,opt,name=ppRequest" json:"ppRequest,omitempty"`
	// Start the replay following initialization
	// Defaults to true, if unspecified
	Autostart     *bool `protobuf:"varint,16,opt,name=autostart,def=1" json:"autostart,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ReplayRequest fields.
const (
	Default_ReplayRequest_EndAction = EndAction_QUIT
	Default_ReplayRequest_Autostart = bool(true)
)

func (x *ReplayRequest) Reset() {
	*x = ReplayRequest{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplayRequest) ProtoMessage() {}

func (x *ReplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplayRequest.ProtoReflect.Descriptor instead.
func (*ReplayRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{6}
}

func (x *ReplayRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ReplayRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ReplayRequest) GetEndAction() EndAction {
	if x != nil && x.EndAction != nil {
		return *x.EndAction
	}
	return Default_ReplayRequest_EndAction
}

func (x *ReplayRequest) GetSpeed() *ReplaySpeed {
	if x != nil {
		return x.Speed
	}
	return nil
}

func (x *ReplayRequest) GetReverse() bool {
	if x != nil && x.Reverse != nil {
		return *x.Reverse
	}
	return false
}

func (x *ReplayRequest) GetParameterRequest() *ParameterReplayRequest {
	if x != nil {
		return x.ParameterRequest
	}
	return nil
}

func (x *ReplayRequest) GetPacketRequest() *PacketReplayRequest {
	if x != nil {
		return x.PacketRequest
	}
	return nil
}

func (x *ReplayRequest) GetEventRequest() *EventReplayRequest {
	if x != nil {
		return x.EventRequest
	}
	return nil
}

func (x *ReplayRequest) GetCommandHistoryRequest() *CommandHistoryReplayRequest {
	if x != nil {
		return x.CommandHistoryRequest
	}
	return nil
}

func (x *ReplayRequest) GetPpRequest() *PpReplayRequest {
	if x != nil {
		return x.PpRequest
	}
	return nil
}

func (x *ReplayRequest) GetAutostart() bool {
	if x != nil && x.Autostart != nil {
		return *x.Autostart
	}
	return Default_ReplayRequest_Autostart
}

type ParameterReplayRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NameFilter        []*NamedObjectId       `protobuf:"bytes,1,rep,name=nameFilter" json:"nameFilter,omitempty"` // At least 1 filter is required
	SendRaw           *bool                  `protobuf:"varint,2,opt,name=sendRaw,def=0" json:"sendRaw,omitempty"`
	PerformMonitoring *bool                  `protobuf:"varint,3,opt,name=performMonitoring,def=0" json:"performMonitoring,omitempty"` //i.e. out of limit checking
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

// Default values for ParameterReplayRequest fields.
const (
	Default_ParameterReplayRequest_SendRaw           = bool(false)
	Default_ParameterReplayRequest_PerformMonitoring = bool(false)
)

func (x *ParameterReplayRequest) Reset() {
	*x = ParameterReplayRequest{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterReplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterReplayRequest) ProtoMessage() {}

func (x *ParameterReplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterReplayRequest.ProtoReflect.Descriptor instead.
func (*ParameterReplayRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{7}
}

func (x *ParameterReplayRequest) GetNameFilter() []*NamedObjectId {
	if x != nil {
		return x.NameFilter
	}
	return nil
}

func (x *ParameterReplayRequest) GetSendRaw() bool {
	if x != nil && x.SendRaw != nil {
		return *x.SendRaw
	}
	return Default_ParameterReplayRequest_SendRaw
}

func (x *ParameterReplayRequest) GetPerformMonitoring() bool {
	if x != nil && x.PerformMonitoring != nil {
		return *x.PerformMonitoring
	}
	return Default_ParameterReplayRequest_PerformMonitoring
}

type PacketReplayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// No filter, means all packets for which privileges exist, are sent
	NameFilter []*NamedObjectId `protobuf:"bytes,1,rep,name=nameFilter" json:"nameFilter,omitempty"`
	// if specified, only replay packets originally received on one of those links
	TmLinks       []string `protobuf:"bytes,2,rep,name=tmLinks" json:"tmLinks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PacketReplayRequest) Reset() {
	*x = PacketReplayRequest{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PacketReplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PacketReplayRequest) ProtoMessage() {}

func (x *PacketReplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PacketReplayRequest.ProtoReflect.Descriptor instead.
func (*PacketReplayRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{8}
}

func (x *PacketReplayRequest) GetNameFilter() []*NamedObjectId {
	if x != nil {
		return x.NameFilter
	}
	return nil
}

func (x *PacketReplayRequest) GetTmLinks() []string {
	if x != nil {
		return x.TmLinks
	}
	return nil
}

type EventReplayRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventReplayRequest) Reset() {
	*x = EventReplayRequest{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventReplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventReplayRequest) ProtoMessage() {}

func (x *EventReplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventReplayRequest.ProtoReflect.Descriptor instead.
func (*EventReplayRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{9}
}

type CommandHistoryReplayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// No filter, means all command history entries are sent
	NameFilter    []*NamedObjectId `protobuf:"bytes,1,rep,name=nameFilter" json:"nameFilter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandHistoryReplayRequest) Reset() {
	*x = CommandHistoryReplayRequest{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandHistoryReplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandHistoryReplayRequest) ProtoMessage() {}

func (x *CommandHistoryReplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandHistoryReplayRequest.ProtoReflect.Descriptor instead.
func (*CommandHistoryReplayRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{10}
}

func (x *CommandHistoryReplayRequest) GetNameFilter() []*NamedObjectId {
	if x != nil {
		return x.NameFilter
	}
	return nil
}

// Request to replay parameters - they can be filtered by the parameter group
type PpReplayRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// No filter, means all pp groups are sent
	GroupNameFilter []string `protobuf:"bytes,1,rep,name=groupNameFilter" json:"groupNameFilter,omitempty"`
	// exclude the parameters from these groups
	//
	//	this takes precedence over the filter above (i.e. if a group is part of both, it will be excluded)
	GroupNameExclude []string `protobuf:"bytes,2,rep,name=groupNameExclude" json:"groupNameExclude,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PpReplayRequest) Reset() {
	*x = PpReplayRequest{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PpReplayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PpReplayRequest) ProtoMessage() {}

func (x *PpReplayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PpReplayRequest.ProtoReflect.Descriptor instead.
func (*PpReplayRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{11}
}

func (x *PpReplayRequest) GetGroupNameFilter() []string {
	if x != nil {
		return x.GroupNameFilter
	}
	return nil
}

func (x *PpReplayRequest) GetGroupNameExclude() []string {
	if x != nil {
		return x.GroupNameExclude
	}
	return nil
}

type ReplayStatus struct {
	state   protoimpl.MessageState    `protogen:"open.v1"`
	State   *ReplayStatus_ReplayState `protobuf:"varint,1,req,name=state,enum=yamcs.protobuf.ReplayStatus_ReplayState" json:"state,omitempty"`
	Request *ReplayRequest            `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	// In case state is ERROR
	ErrorMessage  *string `protobuf:"bytes,3,opt,name=errorMessage" json:"errorMessage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplayStatus) Reset() {
	*x = ReplayStatus{}
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplayStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplayStatus) ProtoMessage() {}

func (x *ReplayStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_yamcs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplayStatus.ProtoReflect.Descriptor instead.
func (*ReplayStatus) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_yamcs_proto_rawDescGZIP(), []int{12}
}

func (x *ReplayStatus) GetState() ReplayStatus_ReplayState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ReplayStatus_INITIALIZATION
}

func (x *ReplayStatus) GetRequest() *ReplayRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ReplayStatus) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

var File_yamcs_protobuf_yamcs_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_yamcs_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x05,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x46, 0x0a, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xb5, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f,
	0x41, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45,
	0x41, 0x4e, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x0b, 0x12, 0x0e,
	0x0a, 0x0a, 0x45, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x0d, 0x22, 0x51, 0x0a, 0x0e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x44,
	0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xe2, 0x02, 0x0a, 0x0d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x4c, 0x61, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x71, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a,
	0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb2, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x46, 0x41, 0x50, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x54, 0x45, 0x50, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x10, 0x04, 0x22, 0xaa,
	0x05, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x04, 0x51, 0x55, 0x49, 0x54, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x70, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x16,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x12, 0x33, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x6e, 0x0a, 0x13, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x5c, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x67, 0x0a, 0x0f, 0x50, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5e, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x29, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x51, 0x55, 0x49, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10,
	0x03, 0x42, 0x53, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f,
	0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61,
	0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
})

var (
	file_yamcs_protobuf_yamcs_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_yamcs_proto_rawDescData []byte
)

func file_yamcs_protobuf_yamcs_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_yamcs_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_yamcs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_yamcs_proto_rawDesc), len(file_yamcs_protobuf_yamcs_proto_rawDesc)))
	})
	return file_yamcs_protobuf_yamcs_proto_rawDescData
}

var file_yamcs_protobuf_yamcs_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yamcs_protobuf_yamcs_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_yamcs_protobuf_yamcs_proto_goTypes = []any{
	(EndAction)(0),                      // 0: yamcs.protobuf.EndAction
	(Value_Type)(0),                     // 1: yamcs.protobuf.Value.Type
	(ReplaySpeed_ReplaySpeedType)(0),    // 2: yamcs.protobuf.ReplaySpeed.ReplaySpeedType
	(ReplayStatus_ReplayState)(0),       // 3: yamcs.protobuf.ReplayStatus.ReplayState
	(*Value)(nil),                       // 4: yamcs.protobuf.Value
	(*AggregateValue)(nil),              // 5: yamcs.protobuf.AggregateValue
	(*NamedObjectId)(nil),               // 6: yamcs.protobuf.NamedObjectId
	(*NamedObjectList)(nil),             // 7: yamcs.protobuf.NamedObjectList
	(*ArchiveRecord)(nil),               // 8: yamcs.protobuf.ArchiveRecord
	(*ReplaySpeed)(nil),                 // 9: yamcs.protobuf.ReplaySpeed
	(*ReplayRequest)(nil),               // 10: yamcs.protobuf.ReplayRequest
	(*ParameterReplayRequest)(nil),      // 11: yamcs.protobuf.ParameterReplayRequest
	(*PacketReplayRequest)(nil),         // 12: yamcs.protobuf.PacketReplayRequest
	(*EventReplayRequest)(nil),          // 13: yamcs.protobuf.EventReplayRequest
	(*CommandHistoryReplayRequest)(nil), // 14: yamcs.protobuf.CommandHistoryReplayRequest
	(*PpReplayRequest)(nil),             // 15: yamcs.protobuf.PpReplayRequest
	(*ReplayStatus)(nil),                // 16: yamcs.protobuf.ReplayStatus
	nil,                                 // 17: yamcs.protobuf.ArchiveRecord.ExtraEntry
	(*timestamppb.Timestamp)(nil),       // 18: google.protobuf.Timestamp
}
var file_yamcs_protobuf_yamcs_proto_depIdxs = []int32{
	1,  // 0: yamcs.protobuf.Value.type:type_name -> yamcs.protobuf.Value.Type
	5,  // 1: yamcs.protobuf.Value.aggregateValue:type_name -> yamcs.protobuf.AggregateValue
	4,  // 2: yamcs.protobuf.Value.arrayValue:type_name -> yamcs.protobuf.Value
	4,  // 3: yamcs.protobuf.AggregateValue.value:type_name -> yamcs.protobuf.Value
	6,  // 4: yamcs.protobuf.NamedObjectList.list:type_name -> yamcs.protobuf.NamedObjectId
	6,  // 5: yamcs.protobuf.ArchiveRecord.id:type_name -> yamcs.protobuf.NamedObjectId
	18, // 6: yamcs.protobuf.ArchiveRecord.first:type_name -> google.protobuf.Timestamp
	18, // 7: yamcs.protobuf.ArchiveRecord.last:type_name -> google.protobuf.Timestamp
	17, // 8: yamcs.protobuf.ArchiveRecord.extra:type_name -> yamcs.protobuf.ArchiveRecord.ExtraEntry
	2,  // 9: yamcs.protobuf.ReplaySpeed.type:type_name -> yamcs.protobuf.ReplaySpeed.ReplaySpeedType
	18, // 10: yamcs.protobuf.ReplayRequest.start:type_name -> google.protobuf.Timestamp
	18, // 11: yamcs.protobuf.ReplayRequest.stop:type_name -> google.protobuf.Timestamp
	0,  // 12: yamcs.protobuf.ReplayRequest.endAction:type_name -> yamcs.protobuf.EndAction
	9,  // 13: yamcs.protobuf.ReplayRequest.speed:type_name -> yamcs.protobuf.ReplaySpeed
	11, // 14: yamcs.protobuf.ReplayRequest.parameterRequest:type_name -> yamcs.protobuf.ParameterReplayRequest
	12, // 15: yamcs.protobuf.ReplayRequest.packetRequest:type_name -> yamcs.protobuf.PacketReplayRequest
	13, // 16: yamcs.protobuf.ReplayRequest.eventRequest:type_name -> yamcs.protobuf.EventReplayRequest
	14, // 17: yamcs.protobuf.ReplayRequest.commandHistoryRequest:type_name -> yamcs.protobuf.CommandHistoryReplayRequest
	15, // 18: yamcs.protobuf.ReplayRequest.ppRequest:type_name -> yamcs.protobuf.PpReplayRequest
	6,  // 19: yamcs.protobuf.ParameterReplayRequest.nameFilter:type_name -> yamcs.protobuf.NamedObjectId
	6,  // 20: yamcs.protobuf.PacketReplayRequest.nameFilter:type_name -> yamcs.protobuf.NamedObjectId
	6,  // 21: yamcs.protobuf.CommandHistoryReplayRequest.nameFilter:type_name -> yamcs.protobuf.NamedObjectId
	3,  // 22: yamcs.protobuf.ReplayStatus.state:type_name -> yamcs.protobuf.ReplayStatus.ReplayState
	10, // 23: yamcs.protobuf.ReplayStatus.request:type_name -> yamcs.protobuf.ReplayRequest
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_yamcs_proto_init() }
func file_yamcs_protobuf_yamcs_proto_init() {
	if File_yamcs_protobuf_yamcs_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_yamcs_proto_rawDesc), len(file_yamcs_protobuf_yamcs_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yamcs_protobuf_yamcs_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_yamcs_proto_depIdxs,
		EnumInfos:         file_yamcs_protobuf_yamcs_proto_enumTypes,
		MessageInfos:      file_yamcs_protobuf_yamcs_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_yamcs_proto = out.File
	file_yamcs_protobuf_yamcs_proto_goTypes = nil
	file_yamcs_protobuf_yamcs_proto_depIdxs = nil
}
