// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/mdb/mdb.proto

package mdb

import (
	api "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protobuf "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataSourceType int32

const (
	DataSourceType_TELEMETERED     DataSourceType = 0
	DataSourceType_DERIVED         DataSourceType = 1
	DataSourceType_CONSTANT        DataSourceType = 2
	DataSourceType_LOCAL           DataSourceType = 3
	DataSourceType_SYSTEM          DataSourceType = 4
	DataSourceType_COMMAND         DataSourceType = 5
	DataSourceType_COMMAND_HISTORY DataSourceType = 6
	DataSourceType_EXTERNAL1       DataSourceType = 7
	DataSourceType_EXTERNAL2       DataSourceType = 8
	DataSourceType_EXTERNAL3       DataSourceType = 9
	DataSourceType_GROUND          DataSourceType = 10
)

// Enum value maps for DataSourceType.
var (
	DataSourceType_name = map[int32]string{
		0:  "TELEMETERED",
		1:  "DERIVED",
		2:  "CONSTANT",
		3:  "LOCAL",
		4:  "SYSTEM",
		5:  "COMMAND",
		6:  "COMMAND_HISTORY",
		7:  "EXTERNAL1",
		8:  "EXTERNAL2",
		9:  "EXTERNAL3",
		10: "GROUND",
	}
	DataSourceType_value = map[string]int32{
		"TELEMETERED":     0,
		"DERIVED":         1,
		"CONSTANT":        2,
		"LOCAL":           3,
		"SYSTEM":          4,
		"COMMAND":         5,
		"COMMAND_HISTORY": 6,
		"EXTERNAL1":       7,
		"EXTERNAL2":       8,
		"EXTERNAL3":       9,
		"GROUND":          10,
	}
)

func (x DataSourceType) Enum() *DataSourceType {
	p := new(DataSourceType)
	*p = x
	return p
}

func (x DataSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[0].Descriptor()
}

func (DataSourceType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[0]
}

func (x DataSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DataSourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DataSourceType(num)
	return nil
}

// Deprecated: Use DataSourceType.Descriptor instead.
func (DataSourceType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{0}
}

type AlarmLevelType int32

const (
	AlarmLevelType_NORMAL   AlarmLevelType = 0
	AlarmLevelType_WATCH    AlarmLevelType = 1
	AlarmLevelType_WARNING  AlarmLevelType = 2
	AlarmLevelType_DISTRESS AlarmLevelType = 3
	AlarmLevelType_CRITICAL AlarmLevelType = 4
	AlarmLevelType_SEVERE   AlarmLevelType = 5
)

// Enum value maps for AlarmLevelType.
var (
	AlarmLevelType_name = map[int32]string{
		0: "NORMAL",
		1: "WATCH",
		2: "WARNING",
		3: "DISTRESS",
		4: "CRITICAL",
		5: "SEVERE",
	}
	AlarmLevelType_value = map[string]int32{
		"NORMAL":   0,
		"WATCH":    1,
		"WARNING":  2,
		"DISTRESS": 3,
		"CRITICAL": 4,
		"SEVERE":   5,
	}
)

func (x AlarmLevelType) Enum() *AlarmLevelType {
	p := new(AlarmLevelType)
	*p = x
	return p
}

func (x AlarmLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[1].Descriptor()
}

func (AlarmLevelType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[1]
}

func (x AlarmLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AlarmLevelType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AlarmLevelType(num)
	return nil
}

// Deprecated: Use AlarmLevelType.Descriptor instead.
func (AlarmLevelType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{1}
}

type DataEncodingInfo_Type int32

const (
	DataEncodingInfo_BINARY  DataEncodingInfo_Type = 0
	DataEncodingInfo_BOOLEAN DataEncodingInfo_Type = 1
	DataEncodingInfo_FLOAT   DataEncodingInfo_Type = 2
	DataEncodingInfo_INTEGER DataEncodingInfo_Type = 3
	DataEncodingInfo_STRING  DataEncodingInfo_Type = 4
)

// Enum value maps for DataEncodingInfo_Type.
var (
	DataEncodingInfo_Type_name = map[int32]string{
		0: "BINARY",
		1: "BOOLEAN",
		2: "FLOAT",
		3: "INTEGER",
		4: "STRING",
	}
	DataEncodingInfo_Type_value = map[string]int32{
		"BINARY":  0,
		"BOOLEAN": 1,
		"FLOAT":   2,
		"INTEGER": 3,
		"STRING":  4,
	}
)

func (x DataEncodingInfo_Type) Enum() *DataEncodingInfo_Type {
	p := new(DataEncodingInfo_Type)
	*p = x
	return p
}

func (x DataEncodingInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataEncodingInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[2].Descriptor()
}

func (DataEncodingInfo_Type) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[2]
}

func (x DataEncodingInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DataEncodingInfo_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DataEncodingInfo_Type(num)
	return nil
}

// Deprecated: Use DataEncodingInfo_Type.Descriptor instead.
func (DataEncodingInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{7, 0}
}

type CalibratorInfo_Type int32

const (
	CalibratorInfo_POLYNOMIAL      CalibratorInfo_Type = 0
	CalibratorInfo_SPLINE          CalibratorInfo_Type = 1
	CalibratorInfo_MATH_OPERATION  CalibratorInfo_Type = 2
	CalibratorInfo_JAVA_EXPRESSION CalibratorInfo_Type = 3
)

// Enum value maps for CalibratorInfo_Type.
var (
	CalibratorInfo_Type_name = map[int32]string{
		0: "POLYNOMIAL",
		1: "SPLINE",
		2: "MATH_OPERATION",
		3: "JAVA_EXPRESSION",
	}
	CalibratorInfo_Type_value = map[string]int32{
		"POLYNOMIAL":      0,
		"SPLINE":          1,
		"MATH_OPERATION":  2,
		"JAVA_EXPRESSION": 3,
	}
)

func (x CalibratorInfo_Type) Enum() *CalibratorInfo_Type {
	p := new(CalibratorInfo_Type)
	*p = x
	return p
}

func (x CalibratorInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CalibratorInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[3].Descriptor()
}

func (CalibratorInfo_Type) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[3]
}

func (x CalibratorInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CalibratorInfo_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CalibratorInfo_Type(num)
	return nil
}

// Deprecated: Use CalibratorInfo_Type.Descriptor instead.
func (CalibratorInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{9, 0}
}

type SignificanceInfo_SignificanceLevelType int32

const (
	SignificanceInfo_NONE     SignificanceInfo_SignificanceLevelType = 1
	SignificanceInfo_WATCH    SignificanceInfo_SignificanceLevelType = 2
	SignificanceInfo_WARNING  SignificanceInfo_SignificanceLevelType = 3
	SignificanceInfo_DISTRESS SignificanceInfo_SignificanceLevelType = 4
	SignificanceInfo_CRITICAL SignificanceInfo_SignificanceLevelType = 5
	SignificanceInfo_SEVERE   SignificanceInfo_SignificanceLevelType = 6
)

// Enum value maps for SignificanceInfo_SignificanceLevelType.
var (
	SignificanceInfo_SignificanceLevelType_name = map[int32]string{
		1: "NONE",
		2: "WATCH",
		3: "WARNING",
		4: "DISTRESS",
		5: "CRITICAL",
		6: "SEVERE",
	}
	SignificanceInfo_SignificanceLevelType_value = map[string]int32{
		"NONE":     1,
		"WATCH":    2,
		"WARNING":  3,
		"DISTRESS": 4,
		"CRITICAL": 5,
		"SEVERE":   6,
	}
)

func (x SignificanceInfo_SignificanceLevelType) Enum() *SignificanceInfo_SignificanceLevelType {
	p := new(SignificanceInfo_SignificanceLevelType)
	*p = x
	return p
}

func (x SignificanceInfo_SignificanceLevelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignificanceInfo_SignificanceLevelType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[4].Descriptor()
}

func (SignificanceInfo_SignificanceLevelType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[4]
}

func (x SignificanceInfo_SignificanceLevelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SignificanceInfo_SignificanceLevelType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SignificanceInfo_SignificanceLevelType(num)
	return nil
}

// Deprecated: Use SignificanceInfo_SignificanceLevelType.Descriptor instead.
func (SignificanceInfo_SignificanceLevelType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{30, 0}
}

type ComparisonInfo_OperatorType int32

const (
	ComparisonInfo_EQUAL_TO                 ComparisonInfo_OperatorType = 1
	ComparisonInfo_NOT_EQUAL_TO             ComparisonInfo_OperatorType = 2
	ComparisonInfo_GREATER_THAN             ComparisonInfo_OperatorType = 3
	ComparisonInfo_GREATER_THAN_OR_EQUAL_TO ComparisonInfo_OperatorType = 4
	ComparisonInfo_SMALLER_THAN             ComparisonInfo_OperatorType = 5
	ComparisonInfo_SMALLER_THAN_OR_EQUAL_TO ComparisonInfo_OperatorType = 6
)

// Enum value maps for ComparisonInfo_OperatorType.
var (
	ComparisonInfo_OperatorType_name = map[int32]string{
		1: "EQUAL_TO",
		2: "NOT_EQUAL_TO",
		3: "GREATER_THAN",
		4: "GREATER_THAN_OR_EQUAL_TO",
		5: "SMALLER_THAN",
		6: "SMALLER_THAN_OR_EQUAL_TO",
	}
	ComparisonInfo_OperatorType_value = map[string]int32{
		"EQUAL_TO":                 1,
		"NOT_EQUAL_TO":             2,
		"GREATER_THAN":             3,
		"GREATER_THAN_OR_EQUAL_TO": 4,
		"SMALLER_THAN":             5,
		"SMALLER_THAN_OR_EQUAL_TO": 6,
	}
)

func (x ComparisonInfo_OperatorType) Enum() *ComparisonInfo_OperatorType {
	p := new(ComparisonInfo_OperatorType)
	*p = x
	return p
}

func (x ComparisonInfo_OperatorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComparisonInfo_OperatorType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[5].Descriptor()
}

func (ComparisonInfo_OperatorType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[5]
}

func (x ComparisonInfo_OperatorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ComparisonInfo_OperatorType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ComparisonInfo_OperatorType(num)
	return nil
}

// Deprecated: Use ComparisonInfo_OperatorType.Descriptor instead.
func (ComparisonInfo_OperatorType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{31, 0}
}

type VerifierInfo_TerminationActionType int32

const (
	VerifierInfo_SUCCESS VerifierInfo_TerminationActionType = 1
	VerifierInfo_FAIL    VerifierInfo_TerminationActionType = 2
)

// Enum value maps for VerifierInfo_TerminationActionType.
var (
	VerifierInfo_TerminationActionType_name = map[int32]string{
		1: "SUCCESS",
		2: "FAIL",
	}
	VerifierInfo_TerminationActionType_value = map[string]int32{
		"SUCCESS": 1,
		"FAIL":    2,
	}
)

func (x VerifierInfo_TerminationActionType) Enum() *VerifierInfo_TerminationActionType {
	p := new(VerifierInfo_TerminationActionType)
	*p = x
	return p
}

func (x VerifierInfo_TerminationActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerifierInfo_TerminationActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[6].Descriptor()
}

func (VerifierInfo_TerminationActionType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[6]
}

func (x VerifierInfo_TerminationActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *VerifierInfo_TerminationActionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = VerifierInfo_TerminationActionType(num)
	return nil
}

// Deprecated: Use VerifierInfo_TerminationActionType.Descriptor instead.
func (VerifierInfo_TerminationActionType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{34, 0}
}

type SequenceEntryInfo_ReferenceLocationType int32

const (
	SequenceEntryInfo_CONTAINER_START SequenceEntryInfo_ReferenceLocationType = 1
	SequenceEntryInfo_PREVIOUS_ENTRY  SequenceEntryInfo_ReferenceLocationType = 2
)

// Enum value maps for SequenceEntryInfo_ReferenceLocationType.
var (
	SequenceEntryInfo_ReferenceLocationType_name = map[int32]string{
		1: "CONTAINER_START",
		2: "PREVIOUS_ENTRY",
	}
	SequenceEntryInfo_ReferenceLocationType_value = map[string]int32{
		"CONTAINER_START": 1,
		"PREVIOUS_ENTRY":  2,
	}
)

func (x SequenceEntryInfo_ReferenceLocationType) Enum() *SequenceEntryInfo_ReferenceLocationType {
	p := new(SequenceEntryInfo_ReferenceLocationType)
	*p = x
	return p
}

func (x SequenceEntryInfo_ReferenceLocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SequenceEntryInfo_ReferenceLocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[7].Descriptor()
}

func (SequenceEntryInfo_ReferenceLocationType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[7]
}

func (x SequenceEntryInfo_ReferenceLocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SequenceEntryInfo_ReferenceLocationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SequenceEntryInfo_ReferenceLocationType(num)
	return nil
}

// Deprecated: Use SequenceEntryInfo_ReferenceLocationType.Descriptor instead.
func (SequenceEntryInfo_ReferenceLocationType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{37, 0}
}

type MathElement_Type int32

const (
	MathElement_VALUE_OPERAND          MathElement_Type = 1
	MathElement_THIS_PARAMETER_OPERAND MathElement_Type = 2
	MathElement_OPERATOR               MathElement_Type = 3
	MathElement_PARAMETER              MathElement_Type = 4
)

// Enum value maps for MathElement_Type.
var (
	MathElement_Type_name = map[int32]string{
		1: "VALUE_OPERAND",
		2: "THIS_PARAMETER_OPERAND",
		3: "OPERATOR",
		4: "PARAMETER",
	}
	MathElement_Type_value = map[string]int32{
		"VALUE_OPERAND":          1,
		"THIS_PARAMETER_OPERAND": 2,
		"OPERATOR":               3,
		"PARAMETER":              4,
	}
)

func (x MathElement_Type) Enum() *MathElement_Type {
	p := new(MathElement_Type)
	*p = x
	return p
}

func (x MathElement_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MathElement_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[8].Descriptor()
}

func (MathElement_Type) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[8]
}

func (x MathElement_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MathElement_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MathElement_Type(num)
	return nil
}

// Deprecated: Use MathElement_Type.Descriptor instead.
func (MathElement_Type) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{44, 0}
}

type AlgorithmInfo_Type int32

const (
	AlgorithmInfo_CUSTOM AlgorithmInfo_Type = 1
	AlgorithmInfo_MATH   AlgorithmInfo_Type = 2
)

// Enum value maps for AlgorithmInfo_Type.
var (
	AlgorithmInfo_Type_name = map[int32]string{
		1: "CUSTOM",
		2: "MATH",
	}
	AlgorithmInfo_Type_value = map[string]int32{
		"CUSTOM": 1,
		"MATH":   2,
	}
)

func (x AlgorithmInfo_Type) Enum() *AlgorithmInfo_Type {
	p := new(AlgorithmInfo_Type)
	*p = x
	return p
}

func (x AlgorithmInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlgorithmInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[9].Descriptor()
}

func (AlgorithmInfo_Type) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[9]
}

func (x AlgorithmInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AlgorithmInfo_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AlgorithmInfo_Type(num)
	return nil
}

// Deprecated: Use AlgorithmInfo_Type.Descriptor instead.
func (AlgorithmInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{45, 0}
}

type AlgorithmInfo_Scope int32

const (
	AlgorithmInfo_GLOBAL               AlgorithmInfo_Scope = 0
	AlgorithmInfo_COMMAND_VERIFICATION AlgorithmInfo_Scope = 1
	AlgorithmInfo_CONTAINER_PROCESSING AlgorithmInfo_Scope = 2
)

// Enum value maps for AlgorithmInfo_Scope.
var (
	AlgorithmInfo_Scope_name = map[int32]string{
		0: "GLOBAL",
		1: "COMMAND_VERIFICATION",
		2: "CONTAINER_PROCESSING",
	}
	AlgorithmInfo_Scope_value = map[string]int32{
		"GLOBAL":               0,
		"COMMAND_VERIFICATION": 1,
		"CONTAINER_PROCESSING": 2,
	}
)

func (x AlgorithmInfo_Scope) Enum() *AlgorithmInfo_Scope {
	p := new(AlgorithmInfo_Scope)
	*p = x
	return p
}

func (x AlgorithmInfo_Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlgorithmInfo_Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_mdb_mdb_proto_enumTypes[10].Descriptor()
}

func (AlgorithmInfo_Scope) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_mdb_mdb_proto_enumTypes[10]
}

func (x AlgorithmInfo_Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AlgorithmInfo_Scope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AlgorithmInfo_Scope(num)
	return nil
}

// Deprecated: Use AlgorithmInfo_Scope.Descriptor instead.
func (AlgorithmInfo_Scope) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{45, 1}
}

type MissionDatabase struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the config section in mdb.yaml
	ConfigName *string `protobuf:"bytes,1,opt,name=configName" json:"configName,omitempty"`
	// Root space-system name
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Root space-system header version
	Version *string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	// Deprecated, use “spaceSystems“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	SpaceSystem        []*SpaceSystemInfo `protobuf:"bytes,4,rep,name=spaceSystem" json:"spaceSystem,omitempty"`
	SpaceSystems       []*SpaceSystemInfo `protobuf:"bytes,11,rep,name=spaceSystems" json:"spaceSystems,omitempty"`
	ParameterCount     *int32             `protobuf:"varint,6,opt,name=parameterCount" json:"parameterCount,omitempty"`
	ContainerCount     *int32             `protobuf:"varint,7,opt,name=containerCount" json:"containerCount,omitempty"`
	CommandCount       *int32             `protobuf:"varint,8,opt,name=commandCount" json:"commandCount,omitempty"`
	AlgorithmCount     *int32             `protobuf:"varint,9,opt,name=algorithmCount" json:"algorithmCount,omitempty"`
	ParameterTypeCount *int32             `protobuf:"varint,10,opt,name=parameterTypeCount" json:"parameterTypeCount,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MissionDatabase) Reset() {
	*x = MissionDatabase{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissionDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionDatabase) ProtoMessage() {}

func (x *MissionDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionDatabase.ProtoReflect.Descriptor instead.
func (*MissionDatabase) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{0}
}

func (x *MissionDatabase) GetConfigName() string {
	if x != nil && x.ConfigName != nil {
		return *x.ConfigName
	}
	return ""
}

func (x *MissionDatabase) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MissionDatabase) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *MissionDatabase) GetSpaceSystem() []*SpaceSystemInfo {
	if x != nil {
		return x.SpaceSystem
	}
	return nil
}

func (x *MissionDatabase) GetSpaceSystems() []*SpaceSystemInfo {
	if x != nil {
		return x.SpaceSystems
	}
	return nil
}

func (x *MissionDatabase) GetParameterCount() int32 {
	if x != nil && x.ParameterCount != nil {
		return *x.ParameterCount
	}
	return 0
}

func (x *MissionDatabase) GetContainerCount() int32 {
	if x != nil && x.ContainerCount != nil {
		return *x.ContainerCount
	}
	return 0
}

func (x *MissionDatabase) GetCommandCount() int32 {
	if x != nil && x.CommandCount != nil {
		return *x.CommandCount
	}
	return 0
}

func (x *MissionDatabase) GetAlgorithmCount() int32 {
	if x != nil && x.AlgorithmCount != nil {
		return *x.AlgorithmCount
	}
	return 0
}

func (x *MissionDatabase) GetParameterTypeCount() int32 {
	if x != nil && x.ParameterTypeCount != nil {
		return *x.ParameterTypeCount
	}
	return 0
}

type HistoryInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       *string                `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Date          *string                `protobuf:"bytes,2,opt,name=date" json:"date,omitempty"`
	Message       *string                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Author        *string                `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HistoryInfo) Reset() {
	*x = HistoryInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryInfo) ProtoMessage() {}

func (x *HistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryInfo.ProtoReflect.Descriptor instead.
func (*HistoryInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{1}
}

func (x *HistoryInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *HistoryInfo) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

func (x *HistoryInfo) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *HistoryInfo) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

type UnitInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Unit          *string                `protobuf:"bytes,1,opt,name=unit" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnitInfo) Reset() {
	*x = UnitInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitInfo) ProtoMessage() {}

func (x *UnitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitInfo.ProtoReflect.Descriptor instead.
func (*UnitInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{2}
}

func (x *UnitInfo) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

type AlarmRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         *AlarmLevelType        `protobuf:"varint,1,opt,name=level,enum=yamcs.protobuf.mdb.AlarmLevelType" json:"level,omitempty"`
	MinInclusive  *float64               `protobuf:"fixed64,2,opt,name=minInclusive" json:"minInclusive,omitempty"`
	MaxInclusive  *float64               `protobuf:"fixed64,3,opt,name=maxInclusive" json:"maxInclusive,omitempty"`
	MinExclusive  *float64               `protobuf:"fixed64,4,opt,name=minExclusive" json:"minExclusive,omitempty"`
	MaxExclusive  *float64               `protobuf:"fixed64,5,opt,name=maxExclusive" json:"maxExclusive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlarmRange) Reset() {
	*x = AlarmRange{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlarmRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmRange) ProtoMessage() {}

func (x *AlarmRange) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmRange.ProtoReflect.Descriptor instead.
func (*AlarmRange) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{3}
}

func (x *AlarmRange) GetLevel() AlarmLevelType {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return AlarmLevelType_NORMAL
}

func (x *AlarmRange) GetMinInclusive() float64 {
	if x != nil && x.MinInclusive != nil {
		return *x.MinInclusive
	}
	return 0
}

func (x *AlarmRange) GetMaxInclusive() float64 {
	if x != nil && x.MaxInclusive != nil {
		return *x.MaxInclusive
	}
	return 0
}

func (x *AlarmRange) GetMinExclusive() float64 {
	if x != nil && x.MinExclusive != nil {
		return *x.MinExclusive
	}
	return 0
}

func (x *AlarmRange) GetMaxExclusive() float64 {
	if x != nil && x.MaxExclusive != nil {
		return *x.MaxExclusive
	}
	return 0
}

type EnumerationAlarm struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         *AlarmLevelType        `protobuf:"varint,1,opt,name=level,enum=yamcs.protobuf.mdb.AlarmLevelType" json:"level,omitempty"`
	Label         *string                `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumerationAlarm) Reset() {
	*x = EnumerationAlarm{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumerationAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumerationAlarm) ProtoMessage() {}

func (x *EnumerationAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumerationAlarm.ProtoReflect.Descriptor instead.
func (*EnumerationAlarm) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{4}
}

func (x *EnumerationAlarm) GetLevel() AlarmLevelType {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return AlarmLevelType_NORMAL
}

func (x *EnumerationAlarm) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

type AlarmInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinViolations *int32                 `protobuf:"varint,1,opt,name=minViolations" json:"minViolations,omitempty"`
	// Deprecated, use “staticAlarmRanges“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	StaticAlarmRange  []*AlarmRange `protobuf:"bytes,2,rep,name=staticAlarmRange" json:"staticAlarmRange,omitempty"`
	StaticAlarmRanges []*AlarmRange `protobuf:"bytes,4,rep,name=staticAlarmRanges" json:"staticAlarmRanges,omitempty"`
	// Deprecated, use “enumerationAlarms“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	EnumerationAlarm  []*EnumerationAlarm `protobuf:"bytes,3,rep,name=enumerationAlarm" json:"enumerationAlarm,omitempty"`
	EnumerationAlarms []*EnumerationAlarm `protobuf:"bytes,5,rep,name=enumerationAlarms" json:"enumerationAlarms,omitempty"`
	// only used for enumeration alarms - defines the alarm state if none of the condition above applies
	// as per XTCE description:
	//
	//	defaults to "normal", which is almost always the case.
	//	Setting it to another alarm state permits a form of "inverted logic" where the alarm list can specify the normal states instead of the alarm states.
	DefaultLevel  *AlarmLevelType `protobuf:"varint,6,opt,name=defaultLevel,enum=yamcs.protobuf.mdb.AlarmLevelType" json:"defaultLevel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlarmInfo) Reset() {
	*x = AlarmInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlarmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmInfo) ProtoMessage() {}

func (x *AlarmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmInfo.ProtoReflect.Descriptor instead.
func (*AlarmInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{5}
}

func (x *AlarmInfo) GetMinViolations() int32 {
	if x != nil && x.MinViolations != nil {
		return *x.MinViolations
	}
	return 0
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *AlarmInfo) GetStaticAlarmRange() []*AlarmRange {
	if x != nil {
		return x.StaticAlarmRange
	}
	return nil
}

func (x *AlarmInfo) GetStaticAlarmRanges() []*AlarmRange {
	if x != nil {
		return x.StaticAlarmRanges
	}
	return nil
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *AlarmInfo) GetEnumerationAlarm() []*EnumerationAlarm {
	if x != nil {
		return x.EnumerationAlarm
	}
	return nil
}

func (x *AlarmInfo) GetEnumerationAlarms() []*EnumerationAlarm {
	if x != nil {
		return x.EnumerationAlarms
	}
	return nil
}

func (x *AlarmInfo) GetDefaultLevel() AlarmLevelType {
	if x != nil && x.DefaultLevel != nil {
		return *x.DefaultLevel
	}
	return AlarmLevelType_NORMAL
}

type ContextAlarmInfo struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Comparison []*ComparisonInfo      `protobuf:"bytes,1,rep,name=comparison" json:"comparison,omitempty"`
	Alarm      *AlarmInfo             `protobuf:"bytes,2,opt,name=alarm" json:"alarm,omitempty"`
	// This can be used in UpdateParameterRequest to pass a context
	// that is parsed on the server, according to the rules in the
	// excel spreadsheet. Either this or a comparison has to be
	// used (not both at the same time)
	Context       *string `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextAlarmInfo) Reset() {
	*x = ContextAlarmInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextAlarmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextAlarmInfo) ProtoMessage() {}

func (x *ContextAlarmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextAlarmInfo.ProtoReflect.Descriptor instead.
func (*ContextAlarmInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{6}
}

func (x *ContextAlarmInfo) GetComparison() []*ComparisonInfo {
	if x != nil {
		return x.Comparison
	}
	return nil
}

func (x *ContextAlarmInfo) GetAlarm() *AlarmInfo {
	if x != nil {
		return x.Alarm
	}
	return nil
}

func (x *ContextAlarmInfo) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

type DataEncodingInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Type              *DataEncodingInfo_Type `protobuf:"varint,1,opt,name=type,enum=yamcs.protobuf.mdb.DataEncodingInfo_Type" json:"type,omitempty"`
	LittleEndian      *bool                  `protobuf:"varint,2,opt,name=littleEndian" json:"littleEndian,omitempty"`
	SizeInBits        *int32                 `protobuf:"varint,3,opt,name=sizeInBits" json:"sizeInBits,omitempty"`
	Encoding          *string                `protobuf:"bytes,4,opt,name=encoding" json:"encoding,omitempty"`
	DefaultCalibrator *CalibratorInfo        `protobuf:"bytes,6,opt,name=defaultCalibrator" json:"defaultCalibrator,omitempty"`
	// Deprecated, use “contextCalibrators“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	ContextCalibrator  []*ContextCalibratorInfo `protobuf:"bytes,7,rep,name=contextCalibrator" json:"contextCalibrator,omitempty"`
	ContextCalibrators []*ContextCalibratorInfo `protobuf:"bytes,8,rep,name=contextCalibrators" json:"contextCalibrators,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *DataEncodingInfo) Reset() {
	*x = DataEncodingInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataEncodingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataEncodingInfo) ProtoMessage() {}

func (x *DataEncodingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataEncodingInfo.ProtoReflect.Descriptor instead.
func (*DataEncodingInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{7}
}

func (x *DataEncodingInfo) GetType() DataEncodingInfo_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DataEncodingInfo_BINARY
}

func (x *DataEncodingInfo) GetLittleEndian() bool {
	if x != nil && x.LittleEndian != nil {
		return *x.LittleEndian
	}
	return false
}

func (x *DataEncodingInfo) GetSizeInBits() int32 {
	if x != nil && x.SizeInBits != nil {
		return *x.SizeInBits
	}
	return 0
}

func (x *DataEncodingInfo) GetEncoding() string {
	if x != nil && x.Encoding != nil {
		return *x.Encoding
	}
	return ""
}

func (x *DataEncodingInfo) GetDefaultCalibrator() *CalibratorInfo {
	if x != nil {
		return x.DefaultCalibrator
	}
	return nil
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *DataEncodingInfo) GetContextCalibrator() []*ContextCalibratorInfo {
	if x != nil {
		return x.ContextCalibrator
	}
	return nil
}

func (x *DataEncodingInfo) GetContextCalibrators() []*ContextCalibratorInfo {
	if x != nil {
		return x.ContextCalibrators
	}
	return nil
}

type ContextCalibratorInfo struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Comparison []*ComparisonInfo      `protobuf:"bytes,1,rep,name=comparison" json:"comparison,omitempty"`
	Calibrator *CalibratorInfo        `protobuf:"bytes,2,opt,name=calibrator" json:"calibrator,omitempty"`
	// This can be used in UpdateParameterRequest to pass a context
	// that is parsed on the server, according to the rules in the
	// excel spreadsheet. Either this or a comparison has to be
	// used (not both at the same time)
	Context       *string `protobuf:"bytes,3,opt,name=context" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextCalibratorInfo) Reset() {
	*x = ContextCalibratorInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextCalibratorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextCalibratorInfo) ProtoMessage() {}

func (x *ContextCalibratorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextCalibratorInfo.ProtoReflect.Descriptor instead.
func (*ContextCalibratorInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{8}
}

func (x *ContextCalibratorInfo) GetComparison() []*ComparisonInfo {
	if x != nil {
		return x.Comparison
	}
	return nil
}

func (x *ContextCalibratorInfo) GetCalibrator() *CalibratorInfo {
	if x != nil {
		return x.Calibrator
	}
	return nil
}

func (x *ContextCalibratorInfo) GetContext() string {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return ""
}

type CalibratorInfo struct {
	state                    protoimpl.MessageState        `protogen:"open.v1"`
	PolynomialCalibrator     *PolynomialCalibratorInfo     `protobuf:"bytes,2,opt,name=polynomialCalibrator" json:"polynomialCalibrator,omitempty"`
	SplineCalibrator         *SplineCalibratorInfo         `protobuf:"bytes,3,opt,name=splineCalibrator" json:"splineCalibrator,omitempty"`
	JavaExpressionCalibrator *JavaExpressionCalibratorInfo `protobuf:"bytes,4,opt,name=javaExpressionCalibrator" json:"javaExpressionCalibrator,omitempty"`
	Type                     *CalibratorInfo_Type          `protobuf:"varint,5,opt,name=type,enum=yamcs.protobuf.mdb.CalibratorInfo_Type" json:"type,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *CalibratorInfo) Reset() {
	*x = CalibratorInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalibratorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibratorInfo) ProtoMessage() {}

func (x *CalibratorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibratorInfo.ProtoReflect.Descriptor instead.
func (*CalibratorInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{9}
}

func (x *CalibratorInfo) GetPolynomialCalibrator() *PolynomialCalibratorInfo {
	if x != nil {
		return x.PolynomialCalibrator
	}
	return nil
}

func (x *CalibratorInfo) GetSplineCalibrator() *SplineCalibratorInfo {
	if x != nil {
		return x.SplineCalibrator
	}
	return nil
}

func (x *CalibratorInfo) GetJavaExpressionCalibrator() *JavaExpressionCalibratorInfo {
	if x != nil {
		return x.JavaExpressionCalibrator
	}
	return nil
}

func (x *CalibratorInfo) GetType() CalibratorInfo_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CalibratorInfo_POLYNOMIAL
}

type PolynomialCalibratorInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated, use “coefficients“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	Coefficient   []float64 `protobuf:"fixed64,1,rep,name=coefficient" json:"coefficient,omitempty"`
	Coefficients  []float64 `protobuf:"fixed64,2,rep,name=coefficients" json:"coefficients,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolynomialCalibratorInfo) Reset() {
	*x = PolynomialCalibratorInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolynomialCalibratorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolynomialCalibratorInfo) ProtoMessage() {}

func (x *PolynomialCalibratorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolynomialCalibratorInfo.ProtoReflect.Descriptor instead.
func (*PolynomialCalibratorInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *PolynomialCalibratorInfo) GetCoefficient() []float64 {
	if x != nil {
		return x.Coefficient
	}
	return nil
}

func (x *PolynomialCalibratorInfo) GetCoefficients() []float64 {
	if x != nil {
		return x.Coefficients
	}
	return nil
}

type SplineCalibratorInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated, use “points“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	Point         []*SplineCalibratorInfo_SplinePointInfo `protobuf:"bytes,1,rep,name=point" json:"point,omitempty"`
	Points        []*SplineCalibratorInfo_SplinePointInfo `protobuf:"bytes,2,rep,name=points" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplineCalibratorInfo) Reset() {
	*x = SplineCalibratorInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplineCalibratorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplineCalibratorInfo) ProtoMessage() {}

func (x *SplineCalibratorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplineCalibratorInfo.ProtoReflect.Descriptor instead.
func (*SplineCalibratorInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{11}
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *SplineCalibratorInfo) GetPoint() []*SplineCalibratorInfo_SplinePointInfo {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *SplineCalibratorInfo) GetPoints() []*SplineCalibratorInfo_SplinePointInfo {
	if x != nil {
		return x.Points
	}
	return nil
}

type JavaExpressionCalibratorInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Formula       *string                `protobuf:"bytes,1,opt,name=formula" json:"formula,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JavaExpressionCalibratorInfo) Reset() {
	*x = JavaExpressionCalibratorInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JavaExpressionCalibratorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaExpressionCalibratorInfo) ProtoMessage() {}

func (x *JavaExpressionCalibratorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaExpressionCalibratorInfo.ProtoReflect.Descriptor instead.
func (*JavaExpressionCalibratorInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{12}
}

func (x *JavaExpressionCalibratorInfo) GetFormula() string {
	if x != nil && x.Formula != nil {
		return *x.Formula
	}
	return ""
}

type EnumValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *int64                 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Label         *string                `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumValue) Reset() {
	*x = EnumValue{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValue) ProtoMessage() {}

func (x *EnumValue) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValue.ProtoReflect.Descriptor instead.
func (*EnumValue) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{13}
}

func (x *EnumValue) GetValue() int64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *EnumValue) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *EnumValue) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type ParameterTypeInfo struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	Name             *string                   `protobuf:"bytes,16,opt,name=name" json:"name,omitempty"`
	QualifiedName    *string                   `protobuf:"bytes,17,opt,name=qualifiedName" json:"qualifiedName,omitempty"`
	ShortDescription *string                   `protobuf:"bytes,18,opt,name=shortDescription" json:"shortDescription,omitempty"`
	LongDescription  *string                   `protobuf:"bytes,19,opt,name=longDescription" json:"longDescription,omitempty"`
	Alias            []*protobuf.NamedObjectId `protobuf:"bytes,20,rep,name=alias" json:"alias,omitempty"`
	// Engineering type
	EngType      *string           `protobuf:"bytes,1,opt,name=engType" json:"engType,omitempty"`
	DataEncoding *DataEncodingInfo `protobuf:"bytes,2,opt,name=dataEncoding" json:"dataEncoding,omitempty"`
	UnitSet      []*UnitInfo       `protobuf:"bytes,3,rep,name=unitSet" json:"unitSet,omitempty"`
	// Default Alarm, effective when no contextual alarm takes precedence.
	DefaultAlarm     *AlarmInfo        `protobuf:"bytes,4,opt,name=defaultAlarm" json:"defaultAlarm,omitempty"`
	EnumValue        []*EnumValue      `protobuf:"bytes,5,rep,name=enumValue" json:"enumValue,omitempty"`
	AbsoluteTimeInfo *AbsoluteTimeInfo `protobuf:"bytes,6,opt,name=absoluteTimeInfo" json:"absoluteTimeInfo,omitempty"`
	// Contextual alarms
	ContextAlarm  []*ContextAlarmInfo           `protobuf:"bytes,7,rep,name=contextAlarm" json:"contextAlarm,omitempty"`
	Member        []*MemberInfo                 `protobuf:"bytes,8,rep,name=member" json:"member,omitempty"`
	ArrayInfo     *ArrayInfo                    `protobuf:"bytes,9,opt,name=arrayInfo" json:"arrayInfo,omitempty"`
	AncillaryData map[string]*AncillaryDataInfo `protobuf:"bytes,10,rep,name=ancillaryData" json:"ancillaryData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Provides hints on how to format the engineering
	// value as a string.
	NumberFormat *NumberFormatTypeInfo `protobuf:"bytes,11,opt,name=numberFormat" json:"numberFormat,omitempty"`
	// True if the engineering type supports signed representation.
	// (only used by integer parameter types)
	Signed *bool `protobuf:"varint,12,opt,name=signed" json:"signed,omitempty"`
	// Hint about the range of allowed engineering values
	SizeInBits *int32 `protobuf:"varint,21,opt,name=sizeInBits" json:"sizeInBits,omitempty"`
	// String representation of a boolean zero (only used by boolean types)
	ZeroStringValue *string `protobuf:"bytes,13,opt,name=zeroStringValue" json:"zeroStringValue,omitempty"`
	// String representation of a boolean one (only used by boolean types)
	OneStringValue *string `protobuf:"bytes,14,opt,name=oneStringValue" json:"oneStringValue,omitempty"`
	// Which parameters this type is used by. This field is only
	// populated when requesting directly a single parameter type.
	UsedBy        []*ParameterInfo `protobuf:"bytes,15,rep,name=usedBy" json:"usedBy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParameterTypeInfo) Reset() {
	*x = ParameterTypeInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterTypeInfo) ProtoMessage() {}

func (x *ParameterTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterTypeInfo.ProtoReflect.Descriptor instead.
func (*ParameterTypeInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{14}
}

func (x *ParameterTypeInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ParameterTypeInfo) GetQualifiedName() string {
	if x != nil && x.QualifiedName != nil {
		return *x.QualifiedName
	}
	return ""
}

func (x *ParameterTypeInfo) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *ParameterTypeInfo) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *ParameterTypeInfo) GetAlias() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *ParameterTypeInfo) GetEngType() string {
	if x != nil && x.EngType != nil {
		return *x.EngType
	}
	return ""
}

func (x *ParameterTypeInfo) GetDataEncoding() *DataEncodingInfo {
	if x != nil {
		return x.DataEncoding
	}
	return nil
}

func (x *ParameterTypeInfo) GetUnitSet() []*UnitInfo {
	if x != nil {
		return x.UnitSet
	}
	return nil
}

func (x *ParameterTypeInfo) GetDefaultAlarm() *AlarmInfo {
	if x != nil {
		return x.DefaultAlarm
	}
	return nil
}

func (x *ParameterTypeInfo) GetEnumValue() []*EnumValue {
	if x != nil {
		return x.EnumValue
	}
	return nil
}

func (x *ParameterTypeInfo) GetAbsoluteTimeInfo() *AbsoluteTimeInfo {
	if x != nil {
		return x.AbsoluteTimeInfo
	}
	return nil
}

func (x *ParameterTypeInfo) GetContextAlarm() []*ContextAlarmInfo {
	if x != nil {
		return x.ContextAlarm
	}
	return nil
}

func (x *ParameterTypeInfo) GetMember() []*MemberInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *ParameterTypeInfo) GetArrayInfo() *ArrayInfo {
	if x != nil {
		return x.ArrayInfo
	}
	return nil
}

func (x *ParameterTypeInfo) GetAncillaryData() map[string]*AncillaryDataInfo {
	if x != nil {
		return x.AncillaryData
	}
	return nil
}

func (x *ParameterTypeInfo) GetNumberFormat() *NumberFormatTypeInfo {
	if x != nil {
		return x.NumberFormat
	}
	return nil
}

func (x *ParameterTypeInfo) GetSigned() bool {
	if x != nil && x.Signed != nil {
		return *x.Signed
	}
	return false
}

func (x *ParameterTypeInfo) GetSizeInBits() int32 {
	if x != nil && x.SizeInBits != nil {
		return *x.SizeInBits
	}
	return 0
}

func (x *ParameterTypeInfo) GetZeroStringValue() string {
	if x != nil && x.ZeroStringValue != nil {
		return *x.ZeroStringValue
	}
	return ""
}

func (x *ParameterTypeInfo) GetOneStringValue() string {
	if x != nil && x.OneStringValue != nil {
		return *x.OneStringValue
	}
	return ""
}

func (x *ParameterTypeInfo) GetUsedBy() []*ParameterInfo {
	if x != nil {
		return x.UsedBy
	}
	return nil
}

type NumberFormatTypeInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	NumberBase            *string                `protobuf:"bytes,1,opt,name=numberBase" json:"numberBase,omitempty"`
	MinimumFractionDigits *int32                 `protobuf:"varint,2,opt,name=minimumFractionDigits" json:"minimumFractionDigits,omitempty"`
	MaximumFractionDigits *int32                 `protobuf:"varint,3,opt,name=maximumFractionDigits" json:"maximumFractionDigits,omitempty"`
	MinimumIntegerDigits  *int32                 `protobuf:"varint,4,opt,name=minimumIntegerDigits" json:"minimumIntegerDigits,omitempty"`
	MaximumIntegerDigits  *int32                 `protobuf:"varint,5,opt,name=maximumIntegerDigits" json:"maximumIntegerDigits,omitempty"`
	NegativeSuffix        *string                `protobuf:"bytes,6,opt,name=negativeSuffix" json:"negativeSuffix,omitempty"`
	PositiveSuffix        *string                `protobuf:"bytes,7,opt,name=positiveSuffix" json:"positiveSuffix,omitempty"`
	NegativePrefix        *string                `protobuf:"bytes,8,opt,name=negativePrefix" json:"negativePrefix,omitempty"`
	PositivePrefix        *string                `protobuf:"bytes,9,opt,name=positivePrefix" json:"positivePrefix,omitempty"`
	ShowThousandsGrouping *bool                  `protobuf:"varint,10,opt,name=showThousandsGrouping" json:"showThousandsGrouping,omitempty"`
	Notation              *string                `protobuf:"bytes,11,opt,name=notation" json:"notation,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NumberFormatTypeInfo) Reset() {
	*x = NumberFormatTypeInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NumberFormatTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberFormatTypeInfo) ProtoMessage() {}

func (x *NumberFormatTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberFormatTypeInfo.ProtoReflect.Descriptor instead.
func (*NumberFormatTypeInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{15}
}

func (x *NumberFormatTypeInfo) GetNumberBase() string {
	if x != nil && x.NumberBase != nil {
		return *x.NumberBase
	}
	return ""
}

func (x *NumberFormatTypeInfo) GetMinimumFractionDigits() int32 {
	if x != nil && x.MinimumFractionDigits != nil {
		return *x.MinimumFractionDigits
	}
	return 0
}

func (x *NumberFormatTypeInfo) GetMaximumFractionDigits() int32 {
	if x != nil && x.MaximumFractionDigits != nil {
		return *x.MaximumFractionDigits
	}
	return 0
}

func (x *NumberFormatTypeInfo) GetMinimumIntegerDigits() int32 {
	if x != nil && x.MinimumIntegerDigits != nil {
		return *x.MinimumIntegerDigits
	}
	return 0
}

func (x *NumberFormatTypeInfo) GetMaximumIntegerDigits() int32 {
	if x != nil && x.MaximumIntegerDigits != nil {
		return *x.MaximumIntegerDigits
	}
	return 0
}

func (x *NumberFormatTypeInfo) GetNegativeSuffix() string {
	if x != nil && x.NegativeSuffix != nil {
		return *x.NegativeSuffix
	}
	return ""
}

func (x *NumberFormatTypeInfo) GetPositiveSuffix() string {
	if x != nil && x.PositiveSuffix != nil {
		return *x.PositiveSuffix
	}
	return ""
}

func (x *NumberFormatTypeInfo) GetNegativePrefix() string {
	if x != nil && x.NegativePrefix != nil {
		return *x.NegativePrefix
	}
	return ""
}

func (x *NumberFormatTypeInfo) GetPositivePrefix() string {
	if x != nil && x.PositivePrefix != nil {
		return *x.PositivePrefix
	}
	return ""
}

func (x *NumberFormatTypeInfo) GetShowThousandsGrouping() bool {
	if x != nil && x.ShowThousandsGrouping != nil {
		return *x.ShowThousandsGrouping
	}
	return false
}

func (x *NumberFormatTypeInfo) GetNotation() string {
	if x != nil && x.Notation != nil {
		return *x.Notation
	}
	return ""
}

type GetContainerRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Container name.
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetContainerRequest) Reset() {
	*x = GetContainerRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetContainerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerRequest) ProtoMessage() {}

func (x *GetContainerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerRequest.ProtoReflect.Descriptor instead.
func (*GetContainerRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{16}
}

func (x *GetContainerRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetContainerRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetParameterTypeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Parameter type name.
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetParameterTypeRequest) Reset() {
	*x = GetParameterTypeRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetParameterTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParameterTypeRequest) ProtoMessage() {}

func (x *GetParameterTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParameterTypeRequest.ProtoReflect.Descriptor instead.
func (*GetParameterTypeRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{17}
}

func (x *GetParameterTypeRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetParameterTypeRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type AbsoluteTimeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InitialValue  *string                `protobuf:"bytes,1,opt,name=initialValue" json:"initialValue,omitempty"`
	Scale         *float64               `protobuf:"fixed64,2,opt,name=scale" json:"scale,omitempty"`
	Offset        *float64               `protobuf:"fixed64,3,opt,name=offset" json:"offset,omitempty"`
	OffsetFrom    *ParameterInfo         `protobuf:"bytes,4,opt,name=offsetFrom" json:"offsetFrom,omitempty"`
	Epoch         *string                `protobuf:"bytes,5,opt,name=epoch" json:"epoch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AbsoluteTimeInfo) Reset() {
	*x = AbsoluteTimeInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AbsoluteTimeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbsoluteTimeInfo) ProtoMessage() {}

func (x *AbsoluteTimeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbsoluteTimeInfo.ProtoReflect.Descriptor instead.
func (*AbsoluteTimeInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{18}
}

func (x *AbsoluteTimeInfo) GetInitialValue() string {
	if x != nil && x.InitialValue != nil {
		return *x.InitialValue
	}
	return ""
}

func (x *AbsoluteTimeInfo) GetScale() float64 {
	if x != nil && x.Scale != nil {
		return *x.Scale
	}
	return 0
}

func (x *AbsoluteTimeInfo) GetOffset() float64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *AbsoluteTimeInfo) GetOffsetFrom() *ParameterInfo {
	if x != nil {
		return x.OffsetFrom
	}
	return nil
}

func (x *AbsoluteTimeInfo) GetEpoch() string {
	if x != nil && x.Epoch != nil {
		return *x.Epoch
	}
	return ""
}

type MemberInfo struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	Name             *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ShortDescription *string                   `protobuf:"bytes,3,opt,name=shortDescription" json:"shortDescription,omitempty"`
	LongDescription  *string                   `protobuf:"bytes,4,opt,name=longDescription" json:"longDescription,omitempty"`
	Alias            []*protobuf.NamedObjectId `protobuf:"bytes,5,rep,name=alias" json:"alias,omitempty"`
	Type             *ParameterTypeInfo        `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MemberInfo) Reset() {
	*x = MemberInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberInfo) ProtoMessage() {}

func (x *MemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberInfo.ProtoReflect.Descriptor instead.
func (*MemberInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{19}
}

func (x *MemberInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MemberInfo) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *MemberInfo) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *MemberInfo) GetAlias() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *MemberInfo) GetType() *ParameterTypeInfo {
	if x != nil {
		return x.Type
	}
	return nil
}

type ArgumentMemberInfo struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	Name             *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ShortDescription *string                   `protobuf:"bytes,3,opt,name=shortDescription" json:"shortDescription,omitempty"`
	LongDescription  *string                   `protobuf:"bytes,4,opt,name=longDescription" json:"longDescription,omitempty"`
	Alias            []*protobuf.NamedObjectId `protobuf:"bytes,5,rep,name=alias" json:"alias,omitempty"`
	Type             *ArgumentTypeInfo         `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	InitialValue     *string                   `protobuf:"bytes,7,opt,name=initialValue" json:"initialValue,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ArgumentMemberInfo) Reset() {
	*x = ArgumentMemberInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentMemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentMemberInfo) ProtoMessage() {}

func (x *ArgumentMemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentMemberInfo.ProtoReflect.Descriptor instead.
func (*ArgumentMemberInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{20}
}

func (x *ArgumentMemberInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ArgumentMemberInfo) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *ArgumentMemberInfo) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *ArgumentMemberInfo) GetAlias() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *ArgumentMemberInfo) GetType() *ArgumentTypeInfo {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ArgumentMemberInfo) GetInitialValue() string {
	if x != nil && x.InitialValue != nil {
		return *x.InitialValue
	}
	return ""
}

type ParameterDimensionInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FixedValue    *int64                 `protobuf:"varint,1,opt,name=fixedValue" json:"fixedValue,omitempty"`
	Parameter     *ParameterInfo         `protobuf:"bytes,2,opt,name=parameter" json:"parameter,omitempty"`
	Slope         *int64                 `protobuf:"varint,3,opt,name=slope" json:"slope,omitempty"`
	Intercept     *int64                 `protobuf:"varint,4,opt,name=intercept" json:"intercept,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParameterDimensionInfo) Reset() {
	*x = ParameterDimensionInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterDimensionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterDimensionInfo) ProtoMessage() {}

func (x *ParameterDimensionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterDimensionInfo.ProtoReflect.Descriptor instead.
func (*ParameterDimensionInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{21}
}

func (x *ParameterDimensionInfo) GetFixedValue() int64 {
	if x != nil && x.FixedValue != nil {
		return *x.FixedValue
	}
	return 0
}

func (x *ParameterDimensionInfo) GetParameter() *ParameterInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *ParameterDimensionInfo) GetSlope() int64 {
	if x != nil && x.Slope != nil {
		return *x.Slope
	}
	return 0
}

func (x *ParameterDimensionInfo) GetIntercept() int64 {
	if x != nil && x.Intercept != nil {
		return *x.Intercept
	}
	return 0
}

type ArrayInfo struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Type          *ParameterTypeInfo        `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Dimensions    []*ParameterDimensionInfo `protobuf:"bytes,3,rep,name=dimensions" json:"dimensions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrayInfo) Reset() {
	*x = ArrayInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayInfo) ProtoMessage() {}

func (x *ArrayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayInfo.ProtoReflect.Descriptor instead.
func (*ArrayInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{22}
}

func (x *ArrayInfo) GetType() *ParameterTypeInfo {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ArrayInfo) GetDimensions() []*ParameterDimensionInfo {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type UsedByInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Algorithm     []*AlgorithmInfo       `protobuf:"bytes,1,rep,name=algorithm" json:"algorithm,omitempty"`
	Container     []*ContainerInfo       `protobuf:"bytes,2,rep,name=container" json:"container,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsedByInfo) Reset() {
	*x = UsedByInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsedByInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsedByInfo) ProtoMessage() {}

func (x *UsedByInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsedByInfo.ProtoReflect.Descriptor instead.
func (*UsedByInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{23}
}

func (x *UsedByInfo) GetAlgorithm() []*AlgorithmInfo {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *UsedByInfo) GetContainer() []*ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

type ParameterInfo struct {
	state            protoimpl.MessageState        `protogen:"open.v1"`
	Name             *string                       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	QualifiedName    *string                       `protobuf:"bytes,2,opt,name=qualifiedName" json:"qualifiedName,omitempty"`
	ShortDescription *string                       `protobuf:"bytes,3,opt,name=shortDescription" json:"shortDescription,omitempty"`
	LongDescription  *string                       `protobuf:"bytes,4,opt,name=longDescription" json:"longDescription,omitempty"`
	Alias            []*protobuf.NamedObjectId     `protobuf:"bytes,5,rep,name=alias" json:"alias,omitempty"`
	Type             *ParameterTypeInfo            `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	DataSource       *DataSourceType               `protobuf:"varint,7,opt,name=dataSource,enum=yamcs.protobuf.mdb.DataSourceType" json:"dataSource,omitempty"`
	UsedBy           *UsedByInfo                   `protobuf:"bytes,8,opt,name=usedBy" json:"usedBy,omitempty"`
	AncillaryData    map[string]*AncillaryDataInfo `protobuf:"bytes,9,rep,name=ancillaryData" json:"ancillaryData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Operations that return aggregate members or array entries
	// may use this field to indicate the path within the parameter.
	Path          []string `protobuf:"bytes,10,rep,name=path" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParameterInfo) Reset() {
	*x = ParameterInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterInfo) ProtoMessage() {}

func (x *ParameterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterInfo.ProtoReflect.Descriptor instead.
func (*ParameterInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{24}
}

func (x *ParameterInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ParameterInfo) GetQualifiedName() string {
	if x != nil && x.QualifiedName != nil {
		return *x.QualifiedName
	}
	return ""
}

func (x *ParameterInfo) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *ParameterInfo) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *ParameterInfo) GetAlias() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *ParameterInfo) GetType() *ParameterTypeInfo {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ParameterInfo) GetDataSource() DataSourceType {
	if x != nil && x.DataSource != nil {
		return *x.DataSource
	}
	return DataSourceType_TELEMETERED
}

func (x *ParameterInfo) GetUsedBy() *UsedByInfo {
	if x != nil {
		return x.UsedBy
	}
	return nil
}

func (x *ParameterInfo) GetAncillaryData() map[string]*AncillaryDataInfo {
	if x != nil {
		return x.AncillaryData
	}
	return nil
}

func (x *ParameterInfo) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type AncillaryDataInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *string                `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	MimeType      *string                `protobuf:"bytes,2,opt,name=mimeType" json:"mimeType,omitempty"`
	Href          *string                `protobuf:"bytes,3,opt,name=href" json:"href,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AncillaryDataInfo) Reset() {
	*x = AncillaryDataInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AncillaryDataInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AncillaryDataInfo) ProtoMessage() {}

func (x *AncillaryDataInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AncillaryDataInfo.ProtoReflect.Descriptor instead.
func (*AncillaryDataInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{25}
}

func (x *AncillaryDataInfo) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *AncillaryDataInfo) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *AncillaryDataInfo) GetHref() string {
	if x != nil && x.Href != nil {
		return *x.Href
	}
	return ""
}

type ArgumentTypeInfo struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	EngType      *string                `protobuf:"bytes,1,opt,name=engType" json:"engType,omitempty"`
	DataEncoding *DataEncodingInfo      `protobuf:"bytes,2,opt,name=dataEncoding" json:"dataEncoding,omitempty"`
	UnitSet      []*UnitInfo            `protobuf:"bytes,3,rep,name=unitSet" json:"unitSet,omitempty"`
	// Enumeration states (only used by enumerated arguments)
	EnumValue []*EnumValue `protobuf:"bytes,5,rep,name=enumValue" json:"enumValue,omitempty"`
	// Minimum value (only used by integer and float arguments)
	RangeMin *float64 `protobuf:"fixed64,6,opt,name=rangeMin" json:"rangeMin,omitempty"`
	// Maximum value (only used by integer and float arguments)
	RangeMax *float64 `protobuf:"fixed64,7,opt,name=rangeMax" json:"rangeMax,omitempty"`
	// Member information (only used by aggregate arguments)
	Member []*ArgumentMemberInfo `protobuf:"bytes,8,rep,name=member" json:"member,omitempty"`
	// String representation of a boolean zero (only used by boolean arguments)
	ZeroStringValue *string `protobuf:"bytes,9,opt,name=zeroStringValue" json:"zeroStringValue,omitempty"`
	// String representation of a boolean one (only used by boolean arguments)
	OneStringValue *string `protobuf:"bytes,10,opt,name=oneStringValue" json:"oneStringValue,omitempty"`
	// Minimum character count (only used by string arguments)
	MinChars *int32 `protobuf:"varint,11,opt,name=minChars" json:"minChars,omitempty"`
	// Maximum character count (only used by string arguments)
	MaxChars *int32 `protobuf:"varint,12,opt,name=maxChars" json:"maxChars,omitempty"`
	// True if the engineering type supports signed representation.
	// (only used by integer arguments)
	Signed *bool `protobuf:"varint,13,opt,name=signed" json:"signed,omitempty"`
	// Minimum byte count (only used by binary arguments)
	MinBytes *int32 `protobuf:"varint,14,opt,name=minBytes" json:"minBytes,omitempty"`
	// Maximum character count (only used by binary arguments)
	MaxBytes *int32 `protobuf:"varint,15,opt,name=maxBytes" json:"maxBytes,omitempty"`
	// Length of each dimension (only used by array arguments)
	Dimensions []*ArgumentDimensionInfo `protobuf:"bytes,16,rep,name=dimensions" json:"dimensions,omitempty"`
	// Type of array entries (only used by array arguments)
	ElementType *ArgumentTypeInfo `protobuf:"bytes,17,opt,name=elementType" json:"elementType,omitempty"`
	// Name of the parameter type
	Name          *string `protobuf:"bytes,18,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArgumentTypeInfo) Reset() {
	*x = ArgumentTypeInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentTypeInfo) ProtoMessage() {}

func (x *ArgumentTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentTypeInfo.ProtoReflect.Descriptor instead.
func (*ArgumentTypeInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{26}
}

func (x *ArgumentTypeInfo) GetEngType() string {
	if x != nil && x.EngType != nil {
		return *x.EngType
	}
	return ""
}

func (x *ArgumentTypeInfo) GetDataEncoding() *DataEncodingInfo {
	if x != nil {
		return x.DataEncoding
	}
	return nil
}

func (x *ArgumentTypeInfo) GetUnitSet() []*UnitInfo {
	if x != nil {
		return x.UnitSet
	}
	return nil
}

func (x *ArgumentTypeInfo) GetEnumValue() []*EnumValue {
	if x != nil {
		return x.EnumValue
	}
	return nil
}

func (x *ArgumentTypeInfo) GetRangeMin() float64 {
	if x != nil && x.RangeMin != nil {
		return *x.RangeMin
	}
	return 0
}

func (x *ArgumentTypeInfo) GetRangeMax() float64 {
	if x != nil && x.RangeMax != nil {
		return *x.RangeMax
	}
	return 0
}

func (x *ArgumentTypeInfo) GetMember() []*ArgumentMemberInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *ArgumentTypeInfo) GetZeroStringValue() string {
	if x != nil && x.ZeroStringValue != nil {
		return *x.ZeroStringValue
	}
	return ""
}

func (x *ArgumentTypeInfo) GetOneStringValue() string {
	if x != nil && x.OneStringValue != nil {
		return *x.OneStringValue
	}
	return ""
}

func (x *ArgumentTypeInfo) GetMinChars() int32 {
	if x != nil && x.MinChars != nil {
		return *x.MinChars
	}
	return 0
}

func (x *ArgumentTypeInfo) GetMaxChars() int32 {
	if x != nil && x.MaxChars != nil {
		return *x.MaxChars
	}
	return 0
}

func (x *ArgumentTypeInfo) GetSigned() bool {
	if x != nil && x.Signed != nil {
		return *x.Signed
	}
	return false
}

func (x *ArgumentTypeInfo) GetMinBytes() int32 {
	if x != nil && x.MinBytes != nil {
		return *x.MinBytes
	}
	return 0
}

func (x *ArgumentTypeInfo) GetMaxBytes() int32 {
	if x != nil && x.MaxBytes != nil {
		return *x.MaxBytes
	}
	return 0
}

func (x *ArgumentTypeInfo) GetDimensions() []*ArgumentDimensionInfo {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *ArgumentTypeInfo) GetElementType() *ArgumentTypeInfo {
	if x != nil {
		return x.ElementType
	}
	return nil
}

func (x *ArgumentTypeInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ArgumentDimensionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Use a fixed integer value. If set, no other options are applicable.
	// This value describes the length.
	FixedValue *int64 `protobuf:"varint,1,opt,name=fixedValue" json:"fixedValue,omitempty"`
	// Use the value of the referenced parameter.
	// The value describes the zero-based ending index (length - 1)
	//
	// For a value “v“, the dimension's length is determined
	// as: “(v * slope) + intercept“.
	Parameter *ParameterInfo `protobuf:"bytes,2,opt,name=parameter" json:"parameter,omitempty"`
	// Use the value of the referenced argument.
	// The value describes the zero-based ending index (length - 1)
	//
	// For a value “v“, the dimension's length is determined
	// as: “(v * slope) + intercept“.
	Argument *string `protobuf:"bytes,3,opt,name=argument" json:"argument,omitempty"`
	// Scale the value obtained from a parameter or argument reference.
	Slope *int64 `protobuf:"varint,4,opt,name=slope" json:"slope,omitempty"`
	// Shift the value obtained from a parameter or argument reference.
	Intercept     *int64 `protobuf:"varint,5,opt,name=intercept" json:"intercept,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArgumentDimensionInfo) Reset() {
	*x = ArgumentDimensionInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentDimensionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentDimensionInfo) ProtoMessage() {}

func (x *ArgumentDimensionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentDimensionInfo.ProtoReflect.Descriptor instead.
func (*ArgumentDimensionInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{27}
}

func (x *ArgumentDimensionInfo) GetFixedValue() int64 {
	if x != nil && x.FixedValue != nil {
		return *x.FixedValue
	}
	return 0
}

func (x *ArgumentDimensionInfo) GetParameter() *ParameterInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *ArgumentDimensionInfo) GetArgument() string {
	if x != nil && x.Argument != nil {
		return *x.Argument
	}
	return ""
}

func (x *ArgumentDimensionInfo) GetSlope() int64 {
	if x != nil && x.Slope != nil {
		return *x.Slope
	}
	return 0
}

func (x *ArgumentDimensionInfo) GetIntercept() int64 {
	if x != nil && x.Intercept != nil {
		return *x.Intercept
	}
	return 0
}

type ArgumentInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description   *string                `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	InitialValue  *string                `protobuf:"bytes,4,opt,name=initialValue" json:"initialValue,omitempty"`
	Type          *ArgumentTypeInfo      `protobuf:"bytes,6,opt,name=type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArgumentInfo) Reset() {
	*x = ArgumentInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentInfo) ProtoMessage() {}

func (x *ArgumentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentInfo.ProtoReflect.Descriptor instead.
func (*ArgumentInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{28}
}

func (x *ArgumentInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ArgumentInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ArgumentInfo) GetInitialValue() string {
	if x != nil && x.InitialValue != nil {
		return *x.InitialValue
	}
	return ""
}

func (x *ArgumentInfo) GetType() *ArgumentTypeInfo {
	if x != nil {
		return x.Type
	}
	return nil
}

type ArgumentAssignmentInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArgumentAssignmentInfo) Reset() {
	*x = ArgumentAssignmentInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArgumentAssignmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArgumentAssignmentInfo) ProtoMessage() {}

func (x *ArgumentAssignmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArgumentAssignmentInfo.ProtoReflect.Descriptor instead.
func (*ArgumentAssignmentInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{29}
}

func (x *ArgumentAssignmentInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ArgumentAssignmentInfo) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SignificanceInfo struct {
	state            protoimpl.MessageState                  `protogen:"open.v1"`
	ConsequenceLevel *SignificanceInfo_SignificanceLevelType `protobuf:"varint,1,opt,name=consequenceLevel,enum=yamcs.protobuf.mdb.SignificanceInfo_SignificanceLevelType" json:"consequenceLevel,omitempty"`
	ReasonForWarning *string                                 `protobuf:"bytes,2,opt,name=reasonForWarning" json:"reasonForWarning,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SignificanceInfo) Reset() {
	*x = SignificanceInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignificanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignificanceInfo) ProtoMessage() {}

func (x *SignificanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignificanceInfo.ProtoReflect.Descriptor instead.
func (*SignificanceInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{30}
}

func (x *SignificanceInfo) GetConsequenceLevel() SignificanceInfo_SignificanceLevelType {
	if x != nil && x.ConsequenceLevel != nil {
		return *x.ConsequenceLevel
	}
	return SignificanceInfo_NONE
}

func (x *SignificanceInfo) GetReasonForWarning() string {
	if x != nil && x.ReasonForWarning != nil {
		return *x.ReasonForWarning
	}
	return ""
}

type ComparisonInfo struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Parameter     *ParameterInfo               `protobuf:"bytes,1,opt,name=parameter" json:"parameter,omitempty"`
	Operator      *ComparisonInfo_OperatorType `protobuf:"varint,2,opt,name=operator,enum=yamcs.protobuf.mdb.ComparisonInfo_OperatorType" json:"operator,omitempty"`
	Value         *string                      `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Argument      *ArgumentInfo                `protobuf:"bytes,4,opt,name=argument" json:"argument,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComparisonInfo) Reset() {
	*x = ComparisonInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComparisonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparisonInfo) ProtoMessage() {}

func (x *ComparisonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparisonInfo.ProtoReflect.Descriptor instead.
func (*ComparisonInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{31}
}

func (x *ComparisonInfo) GetParameter() *ParameterInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *ComparisonInfo) GetOperator() ComparisonInfo_OperatorType {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ComparisonInfo_EQUAL_TO
}

func (x *ComparisonInfo) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ComparisonInfo) GetArgument() *ArgumentInfo {
	if x != nil {
		return x.Argument
	}
	return nil
}

type TransmissionConstraintInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expression    *string                `protobuf:"bytes,3,opt,name=expression" json:"expression,omitempty"`
	Timeout       *int64                 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransmissionConstraintInfo) Reset() {
	*x = TransmissionConstraintInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransmissionConstraintInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmissionConstraintInfo) ProtoMessage() {}

func (x *TransmissionConstraintInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmissionConstraintInfo.ProtoReflect.Descriptor instead.
func (*TransmissionConstraintInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{32}
}

func (x *TransmissionConstraintInfo) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

func (x *TransmissionConstraintInfo) GetTimeout() int64 {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return 0
}

type CommandInfo struct {
	state              protoimpl.MessageState    `protogen:"open.v1"`
	Name               *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	QualifiedName      *string                   `protobuf:"bytes,2,opt,name=qualifiedName" json:"qualifiedName,omitempty"`
	ShortDescription   *string                   `protobuf:"bytes,3,opt,name=shortDescription" json:"shortDescription,omitempty"`
	LongDescription    *string                   `protobuf:"bytes,4,opt,name=longDescription" json:"longDescription,omitempty"`
	Alias              []*protobuf.NamedObjectId `protobuf:"bytes,5,rep,name=alias" json:"alias,omitempty"`
	BaseCommand        *CommandInfo              `protobuf:"bytes,6,opt,name=baseCommand" json:"baseCommand,omitempty"`
	Abstract           *bool                     `protobuf:"varint,7,opt,name=abstract" json:"abstract,omitempty"`
	Argument           []*ArgumentInfo           `protobuf:"bytes,8,rep,name=argument" json:"argument,omitempty"`
	ArgumentAssignment []*ArgumentAssignmentInfo `protobuf:"bytes,9,rep,name=argumentAssignment" json:"argumentAssignment,omitempty"`
	// Command significance.
	//
	// This is the significance defined specifically for this command.
	// If unset, there may still be a significance inherited from
	// a base command.
	Significance     *SignificanceInfo             `protobuf:"bytes,10,opt,name=significance" json:"significance,omitempty"`
	Constraint       []*TransmissionConstraintInfo `protobuf:"bytes,11,rep,name=constraint" json:"constraint,omitempty"`
	CommandContainer *CommandContainerInfo         `protobuf:"bytes,13,opt,name=commandContainer" json:"commandContainer,omitempty"`
	Verifier         []*VerifierInfo               `protobuf:"bytes,14,rep,name=verifier" json:"verifier,omitempty"`
	AncillaryData    map[string]*AncillaryDataInfo `protobuf:"bytes,15,rep,name=ancillaryData" json:"ancillaryData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Effective command significance.
	//
	// This is the significance obtained by looking up the first defined
	// significance either in this command, or the nearest base command.
	EffectiveSignificance *SignificanceInfo `protobuf:"bytes,16,opt,name=effectiveSignificance" json:"effectiveSignificance,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CommandInfo) Reset() {
	*x = CommandInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandInfo) ProtoMessage() {}

func (x *CommandInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandInfo.ProtoReflect.Descriptor instead.
func (*CommandInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{33}
}

func (x *CommandInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CommandInfo) GetQualifiedName() string {
	if x != nil && x.QualifiedName != nil {
		return *x.QualifiedName
	}
	return ""
}

func (x *CommandInfo) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *CommandInfo) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *CommandInfo) GetAlias() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *CommandInfo) GetBaseCommand() *CommandInfo {
	if x != nil {
		return x.BaseCommand
	}
	return nil
}

func (x *CommandInfo) GetAbstract() bool {
	if x != nil && x.Abstract != nil {
		return *x.Abstract
	}
	return false
}

func (x *CommandInfo) GetArgument() []*ArgumentInfo {
	if x != nil {
		return x.Argument
	}
	return nil
}

func (x *CommandInfo) GetArgumentAssignment() []*ArgumentAssignmentInfo {
	if x != nil {
		return x.ArgumentAssignment
	}
	return nil
}

func (x *CommandInfo) GetSignificance() *SignificanceInfo {
	if x != nil {
		return x.Significance
	}
	return nil
}

func (x *CommandInfo) GetConstraint() []*TransmissionConstraintInfo {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *CommandInfo) GetCommandContainer() *CommandContainerInfo {
	if x != nil {
		return x.CommandContainer
	}
	return nil
}

func (x *CommandInfo) GetVerifier() []*VerifierInfo {
	if x != nil {
		return x.Verifier
	}
	return nil
}

func (x *CommandInfo) GetAncillaryData() map[string]*AncillaryDataInfo {
	if x != nil {
		return x.AncillaryData
	}
	return nil
}

func (x *CommandInfo) GetEffectiveSignificance() *SignificanceInfo {
	if x != nil {
		return x.EffectiveSignificance
	}
	return nil
}

type VerifierInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Stage *string                `protobuf:"bytes,1,opt,name=stage" json:"stage,omitempty"`
	// Container update that is checked
	Container *ContainerInfo `protobuf:"bytes,2,opt,name=container" json:"container,omitempty"`
	Algorithm *AlgorithmInfo `protobuf:"bytes,3,opt,name=algorithm" json:"algorithm,omitempty"`
	// What action to take when a check succeeds
	OnSuccess *VerifierInfo_TerminationActionType `protobuf:"varint,4,opt,name=onSuccess,enum=yamcs.protobuf.mdb.VerifierInfo_TerminationActionType" json:"onSuccess,omitempty"`
	// What action to take when a check fails
	OnFail *VerifierInfo_TerminationActionType `protobuf:"varint,5,opt,name=onFail,enum=yamcs.protobuf.mdb.VerifierInfo_TerminationActionType" json:"onFail,omitempty"`
	// What action to take when a check times out
	OnTimeout *VerifierInfo_TerminationActionType `protobuf:"varint,6,opt,name=onTimeout,enum=yamcs.protobuf.mdb.VerifierInfo_TerminationActionType" json:"onTimeout,omitempty"`
	// Time window during which a check is executed
	CheckWindow *CheckWindowInfo `protobuf:"bytes,7,opt,name=checkWindow" json:"checkWindow,omitempty"`
	// Expression used to check this verifier
	Expression    *string `protobuf:"bytes,8,opt,name=expression" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifierInfo) Reset() {
	*x = VerifierInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifierInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifierInfo) ProtoMessage() {}

func (x *VerifierInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifierInfo.ProtoReflect.Descriptor instead.
func (*VerifierInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{34}
}

func (x *VerifierInfo) GetStage() string {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return ""
}

func (x *VerifierInfo) GetContainer() *ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *VerifierInfo) GetAlgorithm() *AlgorithmInfo {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

func (x *VerifierInfo) GetOnSuccess() VerifierInfo_TerminationActionType {
	if x != nil && x.OnSuccess != nil {
		return *x.OnSuccess
	}
	return VerifierInfo_SUCCESS
}

func (x *VerifierInfo) GetOnFail() VerifierInfo_TerminationActionType {
	if x != nil && x.OnFail != nil {
		return *x.OnFail
	}
	return VerifierInfo_SUCCESS
}

func (x *VerifierInfo) GetOnTimeout() VerifierInfo_TerminationActionType {
	if x != nil && x.OnTimeout != nil {
		return *x.OnTimeout
	}
	return VerifierInfo_SUCCESS
}

func (x *VerifierInfo) GetCheckWindow() *CheckWindowInfo {
	if x != nil {
		return x.CheckWindow
	}
	return nil
}

func (x *VerifierInfo) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

type CheckWindowInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Delay in milliseconds before starting to check
	TimeToStartChecking *int64 `protobuf:"varint,1,opt,name=timeToStartChecking" json:"timeToStartChecking,omitempty"`
	// Duration in milliseconds of the check window
	TimeToStopChecking *int64 `protobuf:"varint,2,opt,name=timeToStopChecking" json:"timeToStopChecking,omitempty"`
	// Reference time for starting the check window
	RelativeTo    *string `protobuf:"bytes,3,opt,name=relativeTo" json:"relativeTo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckWindowInfo) Reset() {
	*x = CheckWindowInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckWindowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckWindowInfo) ProtoMessage() {}

func (x *CheckWindowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckWindowInfo.ProtoReflect.Descriptor instead.
func (*CheckWindowInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{35}
}

func (x *CheckWindowInfo) GetTimeToStartChecking() int64 {
	if x != nil && x.TimeToStartChecking != nil {
		return *x.TimeToStartChecking
	}
	return 0
}

func (x *CheckWindowInfo) GetTimeToStopChecking() int64 {
	if x != nil && x.TimeToStopChecking != nil {
		return *x.TimeToStopChecking
	}
	return 0
}

func (x *CheckWindowInfo) GetRelativeTo() string {
	if x != nil && x.RelativeTo != nil {
		return *x.RelativeTo
	}
	return ""
}

type RepeatInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FixedCount    *int64                 `protobuf:"varint,1,opt,name=fixedCount" json:"fixedCount,omitempty"`
	DynamicCount  *ParameterInfo         `protobuf:"bytes,2,opt,name=dynamicCount" json:"dynamicCount,omitempty"`
	BitsBetween   *int32                 `protobuf:"varint,3,opt,name=bitsBetween" json:"bitsBetween,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RepeatInfo) Reset() {
	*x = RepeatInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatInfo) ProtoMessage() {}

func (x *RepeatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatInfo.ProtoReflect.Descriptor instead.
func (*RepeatInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{36}
}

func (x *RepeatInfo) GetFixedCount() int64 {
	if x != nil && x.FixedCount != nil {
		return *x.FixedCount
	}
	return 0
}

func (x *RepeatInfo) GetDynamicCount() *ParameterInfo {
	if x != nil {
		return x.DynamicCount
	}
	return nil
}

func (x *RepeatInfo) GetBitsBetween() int32 {
	if x != nil && x.BitsBetween != nil {
		return *x.BitsBetween
	}
	return 0
}

type SequenceEntryInfo struct {
	state             protoimpl.MessageState                   `protogen:"open.v1"`
	LocationInBits    *int32                                   `protobuf:"varint,1,opt,name=locationInBits" json:"locationInBits,omitempty"`
	ReferenceLocation *SequenceEntryInfo_ReferenceLocationType `protobuf:"varint,2,opt,name=referenceLocation,enum=yamcs.protobuf.mdb.SequenceEntryInfo_ReferenceLocationType" json:"referenceLocation,omitempty"`
	// For use in sequence containers
	Container *ContainerInfo `protobuf:"bytes,3,opt,name=container" json:"container,omitempty"`
	Parameter *ParameterInfo `protobuf:"bytes,4,opt,name=parameter" json:"parameter,omitempty"`
	// For use in command containers
	Argument             *ArgumentInfo             `protobuf:"bytes,6,opt,name=argument" json:"argument,omitempty"`
	FixedValue           *FixedValueInfo           `protobuf:"bytes,7,opt,name=fixedValue" json:"fixedValue,omitempty"`
	Repeat               *RepeatInfo               `protobuf:"bytes,5,opt,name=repeat" json:"repeat,omitempty"`
	IndirectParameterRef *IndirectParameterRefInfo `protobuf:"bytes,8,opt,name=indirectParameterRef" json:"indirectParameterRef,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SequenceEntryInfo) Reset() {
	*x = SequenceEntryInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequenceEntryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceEntryInfo) ProtoMessage() {}

func (x *SequenceEntryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceEntryInfo.ProtoReflect.Descriptor instead.
func (*SequenceEntryInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{37}
}

func (x *SequenceEntryInfo) GetLocationInBits() int32 {
	if x != nil && x.LocationInBits != nil {
		return *x.LocationInBits
	}
	return 0
}

func (x *SequenceEntryInfo) GetReferenceLocation() SequenceEntryInfo_ReferenceLocationType {
	if x != nil && x.ReferenceLocation != nil {
		return *x.ReferenceLocation
	}
	return SequenceEntryInfo_CONTAINER_START
}

func (x *SequenceEntryInfo) GetContainer() *ContainerInfo {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *SequenceEntryInfo) GetParameter() *ParameterInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *SequenceEntryInfo) GetArgument() *ArgumentInfo {
	if x != nil {
		return x.Argument
	}
	return nil
}

func (x *SequenceEntryInfo) GetFixedValue() *FixedValueInfo {
	if x != nil {
		return x.FixedValue
	}
	return nil
}

func (x *SequenceEntryInfo) GetRepeat() *RepeatInfo {
	if x != nil {
		return x.Repeat
	}
	return nil
}

func (x *SequenceEntryInfo) GetIndirectParameterRef() *IndirectParameterRefInfo {
	if x != nil {
		return x.IndirectParameterRef
	}
	return nil
}

type FixedValueInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	HexValue      *string                `protobuf:"bytes,2,opt,name=hexValue" json:"hexValue,omitempty"`
	SizeInBits    *int32                 `protobuf:"varint,3,opt,name=sizeInBits" json:"sizeInBits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedValueInfo) Reset() {
	*x = FixedValueInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedValueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedValueInfo) ProtoMessage() {}

func (x *FixedValueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedValueInfo.ProtoReflect.Descriptor instead.
func (*FixedValueInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{38}
}

func (x *FixedValueInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FixedValueInfo) GetHexValue() string {
	if x != nil && x.HexValue != nil {
		return *x.HexValue
	}
	return ""
}

func (x *FixedValueInfo) GetSizeInBits() int32 {
	if x != nil && x.SizeInBits != nil {
		return *x.SizeInBits
	}
	return 0
}

type CommandContainerInfo struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	Name             *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	QualifiedName    *string                   `protobuf:"bytes,2,opt,name=qualifiedName" json:"qualifiedName,omitempty"`
	ShortDescription *string                   `protobuf:"bytes,3,opt,name=shortDescription" json:"shortDescription,omitempty"`
	LongDescription  *string                   `protobuf:"bytes,4,opt,name=longDescription" json:"longDescription,omitempty"`
	Alias            []*protobuf.NamedObjectId `protobuf:"bytes,5,rep,name=alias" json:"alias,omitempty"`
	SizeInBits       *int32                    `protobuf:"varint,6,opt,name=sizeInBits" json:"sizeInBits,omitempty"`
	BaseContainer    *CommandContainerInfo     `protobuf:"bytes,7,opt,name=baseContainer" json:"baseContainer,omitempty"`
	Entry            []*SequenceEntryInfo      `protobuf:"bytes,8,rep,name=entry" json:"entry,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CommandContainerInfo) Reset() {
	*x = CommandContainerInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandContainerInfo) ProtoMessage() {}

func (x *CommandContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandContainerInfo.ProtoReflect.Descriptor instead.
func (*CommandContainerInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{39}
}

func (x *CommandContainerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CommandContainerInfo) GetQualifiedName() string {
	if x != nil && x.QualifiedName != nil {
		return *x.QualifiedName
	}
	return ""
}

func (x *CommandContainerInfo) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *CommandContainerInfo) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *CommandContainerInfo) GetAlias() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *CommandContainerInfo) GetSizeInBits() int32 {
	if x != nil && x.SizeInBits != nil {
		return *x.SizeInBits
	}
	return 0
}

func (x *CommandContainerInfo) GetBaseContainer() *CommandContainerInfo {
	if x != nil {
		return x.BaseContainer
	}
	return nil
}

func (x *CommandContainerInfo) GetEntry() []*SequenceEntryInfo {
	if x != nil {
		return x.Entry
	}
	return nil
}

type IndirectParameterRefInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Parameter      *ParameterInfo         `protobuf:"bytes,1,opt,name=parameter" json:"parameter,omitempty"`
	AliasNamespace *string                `protobuf:"bytes,2,opt,name=aliasNamespace" json:"aliasNamespace,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *IndirectParameterRefInfo) Reset() {
	*x = IndirectParameterRefInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndirectParameterRefInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndirectParameterRefInfo) ProtoMessage() {}

func (x *IndirectParameterRefInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndirectParameterRefInfo.ProtoReflect.Descriptor instead.
func (*IndirectParameterRefInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{40}
}

func (x *IndirectParameterRefInfo) GetParameter() *ParameterInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *IndirectParameterRefInfo) GetAliasNamespace() string {
	if x != nil && x.AliasNamespace != nil {
		return *x.AliasNamespace
	}
	return ""
}

type ContainerInfo struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	Name             *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	QualifiedName    *string                   `protobuf:"bytes,2,opt,name=qualifiedName" json:"qualifiedName,omitempty"`
	ShortDescription *string                   `protobuf:"bytes,3,opt,name=shortDescription" json:"shortDescription,omitempty"`
	LongDescription  *string                   `protobuf:"bytes,4,opt,name=longDescription" json:"longDescription,omitempty"`
	Alias            []*protobuf.NamedObjectId `protobuf:"bytes,5,rep,name=alias" json:"alias,omitempty"`
	MaxInterval      *int64                    `protobuf:"varint,6,opt,name=maxInterval" json:"maxInterval,omitempty"`
	SizeInBits       *int32                    `protobuf:"varint,7,opt,name=sizeInBits" json:"sizeInBits,omitempty"`
	BaseContainer    *ContainerInfo            `protobuf:"bytes,8,opt,name=baseContainer" json:"baseContainer,omitempty"`
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	RestrictionCriteria           []*ComparisonInfo             `protobuf:"bytes,9,rep,name=restrictionCriteria" json:"restrictionCriteria,omitempty"`
	RestrictionCriteriaExpression *string                       `protobuf:"bytes,13,opt,name=restrictionCriteriaExpression" json:"restrictionCriteriaExpression,omitempty"`
	Entry                         []*SequenceEntryInfo          `protobuf:"bytes,10,rep,name=entry" json:"entry,omitempty"`
	UsedBy                        *UsedByInfo                   `protobuf:"bytes,11,opt,name=usedBy" json:"usedBy,omitempty"`
	AncillaryData                 map[string]*AncillaryDataInfo `protobuf:"bytes,12,rep,name=ancillaryData" json:"ancillaryData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ArchivePartition              *bool                         `protobuf:"varint,14,opt,name=archivePartition" json:"archivePartition,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ContainerInfo) Reset() {
	*x = ContainerInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerInfo) ProtoMessage() {}

func (x *ContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerInfo.ProtoReflect.Descriptor instead.
func (*ContainerInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{41}
}

func (x *ContainerInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContainerInfo) GetQualifiedName() string {
	if x != nil && x.QualifiedName != nil {
		return *x.QualifiedName
	}
	return ""
}

func (x *ContainerInfo) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *ContainerInfo) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *ContainerInfo) GetAlias() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *ContainerInfo) GetMaxInterval() int64 {
	if x != nil && x.MaxInterval != nil {
		return *x.MaxInterval
	}
	return 0
}

func (x *ContainerInfo) GetSizeInBits() int32 {
	if x != nil && x.SizeInBits != nil {
		return *x.SizeInBits
	}
	return 0
}

func (x *ContainerInfo) GetBaseContainer() *ContainerInfo {
	if x != nil {
		return x.BaseContainer
	}
	return nil
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *ContainerInfo) GetRestrictionCriteria() []*ComparisonInfo {
	if x != nil {
		return x.RestrictionCriteria
	}
	return nil
}

func (x *ContainerInfo) GetRestrictionCriteriaExpression() string {
	if x != nil && x.RestrictionCriteriaExpression != nil {
		return *x.RestrictionCriteriaExpression
	}
	return ""
}

func (x *ContainerInfo) GetEntry() []*SequenceEntryInfo {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *ContainerInfo) GetUsedBy() *UsedByInfo {
	if x != nil {
		return x.UsedBy
	}
	return nil
}

func (x *ContainerInfo) GetAncillaryData() map[string]*AncillaryDataInfo {
	if x != nil {
		return x.AncillaryData
	}
	return nil
}

func (x *ContainerInfo) GetArchivePartition() bool {
	if x != nil && x.ArchivePartition != nil {
		return *x.ArchivePartition
	}
	return false
}

type InputParameterInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Parameter         *ParameterInfo         `protobuf:"bytes,1,opt,name=parameter" json:"parameter,omitempty"`
	InputName         *string                `protobuf:"bytes,2,opt,name=inputName" json:"inputName,omitempty"`
	ParameterInstance *int32                 `protobuf:"varint,3,opt,name=parameterInstance" json:"parameterInstance,omitempty"`
	Mandatory         *bool                  `protobuf:"varint,4,opt,name=mandatory" json:"mandatory,omitempty"`
	Argument          *ArgumentInfo          `protobuf:"bytes,5,opt,name=argument" json:"argument,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *InputParameterInfo) Reset() {
	*x = InputParameterInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InputParameterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputParameterInfo) ProtoMessage() {}

func (x *InputParameterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputParameterInfo.ProtoReflect.Descriptor instead.
func (*InputParameterInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{42}
}

func (x *InputParameterInfo) GetParameter() *ParameterInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *InputParameterInfo) GetInputName() string {
	if x != nil && x.InputName != nil {
		return *x.InputName
	}
	return ""
}

func (x *InputParameterInfo) GetParameterInstance() int32 {
	if x != nil && x.ParameterInstance != nil {
		return *x.ParameterInstance
	}
	return 0
}

func (x *InputParameterInfo) GetMandatory() bool {
	if x != nil && x.Mandatory != nil {
		return *x.Mandatory
	}
	return false
}

func (x *InputParameterInfo) GetArgument() *ArgumentInfo {
	if x != nil {
		return x.Argument
	}
	return nil
}

type OutputParameterInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Parameter     *ParameterInfo         `protobuf:"bytes,1,opt,name=parameter" json:"parameter,omitempty"`
	OutputName    *string                `protobuf:"bytes,2,opt,name=outputName" json:"outputName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputParameterInfo) Reset() {
	*x = OutputParameterInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputParameterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputParameterInfo) ProtoMessage() {}

func (x *OutputParameterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputParameterInfo.ProtoReflect.Descriptor instead.
func (*OutputParameterInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{43}
}

func (x *OutputParameterInfo) GetParameter() *ParameterInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *OutputParameterInfo) GetOutputName() string {
	if x != nil && x.OutputName != nil {
		return *x.OutputName
	}
	return ""
}

type MathElement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of element, either an operand kind or an operator.
	Type *MathElement_Type `protobuf:"varint,1,opt,name=type,enum=yamcs.protobuf.mdb.MathElement_Type" json:"type,omitempty"`
	// Operator symbol if type “OPERATOR“.
	Operator *string `protobuf:"bytes,2,opt,name=operator" json:"operator,omitempty"`
	// Constant if type “VALUE_OPERAND“.
	Value *float64 `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	// Parameter whose value is used if type “PARAMETER“.
	Parameter *ParameterInfo `protobuf:"bytes,4,opt,name=parameter" json:"parameter,omitempty"`
	// Parameter instance specifier
	ParameterInstance *int32 `protobuf:"varint,5,opt,name=parameterInstance" json:"parameterInstance,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MathElement) Reset() {
	*x = MathElement{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MathElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MathElement) ProtoMessage() {}

func (x *MathElement) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MathElement.ProtoReflect.Descriptor instead.
func (*MathElement) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{44}
}

func (x *MathElement) GetType() MathElement_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MathElement_VALUE_OPERAND
}

func (x *MathElement) GetOperator() string {
	if x != nil && x.Operator != nil {
		return *x.Operator
	}
	return ""
}

func (x *MathElement) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *MathElement) GetParameter() *ParameterInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *MathElement) GetParameterInstance() int32 {
	if x != nil && x.ParameterInstance != nil {
		return *x.ParameterInstance
	}
	return 0
}

type AlgorithmInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Algorithm name
	Name             *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	QualifiedName    *string                   `protobuf:"bytes,2,opt,name=qualifiedName" json:"qualifiedName,omitempty"`
	ShortDescription *string                   `protobuf:"bytes,3,opt,name=shortDescription" json:"shortDescription,omitempty"`
	LongDescription  *string                   `protobuf:"bytes,4,opt,name=longDescription" json:"longDescription,omitempty"`
	Alias            []*protobuf.NamedObjectId `protobuf:"bytes,5,rep,name=alias" json:"alias,omitempty"`
	Scope            *AlgorithmInfo_Scope      `protobuf:"varint,6,opt,name=scope,enum=yamcs.protobuf.mdb.AlgorithmInfo_Scope" json:"scope,omitempty"`
	// Type of algorithm
	Type *AlgorithmInfo_Type `protobuf:"varint,13,opt,name=type,enum=yamcs.protobuf.mdb.AlgorithmInfo_Type" json:"type,omitempty"`
	// Language if this is a custom algorithm
	Language *string `protobuf:"bytes,7,opt,name=language" json:"language,omitempty"`
	// Code if this is a custom algorithm
	Text              *string                `protobuf:"bytes,8,opt,name=text" json:"text,omitempty"`
	InputParameter    []*InputParameterInfo  `protobuf:"bytes,9,rep,name=inputParameter" json:"inputParameter,omitempty"`
	OutputParameter   []*OutputParameterInfo `protobuf:"bytes,10,rep,name=outputParameter" json:"outputParameter,omitempty"`
	OnParameterUpdate []*ParameterInfo       `protobuf:"bytes,11,rep,name=onParameterUpdate" json:"onParameterUpdate,omitempty"`
	OnPeriodicRate    []int64                `protobuf:"varint,12,rep,name=onPeriodicRate" json:"onPeriodicRate,omitempty"`
	// Operands and operators in Reverse Polish Notation if type “MATH“.
	MathElements  []*MathElement `protobuf:"bytes,14,rep,name=mathElements" json:"mathElements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlgorithmInfo) Reset() {
	*x = AlgorithmInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlgorithmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlgorithmInfo) ProtoMessage() {}

func (x *AlgorithmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlgorithmInfo.ProtoReflect.Descriptor instead.
func (*AlgorithmInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{45}
}

func (x *AlgorithmInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AlgorithmInfo) GetQualifiedName() string {
	if x != nil && x.QualifiedName != nil {
		return *x.QualifiedName
	}
	return ""
}

func (x *AlgorithmInfo) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *AlgorithmInfo) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *AlgorithmInfo) GetAlias() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *AlgorithmInfo) GetScope() AlgorithmInfo_Scope {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return AlgorithmInfo_GLOBAL
}

func (x *AlgorithmInfo) GetType() AlgorithmInfo_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return AlgorithmInfo_CUSTOM
}

func (x *AlgorithmInfo) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *AlgorithmInfo) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *AlgorithmInfo) GetInputParameter() []*InputParameterInfo {
	if x != nil {
		return x.InputParameter
	}
	return nil
}

func (x *AlgorithmInfo) GetOutputParameter() []*OutputParameterInfo {
	if x != nil {
		return x.OutputParameter
	}
	return nil
}

func (x *AlgorithmInfo) GetOnParameterUpdate() []*ParameterInfo {
	if x != nil {
		return x.OnParameterUpdate
	}
	return nil
}

func (x *AlgorithmInfo) GetOnPeriodicRate() []int64 {
	if x != nil {
		return x.OnPeriodicRate
	}
	return nil
}

func (x *AlgorithmInfo) GetMathElements() []*MathElement {
	if x != nil {
		return x.MathElements
	}
	return nil
}

type ListSpaceSystemsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The search keywords. This supports searching on qualified name or alias.
	Q *string `protobuf:"bytes,2,opt,name=q" json:"q,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,7,opt,name=next" json:"next,omitempty"`
	// The zero-based row number at which to start outputting results. Default: “0“
	Pos *int32 `protobuf:"varint,8,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned systems per page. Choose this value too high
	// and you risk hitting the maximum response size limit enforced by the server.
	// Default: “100“
	Limit         *int32 `protobuf:"varint,9,opt,name=limit" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSpaceSystemsRequest) Reset() {
	*x = ListSpaceSystemsRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSpaceSystemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSpaceSystemsRequest) ProtoMessage() {}

func (x *ListSpaceSystemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSpaceSystemsRequest.ProtoReflect.Descriptor instead.
func (*ListSpaceSystemsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{46}
}

func (x *ListSpaceSystemsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListSpaceSystemsRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *ListSpaceSystemsRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListSpaceSystemsRequest) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ListSpaceSystemsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListContainersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The search keywords. This supports searching on qualified name or alias.
	Q *string `protobuf:"bytes,2,opt,name=q" json:"q,omitempty"`
	// List only direct child sub-systems or containers of the specified system.
	// For example when querying the system "/a" against an MDB with containers
	// "/a/b/c" and "/a/c", the result returns the sub system "/a/b" and the
	// container "/a/c".
	//
	// When “system“ and “q“ are used together, matching containers at any
	// depth are returned, starting from the specified space system.
	System *string `protobuf:"bytes,10,opt,name=system" json:"system,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,7,opt,name=next" json:"next,omitempty"`
	// The zero-based row number at which to start outputting results. Default: “0“
	Pos *int32 `protobuf:"varint,8,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned containers per page. Choose this value too high
	// and you risk hitting the maximum response size limit enforced by the server.
	// Default: “100“
	Limit         *int32 `protobuf:"varint,9,opt,name=limit" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListContainersRequest) Reset() {
	*x = ListContainersRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContainersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainersRequest) ProtoMessage() {}

func (x *ListContainersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainersRequest.ProtoReflect.Descriptor instead.
func (*ListContainersRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{47}
}

func (x *ListContainersRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListContainersRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *ListContainersRequest) GetSystem() string {
	if x != nil && x.System != nil {
		return *x.System
	}
	return ""
}

func (x *ListContainersRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListContainersRequest) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ListContainersRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListParameterTypesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The search keywords. This supports searching on qualified name or alias.
	Q *string `protobuf:"bytes,2,opt,name=q" json:"q,omitempty"`
	// List only direct child sub-systems or parameter types of the specified system.
	// For example when querying the system "/a" against an MDB with parameter types
	// "/a/b/c" and "/a/c", the result returns the sub system "/a/b" and the
	// parameter type "/a/c".
	//
	// When “system“ and “q“ are used together, matching containers at any
	// depth are returned, starting from the specified space system.
	System *string `protobuf:"bytes,10,opt,name=system" json:"system,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,7,opt,name=next" json:"next,omitempty"`
	// The zero-based row number at which to start outputting results. Default: “0“
	Pos *int32 `protobuf:"varint,8,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned items per page. Choose this value too high
	// and you risk hitting the maximum response size limit enforced by the server.
	// Default: “100“
	Limit         *int32 `protobuf:"varint,9,opt,name=limit" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListParameterTypesRequest) Reset() {
	*x = ListParameterTypesRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParameterTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParameterTypesRequest) ProtoMessage() {}

func (x *ListParameterTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParameterTypesRequest.ProtoReflect.Descriptor instead.
func (*ListParameterTypesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{48}
}

func (x *ListParameterTypesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListParameterTypesRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *ListParameterTypesRequest) GetSystem() string {
	if x != nil && x.System != nil {
		return *x.System
	}
	return ""
}

func (x *ListParameterTypesRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListParameterTypesRequest) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ListParameterTypesRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListAlgorithmsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The search keywords. This supports searching on qualified name or alias.
	Q *string `protobuf:"bytes,2,opt,name=q" json:"q,omitempty"`
	// List only direct child sub-systems or algorithms of the specified system.
	// For example when querying the system "/a" against an MDB with algorithms
	// "/a/b/c" and "/a/c", the result returns the sub system "/a/b" and the
	// algorithm "/a/c".
	//
	// When “system“ and “q“ are used together, matching algorithms at any
	// depth are returned, starting from the specified space system.
	System *string `protobuf:"bytes,10,opt,name=system" json:"system,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,7,opt,name=next" json:"next,omitempty"`
	// The zero-based row number at which to start outputting results. Default: “0“
	Pos *int32 `protobuf:"varint,8,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned algorithms per page. Choose this value too
	// high and you risk hitting the maximum response size limit enforced by
	// the server. Default: “100“
	Limit *int32 `protobuf:"varint,9,opt,name=limit" json:"limit,omitempty"`
	// Include only algorithms of the specified scope
	Scope         *AlgorithmInfo_Scope `protobuf:"varint,11,opt,name=scope,enum=yamcs.protobuf.mdb.AlgorithmInfo_Scope" json:"scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAlgorithmsRequest) Reset() {
	*x = ListAlgorithmsRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAlgorithmsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlgorithmsRequest) ProtoMessage() {}

func (x *ListAlgorithmsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlgorithmsRequest.ProtoReflect.Descriptor instead.
func (*ListAlgorithmsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{49}
}

func (x *ListAlgorithmsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListAlgorithmsRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *ListAlgorithmsRequest) GetSystem() string {
	if x != nil && x.System != nil {
		return *x.System
	}
	return ""
}

func (x *ListAlgorithmsRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListAlgorithmsRequest) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ListAlgorithmsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListAlgorithmsRequest) GetScope() AlgorithmInfo_Scope {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return AlgorithmInfo_GLOBAL
}

type ListCommandsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The search keywords. This supports searching on qualified name or alias.
	Q *string `protobuf:"bytes,2,opt,name=q" json:"q,omitempty"`
	// List only direct child sub-systems or commands of the specified system.
	// For example when querying the system "/a" against an MDB with commands
	// "/a/b/c" and "/a/c", the result returns the sub system "/a/b" and the
	// command "/a/c".
	//
	// When “system“ and “q“ are used together, matching commands at any
	// depth are returned, starting from the specified space system.
	System  *string `protobuf:"bytes,11,opt,name=system" json:"system,omitempty"`
	Details *bool   `protobuf:"varint,4,opt,name=details" json:"details,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,7,opt,name=next" json:"next,omitempty"`
	// The zero-based row number at which to start outputting results. Default: “0“
	Pos *int32 `protobuf:"varint,8,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned commands per page. Choose this value too
	// high and you risk hitting the maximum response size limit enforced by
	// the server. Default: “100“
	Limit *int32 `protobuf:"varint,9,opt,name=limit" json:"limit,omitempty"`
	// Exclude abstract commands
	NoAbstract    *bool `protobuf:"varint,10,opt,name=noAbstract" json:"noAbstract,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommandsRequest) Reset() {
	*x = ListCommandsRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommandsRequest) ProtoMessage() {}

func (x *ListCommandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommandsRequest.ProtoReflect.Descriptor instead.
func (*ListCommandsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{50}
}

func (x *ListCommandsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListCommandsRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *ListCommandsRequest) GetSystem() string {
	if x != nil && x.System != nil {
		return *x.System
	}
	return ""
}

func (x *ListCommandsRequest) GetDetails() bool {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return false
}

func (x *ListCommandsRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListCommandsRequest) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ListCommandsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListCommandsRequest) GetNoAbstract() bool {
	if x != nil && x.NoAbstract != nil {
		return *x.NoAbstract
	}
	return false
}

type GetParameterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Parameter name.
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetParameterRequest) Reset() {
	*x = GetParameterRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetParameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParameterRequest) ProtoMessage() {}

func (x *GetParameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParameterRequest.ProtoReflect.Descriptor instead.
func (*GetParameterRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{51}
}

func (x *GetParameterRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetParameterRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ListParametersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The search keywords. This supports searching on qualified name or alias.
	Q *string `protobuf:"bytes,2,opt,name=q" json:"q,omitempty"`
	// When used together with “q“, include also aggregate members (at any depth)
	// in the search.
	//
	// Note that this method returns only parameters. Members are part of the type definition.
	SearchMembers *bool `protobuf:"varint,12,opt,name=searchMembers" json:"searchMembers,omitempty"`
	// Include details on each returned parameter (this includes long
	// descriptions, aliases, and detailed type information).
	// If unset, only summary information is returned.
	Details *bool `protobuf:"varint,4,opt,name=details" json:"details,omitempty"`
	// The parameter types to be included in the result. Valid types are “boolean“,
	// “binary“, “enumeration“, “float“, “integer“ or “string“.
	// If unspecified, parameters of all types will be included.
	Type []string `protobuf:"bytes,5,rep,name=type" json:"type,omitempty"`
	// Include only parameters of the specified source.
	Source *DataSourceType `protobuf:"varint,10,opt,name=source,enum=yamcs.protobuf.mdb.DataSourceType" json:"source,omitempty"`
	// List only direct child sub-systems or parameters of the specified system.
	// For example when querying the system "/a" against an MDB with parameters
	// "/a/b/c" and "/a/c", the result returns the sub system "/a/b" and the
	// parameter "/a/c".
	//
	// When “system“ and “q“ are used together, matching parameters at any
	// depth are returned, starting from the specified space system.
	System *string `protobuf:"bytes,11,opt,name=system" json:"system,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,7,opt,name=next" json:"next,omitempty"`
	// The zero-based row number at which to start outputting results. Default: “0“
	Pos *int32 `protobuf:"varint,8,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned parameters per page. Choose this value too
	// high and you risk hitting the maximum response size limit enforced by the
	// server. Default: “100“
	Limit         *int32 `protobuf:"varint,9,opt,name=limit" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListParametersRequest) Reset() {
	*x = ListParametersRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParametersRequest) ProtoMessage() {}

func (x *ListParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParametersRequest.ProtoReflect.Descriptor instead.
func (*ListParametersRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{52}
}

func (x *ListParametersRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListParametersRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *ListParametersRequest) GetSearchMembers() bool {
	if x != nil && x.SearchMembers != nil {
		return *x.SearchMembers
	}
	return false
}

func (x *ListParametersRequest) GetDetails() bool {
	if x != nil && x.Details != nil {
		return *x.Details
	}
	return false
}

func (x *ListParametersRequest) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ListParametersRequest) GetSource() DataSourceType {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return DataSourceType_TELEMETERED
}

func (x *ListParametersRequest) GetSystem() string {
	if x != nil && x.System != nil {
		return *x.System
	}
	return ""
}

func (x *ListParametersRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListParametersRequest) GetPos() int32 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ListParametersRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListParametersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matching subsystems when the “system“ option was specified
	Systems []*SpaceSystemInfo `protobuf:"bytes,5,rep,name=systems" json:"systems,omitempty"`
	// Deprecated. Use “systems“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	SpaceSystems []string `protobuf:"bytes,4,rep,name=spaceSystems" json:"spaceSystems,omitempty"`
	// Matching parameters
	Parameters []*ParameterInfo `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	// The total number of results (across all pages)
	TotalSize     *int32 `protobuf:"varint,3,opt,name=totalSize" json:"totalSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListParametersResponse) Reset() {
	*x = ListParametersResponse{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParametersResponse) ProtoMessage() {}

func (x *ListParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParametersResponse.ProtoReflect.Descriptor instead.
func (*ListParametersResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{53}
}

func (x *ListParametersResponse) GetSystems() []*SpaceSystemInfo {
	if x != nil {
		return x.Systems
	}
	return nil
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *ListParametersResponse) GetSpaceSystems() []string {
	if x != nil {
		return x.SpaceSystems
	}
	return nil
}

func (x *ListParametersResponse) GetParameters() []*ParameterInfo {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *ListParametersResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

func (x *ListParametersResponse) GetTotalSize() int32 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

type BatchGetParametersRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Instance      *string                   `protobuf:"bytes,2,opt,name=instance" json:"instance,omitempty"`
	Id            []*protobuf.NamedObjectId `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetParametersRequest) Reset() {
	*x = BatchGetParametersRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetParametersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetParametersRequest) ProtoMessage() {}

func (x *BatchGetParametersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetParametersRequest.ProtoReflect.Descriptor instead.
func (*BatchGetParametersRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{54}
}

func (x *BatchGetParametersRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *BatchGetParametersRequest) GetId() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

type BatchGetParametersResponse struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Response      []*BatchGetParametersResponse_GetParameterResponse `protobuf:"bytes,1,rep,name=response" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetParametersResponse) Reset() {
	*x = BatchGetParametersResponse{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetParametersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetParametersResponse) ProtoMessage() {}

func (x *BatchGetParametersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetParametersResponse.ProtoReflect.Descriptor instead.
func (*BatchGetParametersResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{55}
}

func (x *BatchGetParametersResponse) GetResponse() []*BatchGetParametersResponse_GetParameterResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type ListContainersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matching subsystems when the “system“ option was specified
	Systems []*SpaceSystemInfo `protobuf:"bytes,5,rep,name=systems" json:"systems,omitempty"`
	// Deprecated. Use “systems“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	SpaceSystems []string `protobuf:"bytes,4,rep,name=spaceSystems" json:"spaceSystems,omitempty"`
	// Matching containers
	Containers []*ContainerInfo `protobuf:"bytes,1,rep,name=containers" json:"containers,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	// The total number of results (across all pages)
	TotalSize     *int32 `protobuf:"varint,3,opt,name=totalSize" json:"totalSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListContainersResponse) Reset() {
	*x = ListContainersResponse{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListContainersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContainersResponse) ProtoMessage() {}

func (x *ListContainersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContainersResponse.ProtoReflect.Descriptor instead.
func (*ListContainersResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{56}
}

func (x *ListContainersResponse) GetSystems() []*SpaceSystemInfo {
	if x != nil {
		return x.Systems
	}
	return nil
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *ListContainersResponse) GetSpaceSystems() []string {
	if x != nil {
		return x.SpaceSystems
	}
	return nil
}

func (x *ListContainersResponse) GetContainers() []*ContainerInfo {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *ListContainersResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

func (x *ListContainersResponse) GetTotalSize() int32 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

type ListParameterTypesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matching subsystems when the “system“ option was specified
	Systems []*SpaceSystemInfo `protobuf:"bytes,5,rep,name=systems" json:"systems,omitempty"`
	// Deprecated. Use “systems“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	SpaceSystems []string `protobuf:"bytes,4,rep,name=spaceSystems" json:"spaceSystems,omitempty"`
	// Matching parameter types
	ParameterTypes []*ParameterTypeInfo `protobuf:"bytes,1,rep,name=parameterTypes" json:"parameterTypes,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	// The total number of results (across all pages)
	TotalSize     *int32 `protobuf:"varint,3,opt,name=totalSize" json:"totalSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListParameterTypesResponse) Reset() {
	*x = ListParameterTypesResponse{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParameterTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParameterTypesResponse) ProtoMessage() {}

func (x *ListParameterTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParameterTypesResponse.ProtoReflect.Descriptor instead.
func (*ListParameterTypesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{57}
}

func (x *ListParameterTypesResponse) GetSystems() []*SpaceSystemInfo {
	if x != nil {
		return x.Systems
	}
	return nil
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *ListParameterTypesResponse) GetSpaceSystems() []string {
	if x != nil {
		return x.SpaceSystems
	}
	return nil
}

func (x *ListParameterTypesResponse) GetParameterTypes() []*ParameterTypeInfo {
	if x != nil {
		return x.ParameterTypes
	}
	return nil
}

func (x *ListParameterTypesResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

func (x *ListParameterTypesResponse) GetTotalSize() int32 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

type ListCommandsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matching subsystems when the “system“ option was specified
	Systems []*SpaceSystemInfo `protobuf:"bytes,5,rep,name=systems" json:"systems,omitempty"`
	// Deprecated. Use “systems“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	SpaceSystems []string `protobuf:"bytes,4,rep,name=spaceSystems" json:"spaceSystems,omitempty"`
	// Matching commands
	Commands []*CommandInfo `protobuf:"bytes,1,rep,name=commands" json:"commands,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	// The total number of results (across all pages)
	TotalSize     *int32 `protobuf:"varint,3,opt,name=totalSize" json:"totalSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommandsResponse) Reset() {
	*x = ListCommandsResponse{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommandsResponse) ProtoMessage() {}

func (x *ListCommandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommandsResponse.ProtoReflect.Descriptor instead.
func (*ListCommandsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{58}
}

func (x *ListCommandsResponse) GetSystems() []*SpaceSystemInfo {
	if x != nil {
		return x.Systems
	}
	return nil
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *ListCommandsResponse) GetSpaceSystems() []string {
	if x != nil {
		return x.SpaceSystems
	}
	return nil
}

func (x *ListCommandsResponse) GetCommands() []*CommandInfo {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *ListCommandsResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

func (x *ListCommandsResponse) GetTotalSize() int32 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

type ListAlgorithmsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matching subsystems when the “system“ option was specified
	Systems []*SpaceSystemInfo `protobuf:"bytes,5,rep,name=systems" json:"systems,omitempty"`
	// Deprecated. Use “systems“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
	SpaceSystems []string `protobuf:"bytes,4,rep,name=spaceSystems" json:"spaceSystems,omitempty"`
	// Matching algorithms
	Algorithms []*AlgorithmInfo `protobuf:"bytes,1,rep,name=algorithms" json:"algorithms,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	// The total number of results (across all pages)
	TotalSize     *int32 `protobuf:"varint,3,opt,name=totalSize" json:"totalSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAlgorithmsResponse) Reset() {
	*x = ListAlgorithmsResponse{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAlgorithmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlgorithmsResponse) ProtoMessage() {}

func (x *ListAlgorithmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlgorithmsResponse.ProtoReflect.Descriptor instead.
func (*ListAlgorithmsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{59}
}

func (x *ListAlgorithmsResponse) GetSystems() []*SpaceSystemInfo {
	if x != nil {
		return x.Systems
	}
	return nil
}

// Deprecated: Marked as deprecated in yamcs/protobuf/mdb/mdb.proto.
func (x *ListAlgorithmsResponse) GetSpaceSystems() []string {
	if x != nil {
		return x.SpaceSystems
	}
	return nil
}

func (x *ListAlgorithmsResponse) GetAlgorithms() []*AlgorithmInfo {
	if x != nil {
		return x.Algorithms
	}
	return nil
}

func (x *ListAlgorithmsResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

func (x *ListAlgorithmsResponse) GetTotalSize() int32 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

type GetAlgorithmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Algorithm name.
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAlgorithmRequest) Reset() {
	*x = GetAlgorithmRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAlgorithmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAlgorithmRequest) ProtoMessage() {}

func (x *GetAlgorithmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAlgorithmRequest.ProtoReflect.Descriptor instead.
func (*GetAlgorithmRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{60}
}

func (x *GetAlgorithmRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetAlgorithmRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type CreateParameterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Fully qualified parameter name
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Short description (one line)
	ShortDescription *string `protobuf:"bytes,3,opt,name=shortDescription" json:"shortDescription,omitempty"`
	// Long description (Markdown)
	LongDescription *string `protobuf:"bytes,4,opt,name=longDescription" json:"longDescription,omitempty"`
	// Aliases, keyed by namespace
	Aliases map[string]string `protobuf:"bytes,5,rep,name=aliases" json:"aliases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Type of datasource.
	//
	// One of TELEMETERED, DERIVED, CONSTANT, LOCAL, SYSTEM, COMMAND, COMMAND_HISTORY,
	// EXTERNAL1, EXTERNAL2, or EXTERNAL3
	DataSource *DataSourceType `protobuf:"varint,6,opt,name=dataSource,enum=yamcs.protobuf.mdb.DataSourceType" json:"dataSource,omitempty"`
	// Fully qualified name of a parameter type
	ParameterType *string `protobuf:"bytes,7,opt,name=parameterType" json:"parameterType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateParameterRequest) Reset() {
	*x = CreateParameterRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateParameterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateParameterRequest) ProtoMessage() {}

func (x *CreateParameterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateParameterRequest.ProtoReflect.Descriptor instead.
func (*CreateParameterRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{61}
}

func (x *CreateParameterRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *CreateParameterRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateParameterRequest) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *CreateParameterRequest) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *CreateParameterRequest) GetAliases() map[string]string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *CreateParameterRequest) GetDataSource() DataSourceType {
	if x != nil && x.DataSource != nil {
		return *x.DataSource
	}
	return DataSourceType_TELEMETERED
}

func (x *CreateParameterRequest) GetParameterType() string {
	if x != nil && x.ParameterType != nil {
		return *x.ParameterType
	}
	return ""
}

type CreateParameterTypeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Fully qualified parameter type name
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Short description (one line)
	ShortDescription *string `protobuf:"bytes,3,opt,name=shortDescription" json:"shortDescription,omitempty"`
	// Long description (Markdown)
	LongDescription *string `protobuf:"bytes,4,opt,name=longDescription" json:"longDescription,omitempty"`
	// Aliases, keyed by namespace
	Aliases map[string]string `protobuf:"bytes,5,rep,name=aliases" json:"aliases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Engineering type. One of “float“, “integer“, “enumeration“,
	// “binary“, “boolean“ or “string“.
	EngType *string `protobuf:"bytes,6,opt,name=engType" json:"engType,omitempty"`
	// Engineering unit
	Unit *string `protobuf:"bytes,7,opt,name=unit" json:"unit,omitempty"`
	// Set to true if the engineering type supports signed representation.
	// (only used with “integer“ parameter types)
	Signed *bool `protobuf:"varint,8,opt,name=signed" json:"signed,omitempty"`
	// Default Alarm, effective when no contextual alarm takes precedence.
	DefaultAlarm *AlarmInfo `protobuf:"bytes,9,opt,name=defaultAlarm" json:"defaultAlarm,omitempty"`
	// Contextual alarms
	ContextAlarms []*ContextAlarmInfo `protobuf:"bytes,10,rep,name=contextAlarms" json:"contextAlarms,omitempty"`
	// Enumeration values.
	// (only used with “enumeration“ parameter types)
	EnumerationValues []*EnumValue `protobuf:"bytes,11,rep,name=enumerationValues" json:"enumerationValues,omitempty"`
	// String representation of a boolean zero.
	// (only used with “boolean“ parameter types)
	ZeroStringValue *string `protobuf:"bytes,12,opt,name=zeroStringValue" json:"zeroStringValue,omitempty"`
	// String representation of a boolean one.
	// (only used with “boolean“ parameter types)
	OneStringValue *string `protobuf:"bytes,13,opt,name=oneStringValue" json:"oneStringValue,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateParameterTypeRequest) Reset() {
	*x = CreateParameterTypeRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateParameterTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateParameterTypeRequest) ProtoMessage() {}

func (x *CreateParameterTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateParameterTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateParameterTypeRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{62}
}

func (x *CreateParameterTypeRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *CreateParameterTypeRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateParameterTypeRequest) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *CreateParameterTypeRequest) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *CreateParameterTypeRequest) GetAliases() map[string]string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *CreateParameterTypeRequest) GetEngType() string {
	if x != nil && x.EngType != nil {
		return *x.EngType
	}
	return ""
}

func (x *CreateParameterTypeRequest) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *CreateParameterTypeRequest) GetSigned() bool {
	if x != nil && x.Signed != nil {
		return *x.Signed
	}
	return false
}

func (x *CreateParameterTypeRequest) GetDefaultAlarm() *AlarmInfo {
	if x != nil {
		return x.DefaultAlarm
	}
	return nil
}

func (x *CreateParameterTypeRequest) GetContextAlarms() []*ContextAlarmInfo {
	if x != nil {
		return x.ContextAlarms
	}
	return nil
}

func (x *CreateParameterTypeRequest) GetEnumerationValues() []*EnumValue {
	if x != nil {
		return x.EnumerationValues
	}
	return nil
}

func (x *CreateParameterTypeRequest) GetZeroStringValue() string {
	if x != nil && x.ZeroStringValue != nil {
		return *x.ZeroStringValue
	}
	return ""
}

func (x *CreateParameterTypeRequest) GetOneStringValue() string {
	if x != nil && x.OneStringValue != nil {
		return *x.OneStringValue
	}
	return ""
}

type GetMissionDatabaseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance      *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMissionDatabaseRequest) Reset() {
	*x = GetMissionDatabaseRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMissionDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMissionDatabaseRequest) ProtoMessage() {}

func (x *GetMissionDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMissionDatabaseRequest.ProtoReflect.Descriptor instead.
func (*GetMissionDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{63}
}

func (x *GetMissionDatabaseRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type ExportJavaMissionDatabaseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance      *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportJavaMissionDatabaseRequest) Reset() {
	*x = ExportJavaMissionDatabaseRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportJavaMissionDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportJavaMissionDatabaseRequest) ProtoMessage() {}

func (x *ExportJavaMissionDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportJavaMissionDatabaseRequest.ProtoReflect.Descriptor instead.
func (*ExportJavaMissionDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{64}
}

func (x *ExportJavaMissionDatabaseRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type StreamMissionDatabaseRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Stream space systems. Default: “true“
	IncludeSpaceSystems *bool `protobuf:"varint,2,opt,name=includeSpaceSystems" json:"includeSpaceSystems,omitempty"`
	// Stream containers. Default: “true“
	IncludeContainers *bool `protobuf:"varint,3,opt,name=includeContainers" json:"includeContainers,omitempty"`
	// Stream parameters. Default: “true“
	IncludeParameters *bool `protobuf:"varint,4,opt,name=includeParameters" json:"includeParameters,omitempty"`
	// Stream parameter types. Default: “true“
	IncludeParameterTypes *bool `protobuf:"varint,5,opt,name=includeParameterTypes" json:"includeParameterTypes,omitempty"`
	// Stream commands. Default: “true“
	IncludeCommands *bool `protobuf:"varint,6,opt,name=includeCommands" json:"includeCommands,omitempty"`
	// Stream algorithms. Default: “true“
	IncludeAlgorithms *bool `protobuf:"varint,7,opt,name=includeAlgorithms" json:"includeAlgorithms,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StreamMissionDatabaseRequest) Reset() {
	*x = StreamMissionDatabaseRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMissionDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMissionDatabaseRequest) ProtoMessage() {}

func (x *StreamMissionDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMissionDatabaseRequest.ProtoReflect.Descriptor instead.
func (*StreamMissionDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{65}
}

func (x *StreamMissionDatabaseRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *StreamMissionDatabaseRequest) GetIncludeSpaceSystems() bool {
	if x != nil && x.IncludeSpaceSystems != nil {
		return *x.IncludeSpaceSystems
	}
	return false
}

func (x *StreamMissionDatabaseRequest) GetIncludeContainers() bool {
	if x != nil && x.IncludeContainers != nil {
		return *x.IncludeContainers
	}
	return false
}

func (x *StreamMissionDatabaseRequest) GetIncludeParameters() bool {
	if x != nil && x.IncludeParameters != nil {
		return *x.IncludeParameters
	}
	return false
}

func (x *StreamMissionDatabaseRequest) GetIncludeParameterTypes() bool {
	if x != nil && x.IncludeParameterTypes != nil {
		return *x.IncludeParameterTypes
	}
	return false
}

func (x *StreamMissionDatabaseRequest) GetIncludeCommands() bool {
	if x != nil && x.IncludeCommands != nil {
		return *x.IncludeCommands
	}
	return false
}

func (x *StreamMissionDatabaseRequest) GetIncludeAlgorithms() bool {
	if x != nil && x.IncludeAlgorithms != nil {
		return *x.IncludeAlgorithms
	}
	return false
}

type MissionDatabaseItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Item:
	//
	//	*MissionDatabaseItem_SpaceSystem
	//	*MissionDatabaseItem_Container
	//	*MissionDatabaseItem_Parameter
	//	*MissionDatabaseItem_ParameterType
	//	*MissionDatabaseItem_Command
	//	*MissionDatabaseItem_Algorithm
	Item          isMissionDatabaseItem_Item `protobuf_oneof:"item"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MissionDatabaseItem) Reset() {
	*x = MissionDatabaseItem{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissionDatabaseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionDatabaseItem) ProtoMessage() {}

func (x *MissionDatabaseItem) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionDatabaseItem.ProtoReflect.Descriptor instead.
func (*MissionDatabaseItem) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{66}
}

func (x *MissionDatabaseItem) GetItem() isMissionDatabaseItem_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *MissionDatabaseItem) GetSpaceSystem() *SpaceSystemInfo {
	if x != nil {
		if x, ok := x.Item.(*MissionDatabaseItem_SpaceSystem); ok {
			return x.SpaceSystem
		}
	}
	return nil
}

func (x *MissionDatabaseItem) GetContainer() *ContainerInfo {
	if x != nil {
		if x, ok := x.Item.(*MissionDatabaseItem_Container); ok {
			return x.Container
		}
	}
	return nil
}

func (x *MissionDatabaseItem) GetParameter() *ParameterInfo {
	if x != nil {
		if x, ok := x.Item.(*MissionDatabaseItem_Parameter); ok {
			return x.Parameter
		}
	}
	return nil
}

func (x *MissionDatabaseItem) GetParameterType() *ParameterTypeInfo {
	if x != nil {
		if x, ok := x.Item.(*MissionDatabaseItem_ParameterType); ok {
			return x.ParameterType
		}
	}
	return nil
}

func (x *MissionDatabaseItem) GetCommand() *CommandInfo {
	if x != nil {
		if x, ok := x.Item.(*MissionDatabaseItem_Command); ok {
			return x.Command
		}
	}
	return nil
}

func (x *MissionDatabaseItem) GetAlgorithm() *AlgorithmInfo {
	if x != nil {
		if x, ok := x.Item.(*MissionDatabaseItem_Algorithm); ok {
			return x.Algorithm
		}
	}
	return nil
}

type isMissionDatabaseItem_Item interface {
	isMissionDatabaseItem_Item()
}

type MissionDatabaseItem_SpaceSystem struct {
	// A space system
	SpaceSystem *SpaceSystemInfo `protobuf:"bytes,1,opt,name=spaceSystem,oneof"`
}

type MissionDatabaseItem_Container struct {
	// A container
	Container *ContainerInfo `protobuf:"bytes,2,opt,name=container,oneof"`
}

type MissionDatabaseItem_Parameter struct {
	// A parameter
	Parameter *ParameterInfo `protobuf:"bytes,3,opt,name=parameter,oneof"`
}

type MissionDatabaseItem_ParameterType struct {
	// A parameter type
	ParameterType *ParameterTypeInfo `protobuf:"bytes,4,opt,name=parameterType,oneof"`
}

type MissionDatabaseItem_Command struct {
	// A command
	Command *CommandInfo `protobuf:"bytes,5,opt,name=command,oneof"`
}

type MissionDatabaseItem_Algorithm struct {
	// An algorithm
	Algorithm *AlgorithmInfo `protobuf:"bytes,6,opt,name=algorithm,oneof"`
}

func (*MissionDatabaseItem_SpaceSystem) isMissionDatabaseItem_Item() {}

func (*MissionDatabaseItem_Container) isMissionDatabaseItem_Item() {}

func (*MissionDatabaseItem_Parameter) isMissionDatabaseItem_Item() {}

func (*MissionDatabaseItem_ParameterType) isMissionDatabaseItem_Item() {}

func (*MissionDatabaseItem_Command) isMissionDatabaseItem_Item() {}

func (*MissionDatabaseItem_Algorithm) isMissionDatabaseItem_Item() {}

type ListSpaceSystemsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Matching space systems
	SpaceSystems []*SpaceSystemInfo `protobuf:"bytes,1,rep,name=spaceSystems" json:"spaceSystems,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	// The total number of results (across all pages)
	TotalSize     *int32 `protobuf:"varint,3,opt,name=totalSize" json:"totalSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSpaceSystemsResponse) Reset() {
	*x = ListSpaceSystemsResponse{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSpaceSystemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSpaceSystemsResponse) ProtoMessage() {}

func (x *ListSpaceSystemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSpaceSystemsResponse.ProtoReflect.Descriptor instead.
func (*ListSpaceSystemsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{67}
}

func (x *ListSpaceSystemsResponse) GetSpaceSystems() []*SpaceSystemInfo {
	if x != nil {
		return x.SpaceSystems
	}
	return nil
}

func (x *ListSpaceSystemsResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

func (x *ListSpaceSystemsResponse) GetTotalSize() int32 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

type GetSpaceSystemRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Space-system name.
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSpaceSystemRequest) Reset() {
	*x = GetSpaceSystemRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSpaceSystemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpaceSystemRequest) ProtoMessage() {}

func (x *GetSpaceSystemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpaceSystemRequest.ProtoReflect.Descriptor instead.
func (*GetSpaceSystemRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{68}
}

func (x *GetSpaceSystemRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetSpaceSystemRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type ExportXtceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Space-system name.
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportXtceRequest) Reset() {
	*x = ExportXtceRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportXtceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportXtceRequest) ProtoMessage() {}

func (x *ExportXtceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportXtceRequest.ProtoReflect.Descriptor instead.
func (*ExportXtceRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{69}
}

func (x *ExportXtceRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ExportXtceRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetCommandRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Command name.
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommandRequest) Reset() {
	*x = GetCommandRequest{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommandRequest) ProtoMessage() {}

func (x *GetCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommandRequest.ProtoReflect.Descriptor instead.
func (*GetCommandRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{70}
}

func (x *GetCommandRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetCommandRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type SpaceSystemInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Space system name
	Name          *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	QualifiedName *string `protobuf:"bytes,2,opt,name=qualifiedName" json:"qualifiedName,omitempty"`
	// Short description (one line)
	ShortDescription *string `protobuf:"bytes,3,opt,name=shortDescription" json:"shortDescription,omitempty"`
	// Long description (Markdown)
	LongDescription *string                       `protobuf:"bytes,4,opt,name=longDescription" json:"longDescription,omitempty"`
	Alias           []*protobuf.NamedObjectId     `protobuf:"bytes,16,rep,name=alias" json:"alias,omitempty"`
	Version         *string                       `protobuf:"bytes,5,opt,name=version" json:"version,omitempty"`
	History         []*HistoryInfo                `protobuf:"bytes,14,rep,name=history" json:"history,omitempty"`
	Sub             []*SpaceSystemInfo            `protobuf:"bytes,15,rep,name=sub" json:"sub,omitempty"`
	AncillaryData   map[string]*AncillaryDataInfo `protobuf:"bytes,17,rep,name=ancillaryData" json:"ancillaryData,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SpaceSystemInfo) Reset() {
	*x = SpaceSystemInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpaceSystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpaceSystemInfo) ProtoMessage() {}

func (x *SpaceSystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpaceSystemInfo.ProtoReflect.Descriptor instead.
func (*SpaceSystemInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{71}
}

func (x *SpaceSystemInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SpaceSystemInfo) GetQualifiedName() string {
	if x != nil && x.QualifiedName != nil {
		return *x.QualifiedName
	}
	return ""
}

func (x *SpaceSystemInfo) GetShortDescription() string {
	if x != nil && x.ShortDescription != nil {
		return *x.ShortDescription
	}
	return ""
}

func (x *SpaceSystemInfo) GetLongDescription() string {
	if x != nil && x.LongDescription != nil {
		return *x.LongDescription
	}
	return ""
}

func (x *SpaceSystemInfo) GetAlias() []*protobuf.NamedObjectId {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *SpaceSystemInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *SpaceSystemInfo) GetHistory() []*HistoryInfo {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *SpaceSystemInfo) GetSub() []*SpaceSystemInfo {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *SpaceSystemInfo) GetAncillaryData() map[string]*AncillaryDataInfo {
	if x != nil {
		return x.AncillaryData
	}
	return nil
}

type SplineCalibratorInfo_SplinePointInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Raw           *float64               `protobuf:"fixed64,1,opt,name=raw" json:"raw,omitempty"`
	Calibrated    *float64               `protobuf:"fixed64,2,opt,name=calibrated" json:"calibrated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SplineCalibratorInfo_SplinePointInfo) Reset() {
	*x = SplineCalibratorInfo_SplinePointInfo{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SplineCalibratorInfo_SplinePointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplineCalibratorInfo_SplinePointInfo) ProtoMessage() {}

func (x *SplineCalibratorInfo_SplinePointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplineCalibratorInfo_SplinePointInfo.ProtoReflect.Descriptor instead.
func (*SplineCalibratorInfo_SplinePointInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{11, 0}
}

func (x *SplineCalibratorInfo_SplinePointInfo) GetRaw() float64 {
	if x != nil && x.Raw != nil {
		return *x.Raw
	}
	return 0
}

func (x *SplineCalibratorInfo_SplinePointInfo) GetCalibrated() float64 {
	if x != nil && x.Calibrated != nil {
		return *x.Calibrated
	}
	return 0
}

type BatchGetParametersResponse_GetParameterResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            *protobuf.NamedObjectId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Parameter     *ParameterInfo          `protobuf:"bytes,2,opt,name=parameter" json:"parameter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetParametersResponse_GetParameterResponse) Reset() {
	*x = BatchGetParametersResponse_GetParameterResponse{}
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetParametersResponse_GetParameterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetParametersResponse_GetParameterResponse) ProtoMessage() {}

func (x *BatchGetParametersResponse_GetParameterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_mdb_mdb_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetParametersResponse_GetParameterResponse.ProtoReflect.Descriptor instead.
func (*BatchGetParametersResponse_GetParameterResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP(), []int{55, 0}
}

func (x *BatchGetParametersResponse_GetParameterResponse) GetId() *protobuf.NamedObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BatchGetParametersResponse_GetParameterResponse) GetParameter() *ParameterInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

var File_yamcs_protobuf_mdb_mdb_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_mdb_mdb_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62,
	0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x03, 0x0a, 0x0f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x0b, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x22, 0x1e, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x0a, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22,
	0x62, 0x0a, 0x10, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x38, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x22, 0xc1, 0x03, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x52, 0x0a, 0x11, 0x65,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x11, 0x65, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12,
	0x46, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x80, 0x04, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x45, 0x6e, 0x64,
	0x69, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x69, 0x74, 0x74, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x69, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x49,
	0x6e, 0x42, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x69, 0x7a,
	0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x59, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x43, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54,
	0x45, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x22, 0xb9, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc0,
	0x03, 0x0a, 0x0e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x60, 0x0a, 0x14, 0x70, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x70,
	0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x73, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x6c, 0x0a, 0x18, 0x6a, 0x61, 0x76,
	0x61, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x4a, 0x61, 0x76, 0x61, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x18, 0x6a,
	0x61, 0x76, 0x61, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x4f, 0x4c, 0x59, 0x4e, 0x4f, 0x4d, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x50, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x54, 0x48,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x4a, 0x41, 0x56, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x22, 0x64, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x79, 0x6e, 0x6f, 0x6d, 0x69, 0x61, 0x6c, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x14, 0x53, 0x70, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x52, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53,
	0x70, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x43, 0x0a, 0x0f, 0x53, 0x70, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x22, 0x38, 0x0a, 0x1c, 0x4a,
	0x61, 0x76, 0x61, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x22, 0x59, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xe1, 0x09, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x36, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x75, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x3b, 0x0a, 0x09, 0x65, 0x6e,
	0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6e,
	0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x61, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x36, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x0d, 0x61, 0x6e, 0x63, 0x69,
	0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x6e, 0x63, 0x69, 0x6c,
	0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x7a, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x7a, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x39, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x1a, 0x67, 0x0a, 0x12, 0x41,
	0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xfc, 0x03, 0x0a, 0x14, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67,
	0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x69, 0x6e,
	0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e,
	0x64, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x68, 0x6f, 0x75, 0x73, 0x61, 0x6e, 0x64, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0a,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0xe6, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x91,
	0x02, 0x0a, 0x12, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x6c, 0x6f, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65,
	0x70, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x64,
	0x42, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0xe4, 0x04, 0x0a, 0x0d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x36,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x6e, 0x63, 0x69, 0x6c, 0x6c,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x67, 0x0a, 0x12, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x59, 0x0a, 0x11, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x22, 0xe4, 0x05, 0x0a, 0x10, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x65,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x28, 0x0a, 0x0f, 0x7a, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x7a, 0x65, 0x72, 0x6f, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x61, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xc8, 0x01, 0x0a, 0x15, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x22, 0xa2, 0x01, 0x0a,
	0x0c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x42, 0x0a, 0x16, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x66, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x61,
	0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x56, 0x45, 0x52, 0x45, 0x10,
	0x06, 0x22, 0x83, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x5f, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4d, 0x41, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4d, 0x41,
	0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x06, 0x22, 0x56, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0x98, 0x08, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x5a, 0x0a, 0x12, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a,
	0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x0d, 0x61,
	0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5a, 0x0a, 0x15, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x1a, 0x67, 0x0a, 0x12, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6e,
	0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x04, 0x0a, 0x0c, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x12, 0x54, 0x0a, 0x09, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x54, 0x0a, 0x09, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x45, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x15, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x22, 0x93, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x69,
	0x6d, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f,
	0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x22, 0x95, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x74, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x69, 0x74, 0x73, 0x42, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x22, 0x86, 0x05, 0x0a, 0x11, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x42, 0x69,
	0x74, 0x73, 0x12, 0x69, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a,
	0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x60, 0x0a, 0x14, 0x69, 0x6e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x49, 0x6e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0x40, 0x0a, 0x15, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45,
	0x56, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x02, 0x22, 0x60, 0x0a,
	0x0e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x22,
	0x88, 0x03, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x3b, 0x0a,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x49,
	0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0xe5, 0x06, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x7a,
	0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x62, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x12, 0x58, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x44, 0x0a, 0x1d,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x36, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x6e, 0x63, 0x69, 0x6c,
	0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x67, 0x0a, 0x12, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6e, 0x63, 0x69,
	0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xbc, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x48, 0x49, 0x53, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x4e, 0x44,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x04, 0x22,
	0xc7, 0x06, 0x0a, 0x0d, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x4e, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x51, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x11, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x52, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4d, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55,
	0x53, 0x54, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x54, 0x48, 0x10, 0x02,
	0x22, 0x47, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4c, 0x4f,
	0x42, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x7f, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0c, 0x0a, 0x01,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd4,
	0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x6f, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa5, 0x02, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x8e, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26,
	0x0a, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x66, 0x0a, 0x19, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x02,
	0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x86, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x22, 0x8e, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4d, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x26, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x8e, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x42, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa9, 0x05, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x7a, 0x65, 0x72, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x7a, 0x65, 0x72, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x37, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x3e, 0x0a, 0x20, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x1c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x73, 0x22, 0xbb, 0x03, 0x0a, 0x13, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x47, 0x0a, 0x0b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0xaf, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0x47, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x11, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x58, 0x74, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa9, 0x04, 0x0a, 0x0f, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x6e, 0x67, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x35, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x5c, 0x0a, 0x0d, 0x61, 0x6e, 0x63,
	0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x6e, 0x63, 0x69, 0x6c, 0x6c,
	0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x67, 0x0a, 0x12, 0x41, 0x6e, 0x63, 0x69, 0x6c,
	0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6e, 0x63, 0x69, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x2a, 0xae, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x31, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x32, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x33, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x0a, 0x2a, 0x5c, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x57, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41,
	0x4c, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x56, 0x45, 0x52, 0x45, 0x10, 0x05, 0x32,
	0xc7, 0x16, 0x0a, 0x06, 0x4d, 0x64, 0x62, 0x41, 0x70, 0x69, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x19, 0x8a, 0x92, 0x03, 0x15, 0x0a, 0x13, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x12, 0x8c, 0x01, 0x0a, 0x19, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x34,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x24, 0x8a, 0x92, 0x03, 0x20, 0x0a,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x61, 0x76, 0x61, 0x12,
	0xa4, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x8a, 0x92, 0x03, 0x31, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x0a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2d, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x8a, 0x92, 0x03, 0x2b, 0x0a,
	0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x0a, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x58, 0x74, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x58, 0x74, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x47, 0x8a, 0x92, 0x03, 0x43, 0x6a, 0x0b, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x20, 0x58, 0x54, 0x43, 0x45, 0x0a, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x2a, 0x7d, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x58, 0x54, 0x43, 0x45, 0x12, 0xa7,
	0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x30, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x31, 0x8a, 0x92, 0x03, 0x2d, 0x48, 0x01, 0x0a, 0x29, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x3a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x30, 0x01, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x30, 0x8a, 0x92, 0x03, 0x2c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x2c, 0x8a, 0x92, 0x03, 0x28, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64,
	0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x12,
	0x89, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x27, 0x8a, 0x92, 0x03, 0x23, 0x3a, 0x01, 0x2a, 0x1a, 0x1e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x12,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x8a, 0x92, 0x03, 0x2c, 0x3a, 0x01, 0x2a, 0x1a, 0x27, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x47, 0x65, 0x74, 0x12, 0xae, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x8a, 0x92, 0x03, 0x35, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x0a,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x31, 0x8a,
	0x92, 0x03, 0x2d, 0x0a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d,
	0x12, 0x9a, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x2c, 0x8a, 0x92, 0x03, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x99, 0x01,
	0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x12, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x8a, 0x92, 0x03, 0x2c, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x8a, 0x92, 0x03, 0x28, 0x0a, 0x26, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x2a, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x6d, 0x64, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x8a, 0x92, 0x03, 0x28, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x0a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x8a,
	0x92, 0x03, 0x26, 0x0a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x29, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64,
	0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x30, 0x8a, 0x92, 0x03, 0x2c, 0x52, 0x0a, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x73, 0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x64, 0x62, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x2c, 0x8a, 0x92, 0x03, 0x28, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x64, 0x62, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d,
	0x1a, 0x07, 0x82, 0x80, 0x01, 0x03, 0x4d, 0x44, 0x42, 0x42, 0x57, 0x0a, 0x12, 0x6f, 0x72, 0x67,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70,
	0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d,
	0x64, 0x62,
})

var (
	file_yamcs_protobuf_mdb_mdb_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_mdb_mdb_proto_rawDescData []byte
)

func file_yamcs_protobuf_mdb_mdb_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_mdb_mdb_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_mdb_mdb_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_mdb_mdb_proto_rawDesc), len(file_yamcs_protobuf_mdb_mdb_proto_rawDesc)))
	})
	return file_yamcs_protobuf_mdb_mdb_proto_rawDescData
}

var file_yamcs_protobuf_mdb_mdb_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_yamcs_protobuf_mdb_mdb_proto_msgTypes = make([]protoimpl.MessageInfo, 81)
var file_yamcs_protobuf_mdb_mdb_proto_goTypes = []any{
	(DataSourceType)(0),                          // 0: yamcs.protobuf.mdb.DataSourceType
	(AlarmLevelType)(0),                          // 1: yamcs.protobuf.mdb.AlarmLevelType
	(DataEncodingInfo_Type)(0),                   // 2: yamcs.protobuf.mdb.DataEncodingInfo.Type
	(CalibratorInfo_Type)(0),                     // 3: yamcs.protobuf.mdb.CalibratorInfo.Type
	(SignificanceInfo_SignificanceLevelType)(0),  // 4: yamcs.protobuf.mdb.SignificanceInfo.SignificanceLevelType
	(ComparisonInfo_OperatorType)(0),             // 5: yamcs.protobuf.mdb.ComparisonInfo.OperatorType
	(VerifierInfo_TerminationActionType)(0),      // 6: yamcs.protobuf.mdb.VerifierInfo.TerminationActionType
	(SequenceEntryInfo_ReferenceLocationType)(0), // 7: yamcs.protobuf.mdb.SequenceEntryInfo.ReferenceLocationType
	(MathElement_Type)(0),                        // 8: yamcs.protobuf.mdb.MathElement.Type
	(AlgorithmInfo_Type)(0),                      // 9: yamcs.protobuf.mdb.AlgorithmInfo.Type
	(AlgorithmInfo_Scope)(0),                     // 10: yamcs.protobuf.mdb.AlgorithmInfo.Scope
	(*MissionDatabase)(nil),                      // 11: yamcs.protobuf.mdb.MissionDatabase
	(*HistoryInfo)(nil),                          // 12: yamcs.protobuf.mdb.HistoryInfo
	(*UnitInfo)(nil),                             // 13: yamcs.protobuf.mdb.UnitInfo
	(*AlarmRange)(nil),                           // 14: yamcs.protobuf.mdb.AlarmRange
	(*EnumerationAlarm)(nil),                     // 15: yamcs.protobuf.mdb.EnumerationAlarm
	(*AlarmInfo)(nil),                            // 16: yamcs.protobuf.mdb.AlarmInfo
	(*ContextAlarmInfo)(nil),                     // 17: yamcs.protobuf.mdb.ContextAlarmInfo
	(*DataEncodingInfo)(nil),                     // 18: yamcs.protobuf.mdb.DataEncodingInfo
	(*ContextCalibratorInfo)(nil),                // 19: yamcs.protobuf.mdb.ContextCalibratorInfo
	(*CalibratorInfo)(nil),                       // 20: yamcs.protobuf.mdb.CalibratorInfo
	(*PolynomialCalibratorInfo)(nil),             // 21: yamcs.protobuf.mdb.PolynomialCalibratorInfo
	(*SplineCalibratorInfo)(nil),                 // 22: yamcs.protobuf.mdb.SplineCalibratorInfo
	(*JavaExpressionCalibratorInfo)(nil),         // 23: yamcs.protobuf.mdb.JavaExpressionCalibratorInfo
	(*EnumValue)(nil),                            // 24: yamcs.protobuf.mdb.EnumValue
	(*ParameterTypeInfo)(nil),                    // 25: yamcs.protobuf.mdb.ParameterTypeInfo
	(*NumberFormatTypeInfo)(nil),                 // 26: yamcs.protobuf.mdb.NumberFormatTypeInfo
	(*GetContainerRequest)(nil),                  // 27: yamcs.protobuf.mdb.GetContainerRequest
	(*GetParameterTypeRequest)(nil),              // 28: yamcs.protobuf.mdb.GetParameterTypeRequest
	(*AbsoluteTimeInfo)(nil),                     // 29: yamcs.protobuf.mdb.AbsoluteTimeInfo
	(*MemberInfo)(nil),                           // 30: yamcs.protobuf.mdb.MemberInfo
	(*ArgumentMemberInfo)(nil),                   // 31: yamcs.protobuf.mdb.ArgumentMemberInfo
	(*ParameterDimensionInfo)(nil),               // 32: yamcs.protobuf.mdb.ParameterDimensionInfo
	(*ArrayInfo)(nil),                            // 33: yamcs.protobuf.mdb.ArrayInfo
	(*UsedByInfo)(nil),                           // 34: yamcs.protobuf.mdb.UsedByInfo
	(*ParameterInfo)(nil),                        // 35: yamcs.protobuf.mdb.ParameterInfo
	(*AncillaryDataInfo)(nil),                    // 36: yamcs.protobuf.mdb.AncillaryDataInfo
	(*ArgumentTypeInfo)(nil),                     // 37: yamcs.protobuf.mdb.ArgumentTypeInfo
	(*ArgumentDimensionInfo)(nil),                // 38: yamcs.protobuf.mdb.ArgumentDimensionInfo
	(*ArgumentInfo)(nil),                         // 39: yamcs.protobuf.mdb.ArgumentInfo
	(*ArgumentAssignmentInfo)(nil),               // 40: yamcs.protobuf.mdb.ArgumentAssignmentInfo
	(*SignificanceInfo)(nil),                     // 41: yamcs.protobuf.mdb.SignificanceInfo
	(*ComparisonInfo)(nil),                       // 42: yamcs.protobuf.mdb.ComparisonInfo
	(*TransmissionConstraintInfo)(nil),           // 43: yamcs.protobuf.mdb.TransmissionConstraintInfo
	(*CommandInfo)(nil),                          // 44: yamcs.protobuf.mdb.CommandInfo
	(*VerifierInfo)(nil),                         // 45: yamcs.protobuf.mdb.VerifierInfo
	(*CheckWindowInfo)(nil),                      // 46: yamcs.protobuf.mdb.CheckWindowInfo
	(*RepeatInfo)(nil),                           // 47: yamcs.protobuf.mdb.RepeatInfo
	(*SequenceEntryInfo)(nil),                    // 48: yamcs.protobuf.mdb.SequenceEntryInfo
	(*FixedValueInfo)(nil),                       // 49: yamcs.protobuf.mdb.FixedValueInfo
	(*CommandContainerInfo)(nil),                 // 50: yamcs.protobuf.mdb.CommandContainerInfo
	(*IndirectParameterRefInfo)(nil),             // 51: yamcs.protobuf.mdb.IndirectParameterRefInfo
	(*ContainerInfo)(nil),                        // 52: yamcs.protobuf.mdb.ContainerInfo
	(*InputParameterInfo)(nil),                   // 53: yamcs.protobuf.mdb.InputParameterInfo
	(*OutputParameterInfo)(nil),                  // 54: yamcs.protobuf.mdb.OutputParameterInfo
	(*MathElement)(nil),                          // 55: yamcs.protobuf.mdb.MathElement
	(*AlgorithmInfo)(nil),                        // 56: yamcs.protobuf.mdb.AlgorithmInfo
	(*ListSpaceSystemsRequest)(nil),              // 57: yamcs.protobuf.mdb.ListSpaceSystemsRequest
	(*ListContainersRequest)(nil),                // 58: yamcs.protobuf.mdb.ListContainersRequest
	(*ListParameterTypesRequest)(nil),            // 59: yamcs.protobuf.mdb.ListParameterTypesRequest
	(*ListAlgorithmsRequest)(nil),                // 60: yamcs.protobuf.mdb.ListAlgorithmsRequest
	(*ListCommandsRequest)(nil),                  // 61: yamcs.protobuf.mdb.ListCommandsRequest
	(*GetParameterRequest)(nil),                  // 62: yamcs.protobuf.mdb.GetParameterRequest
	(*ListParametersRequest)(nil),                // 63: yamcs.protobuf.mdb.ListParametersRequest
	(*ListParametersResponse)(nil),               // 64: yamcs.protobuf.mdb.ListParametersResponse
	(*BatchGetParametersRequest)(nil),            // 65: yamcs.protobuf.mdb.BatchGetParametersRequest
	(*BatchGetParametersResponse)(nil),           // 66: yamcs.protobuf.mdb.BatchGetParametersResponse
	(*ListContainersResponse)(nil),               // 67: yamcs.protobuf.mdb.ListContainersResponse
	(*ListParameterTypesResponse)(nil),           // 68: yamcs.protobuf.mdb.ListParameterTypesResponse
	(*ListCommandsResponse)(nil),                 // 69: yamcs.protobuf.mdb.ListCommandsResponse
	(*ListAlgorithmsResponse)(nil),               // 70: yamcs.protobuf.mdb.ListAlgorithmsResponse
	(*GetAlgorithmRequest)(nil),                  // 71: yamcs.protobuf.mdb.GetAlgorithmRequest
	(*CreateParameterRequest)(nil),               // 72: yamcs.protobuf.mdb.CreateParameterRequest
	(*CreateParameterTypeRequest)(nil),           // 73: yamcs.protobuf.mdb.CreateParameterTypeRequest
	(*GetMissionDatabaseRequest)(nil),            // 74: yamcs.protobuf.mdb.GetMissionDatabaseRequest
	(*ExportJavaMissionDatabaseRequest)(nil),     // 75: yamcs.protobuf.mdb.ExportJavaMissionDatabaseRequest
	(*StreamMissionDatabaseRequest)(nil),         // 76: yamcs.protobuf.mdb.StreamMissionDatabaseRequest
	(*MissionDatabaseItem)(nil),                  // 77: yamcs.protobuf.mdb.MissionDatabaseItem
	(*ListSpaceSystemsResponse)(nil),             // 78: yamcs.protobuf.mdb.ListSpaceSystemsResponse
	(*GetSpaceSystemRequest)(nil),                // 79: yamcs.protobuf.mdb.GetSpaceSystemRequest
	(*ExportXtceRequest)(nil),                    // 80: yamcs.protobuf.mdb.ExportXtceRequest
	(*GetCommandRequest)(nil),                    // 81: yamcs.protobuf.mdb.GetCommandRequest
	(*SpaceSystemInfo)(nil),                      // 82: yamcs.protobuf.mdb.SpaceSystemInfo
	(*SplineCalibratorInfo_SplinePointInfo)(nil), // 83: yamcs.protobuf.mdb.SplineCalibratorInfo.SplinePointInfo
	nil, // 84: yamcs.protobuf.mdb.ParameterTypeInfo.AncillaryDataEntry
	nil, // 85: yamcs.protobuf.mdb.ParameterInfo.AncillaryDataEntry
	nil, // 86: yamcs.protobuf.mdb.CommandInfo.AncillaryDataEntry
	nil, // 87: yamcs.protobuf.mdb.ContainerInfo.AncillaryDataEntry
	(*BatchGetParametersResponse_GetParameterResponse)(nil), // 88: yamcs.protobuf.mdb.BatchGetParametersResponse.GetParameterResponse
	nil,                            // 89: yamcs.protobuf.mdb.CreateParameterRequest.AliasesEntry
	nil,                            // 90: yamcs.protobuf.mdb.CreateParameterTypeRequest.AliasesEntry
	nil,                            // 91: yamcs.protobuf.mdb.SpaceSystemInfo.AncillaryDataEntry
	(*protobuf.NamedObjectId)(nil), // 92: yamcs.protobuf.NamedObjectId
	(*api.HttpBody)(nil),           // 93: yamcs.api.HttpBody
}
var file_yamcs_protobuf_mdb_mdb_proto_depIdxs = []int32{
	82,  // 0: yamcs.protobuf.mdb.MissionDatabase.spaceSystem:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo
	82,  // 1: yamcs.protobuf.mdb.MissionDatabase.spaceSystems:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo
	1,   // 2: yamcs.protobuf.mdb.AlarmRange.level:type_name -> yamcs.protobuf.mdb.AlarmLevelType
	1,   // 3: yamcs.protobuf.mdb.EnumerationAlarm.level:type_name -> yamcs.protobuf.mdb.AlarmLevelType
	14,  // 4: yamcs.protobuf.mdb.AlarmInfo.staticAlarmRange:type_name -> yamcs.protobuf.mdb.AlarmRange
	14,  // 5: yamcs.protobuf.mdb.AlarmInfo.staticAlarmRanges:type_name -> yamcs.protobuf.mdb.AlarmRange
	15,  // 6: yamcs.protobuf.mdb.AlarmInfo.enumerationAlarm:type_name -> yamcs.protobuf.mdb.EnumerationAlarm
	15,  // 7: yamcs.protobuf.mdb.AlarmInfo.enumerationAlarms:type_name -> yamcs.protobuf.mdb.EnumerationAlarm
	1,   // 8: yamcs.protobuf.mdb.AlarmInfo.defaultLevel:type_name -> yamcs.protobuf.mdb.AlarmLevelType
	42,  // 9: yamcs.protobuf.mdb.ContextAlarmInfo.comparison:type_name -> yamcs.protobuf.mdb.ComparisonInfo
	16,  // 10: yamcs.protobuf.mdb.ContextAlarmInfo.alarm:type_name -> yamcs.protobuf.mdb.AlarmInfo
	2,   // 11: yamcs.protobuf.mdb.DataEncodingInfo.type:type_name -> yamcs.protobuf.mdb.DataEncodingInfo.Type
	20,  // 12: yamcs.protobuf.mdb.DataEncodingInfo.defaultCalibrator:type_name -> yamcs.protobuf.mdb.CalibratorInfo
	19,  // 13: yamcs.protobuf.mdb.DataEncodingInfo.contextCalibrator:type_name -> yamcs.protobuf.mdb.ContextCalibratorInfo
	19,  // 14: yamcs.protobuf.mdb.DataEncodingInfo.contextCalibrators:type_name -> yamcs.protobuf.mdb.ContextCalibratorInfo
	42,  // 15: yamcs.protobuf.mdb.ContextCalibratorInfo.comparison:type_name -> yamcs.protobuf.mdb.ComparisonInfo
	20,  // 16: yamcs.protobuf.mdb.ContextCalibratorInfo.calibrator:type_name -> yamcs.protobuf.mdb.CalibratorInfo
	21,  // 17: yamcs.protobuf.mdb.CalibratorInfo.polynomialCalibrator:type_name -> yamcs.protobuf.mdb.PolynomialCalibratorInfo
	22,  // 18: yamcs.protobuf.mdb.CalibratorInfo.splineCalibrator:type_name -> yamcs.protobuf.mdb.SplineCalibratorInfo
	23,  // 19: yamcs.protobuf.mdb.CalibratorInfo.javaExpressionCalibrator:type_name -> yamcs.protobuf.mdb.JavaExpressionCalibratorInfo
	3,   // 20: yamcs.protobuf.mdb.CalibratorInfo.type:type_name -> yamcs.protobuf.mdb.CalibratorInfo.Type
	83,  // 21: yamcs.protobuf.mdb.SplineCalibratorInfo.point:type_name -> yamcs.protobuf.mdb.SplineCalibratorInfo.SplinePointInfo
	83,  // 22: yamcs.protobuf.mdb.SplineCalibratorInfo.points:type_name -> yamcs.protobuf.mdb.SplineCalibratorInfo.SplinePointInfo
	92,  // 23: yamcs.protobuf.mdb.ParameterTypeInfo.alias:type_name -> yamcs.protobuf.NamedObjectId
	18,  // 24: yamcs.protobuf.mdb.ParameterTypeInfo.dataEncoding:type_name -> yamcs.protobuf.mdb.DataEncodingInfo
	13,  // 25: yamcs.protobuf.mdb.ParameterTypeInfo.unitSet:type_name -> yamcs.protobuf.mdb.UnitInfo
	16,  // 26: yamcs.protobuf.mdb.ParameterTypeInfo.defaultAlarm:type_name -> yamcs.protobuf.mdb.AlarmInfo
	24,  // 27: yamcs.protobuf.mdb.ParameterTypeInfo.enumValue:type_name -> yamcs.protobuf.mdb.EnumValue
	29,  // 28: yamcs.protobuf.mdb.ParameterTypeInfo.absoluteTimeInfo:type_name -> yamcs.protobuf.mdb.AbsoluteTimeInfo
	17,  // 29: yamcs.protobuf.mdb.ParameterTypeInfo.contextAlarm:type_name -> yamcs.protobuf.mdb.ContextAlarmInfo
	30,  // 30: yamcs.protobuf.mdb.ParameterTypeInfo.member:type_name -> yamcs.protobuf.mdb.MemberInfo
	33,  // 31: yamcs.protobuf.mdb.ParameterTypeInfo.arrayInfo:type_name -> yamcs.protobuf.mdb.ArrayInfo
	84,  // 32: yamcs.protobuf.mdb.ParameterTypeInfo.ancillaryData:type_name -> yamcs.protobuf.mdb.ParameterTypeInfo.AncillaryDataEntry
	26,  // 33: yamcs.protobuf.mdb.ParameterTypeInfo.numberFormat:type_name -> yamcs.protobuf.mdb.NumberFormatTypeInfo
	35,  // 34: yamcs.protobuf.mdb.ParameterTypeInfo.usedBy:type_name -> yamcs.protobuf.mdb.ParameterInfo
	35,  // 35: yamcs.protobuf.mdb.AbsoluteTimeInfo.offsetFrom:type_name -> yamcs.protobuf.mdb.ParameterInfo
	92,  // 36: yamcs.protobuf.mdb.MemberInfo.alias:type_name -> yamcs.protobuf.NamedObjectId
	25,  // 37: yamcs.protobuf.mdb.MemberInfo.type:type_name -> yamcs.protobuf.mdb.ParameterTypeInfo
	92,  // 38: yamcs.protobuf.mdb.ArgumentMemberInfo.alias:type_name -> yamcs.protobuf.NamedObjectId
	37,  // 39: yamcs.protobuf.mdb.ArgumentMemberInfo.type:type_name -> yamcs.protobuf.mdb.ArgumentTypeInfo
	35,  // 40: yamcs.protobuf.mdb.ParameterDimensionInfo.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	25,  // 41: yamcs.protobuf.mdb.ArrayInfo.type:type_name -> yamcs.protobuf.mdb.ParameterTypeInfo
	32,  // 42: yamcs.protobuf.mdb.ArrayInfo.dimensions:type_name -> yamcs.protobuf.mdb.ParameterDimensionInfo
	56,  // 43: yamcs.protobuf.mdb.UsedByInfo.algorithm:type_name -> yamcs.protobuf.mdb.AlgorithmInfo
	52,  // 44: yamcs.protobuf.mdb.UsedByInfo.container:type_name -> yamcs.protobuf.mdb.ContainerInfo
	92,  // 45: yamcs.protobuf.mdb.ParameterInfo.alias:type_name -> yamcs.protobuf.NamedObjectId
	25,  // 46: yamcs.protobuf.mdb.ParameterInfo.type:type_name -> yamcs.protobuf.mdb.ParameterTypeInfo
	0,   // 47: yamcs.protobuf.mdb.ParameterInfo.dataSource:type_name -> yamcs.protobuf.mdb.DataSourceType
	34,  // 48: yamcs.protobuf.mdb.ParameterInfo.usedBy:type_name -> yamcs.protobuf.mdb.UsedByInfo
	85,  // 49: yamcs.protobuf.mdb.ParameterInfo.ancillaryData:type_name -> yamcs.protobuf.mdb.ParameterInfo.AncillaryDataEntry
	18,  // 50: yamcs.protobuf.mdb.ArgumentTypeInfo.dataEncoding:type_name -> yamcs.protobuf.mdb.DataEncodingInfo
	13,  // 51: yamcs.protobuf.mdb.ArgumentTypeInfo.unitSet:type_name -> yamcs.protobuf.mdb.UnitInfo
	24,  // 52: yamcs.protobuf.mdb.ArgumentTypeInfo.enumValue:type_name -> yamcs.protobuf.mdb.EnumValue
	31,  // 53: yamcs.protobuf.mdb.ArgumentTypeInfo.member:type_name -> yamcs.protobuf.mdb.ArgumentMemberInfo
	38,  // 54: yamcs.protobuf.mdb.ArgumentTypeInfo.dimensions:type_name -> yamcs.protobuf.mdb.ArgumentDimensionInfo
	37,  // 55: yamcs.protobuf.mdb.ArgumentTypeInfo.elementType:type_name -> yamcs.protobuf.mdb.ArgumentTypeInfo
	35,  // 56: yamcs.protobuf.mdb.ArgumentDimensionInfo.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	37,  // 57: yamcs.protobuf.mdb.ArgumentInfo.type:type_name -> yamcs.protobuf.mdb.ArgumentTypeInfo
	4,   // 58: yamcs.protobuf.mdb.SignificanceInfo.consequenceLevel:type_name -> yamcs.protobuf.mdb.SignificanceInfo.SignificanceLevelType
	35,  // 59: yamcs.protobuf.mdb.ComparisonInfo.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	5,   // 60: yamcs.protobuf.mdb.ComparisonInfo.operator:type_name -> yamcs.protobuf.mdb.ComparisonInfo.OperatorType
	39,  // 61: yamcs.protobuf.mdb.ComparisonInfo.argument:type_name -> yamcs.protobuf.mdb.ArgumentInfo
	92,  // 62: yamcs.protobuf.mdb.CommandInfo.alias:type_name -> yamcs.protobuf.NamedObjectId
	44,  // 63: yamcs.protobuf.mdb.CommandInfo.baseCommand:type_name -> yamcs.protobuf.mdb.CommandInfo
	39,  // 64: yamcs.protobuf.mdb.CommandInfo.argument:type_name -> yamcs.protobuf.mdb.ArgumentInfo
	40,  // 65: yamcs.protobuf.mdb.CommandInfo.argumentAssignment:type_name -> yamcs.protobuf.mdb.ArgumentAssignmentInfo
	41,  // 66: yamcs.protobuf.mdb.CommandInfo.significance:type_name -> yamcs.protobuf.mdb.SignificanceInfo
	43,  // 67: yamcs.protobuf.mdb.CommandInfo.constraint:type_name -> yamcs.protobuf.mdb.TransmissionConstraintInfo
	50,  // 68: yamcs.protobuf.mdb.CommandInfo.commandContainer:type_name -> yamcs.protobuf.mdb.CommandContainerInfo
	45,  // 69: yamcs.protobuf.mdb.CommandInfo.verifier:type_name -> yamcs.protobuf.mdb.VerifierInfo
	86,  // 70: yamcs.protobuf.mdb.CommandInfo.ancillaryData:type_name -> yamcs.protobuf.mdb.CommandInfo.AncillaryDataEntry
	41,  // 71: yamcs.protobuf.mdb.CommandInfo.effectiveSignificance:type_name -> yamcs.protobuf.mdb.SignificanceInfo
	52,  // 72: yamcs.protobuf.mdb.VerifierInfo.container:type_name -> yamcs.protobuf.mdb.ContainerInfo
	56,  // 73: yamcs.protobuf.mdb.VerifierInfo.algorithm:type_name -> yamcs.protobuf.mdb.AlgorithmInfo
	6,   // 74: yamcs.protobuf.mdb.VerifierInfo.onSuccess:type_name -> yamcs.protobuf.mdb.VerifierInfo.TerminationActionType
	6,   // 75: yamcs.protobuf.mdb.VerifierInfo.onFail:type_name -> yamcs.protobuf.mdb.VerifierInfo.TerminationActionType
	6,   // 76: yamcs.protobuf.mdb.VerifierInfo.onTimeout:type_name -> yamcs.protobuf.mdb.VerifierInfo.TerminationActionType
	46,  // 77: yamcs.protobuf.mdb.VerifierInfo.checkWindow:type_name -> yamcs.protobuf.mdb.CheckWindowInfo
	35,  // 78: yamcs.protobuf.mdb.RepeatInfo.dynamicCount:type_name -> yamcs.protobuf.mdb.ParameterInfo
	7,   // 79: yamcs.protobuf.mdb.SequenceEntryInfo.referenceLocation:type_name -> yamcs.protobuf.mdb.SequenceEntryInfo.ReferenceLocationType
	52,  // 80: yamcs.protobuf.mdb.SequenceEntryInfo.container:type_name -> yamcs.protobuf.mdb.ContainerInfo
	35,  // 81: yamcs.protobuf.mdb.SequenceEntryInfo.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	39,  // 82: yamcs.protobuf.mdb.SequenceEntryInfo.argument:type_name -> yamcs.protobuf.mdb.ArgumentInfo
	49,  // 83: yamcs.protobuf.mdb.SequenceEntryInfo.fixedValue:type_name -> yamcs.protobuf.mdb.FixedValueInfo
	47,  // 84: yamcs.protobuf.mdb.SequenceEntryInfo.repeat:type_name -> yamcs.protobuf.mdb.RepeatInfo
	51,  // 85: yamcs.protobuf.mdb.SequenceEntryInfo.indirectParameterRef:type_name -> yamcs.protobuf.mdb.IndirectParameterRefInfo
	92,  // 86: yamcs.protobuf.mdb.CommandContainerInfo.alias:type_name -> yamcs.protobuf.NamedObjectId
	50,  // 87: yamcs.protobuf.mdb.CommandContainerInfo.baseContainer:type_name -> yamcs.protobuf.mdb.CommandContainerInfo
	48,  // 88: yamcs.protobuf.mdb.CommandContainerInfo.entry:type_name -> yamcs.protobuf.mdb.SequenceEntryInfo
	35,  // 89: yamcs.protobuf.mdb.IndirectParameterRefInfo.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	92,  // 90: yamcs.protobuf.mdb.ContainerInfo.alias:type_name -> yamcs.protobuf.NamedObjectId
	52,  // 91: yamcs.protobuf.mdb.ContainerInfo.baseContainer:type_name -> yamcs.protobuf.mdb.ContainerInfo
	42,  // 92: yamcs.protobuf.mdb.ContainerInfo.restrictionCriteria:type_name -> yamcs.protobuf.mdb.ComparisonInfo
	48,  // 93: yamcs.protobuf.mdb.ContainerInfo.entry:type_name -> yamcs.protobuf.mdb.SequenceEntryInfo
	34,  // 94: yamcs.protobuf.mdb.ContainerInfo.usedBy:type_name -> yamcs.protobuf.mdb.UsedByInfo
	87,  // 95: yamcs.protobuf.mdb.ContainerInfo.ancillaryData:type_name -> yamcs.protobuf.mdb.ContainerInfo.AncillaryDataEntry
	35,  // 96: yamcs.protobuf.mdb.InputParameterInfo.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	39,  // 97: yamcs.protobuf.mdb.InputParameterInfo.argument:type_name -> yamcs.protobuf.mdb.ArgumentInfo
	35,  // 98: yamcs.protobuf.mdb.OutputParameterInfo.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	8,   // 99: yamcs.protobuf.mdb.MathElement.type:type_name -> yamcs.protobuf.mdb.MathElement.Type
	35,  // 100: yamcs.protobuf.mdb.MathElement.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	92,  // 101: yamcs.protobuf.mdb.AlgorithmInfo.alias:type_name -> yamcs.protobuf.NamedObjectId
	10,  // 102: yamcs.protobuf.mdb.AlgorithmInfo.scope:type_name -> yamcs.protobuf.mdb.AlgorithmInfo.Scope
	9,   // 103: yamcs.protobuf.mdb.AlgorithmInfo.type:type_name -> yamcs.protobuf.mdb.AlgorithmInfo.Type
	53,  // 104: yamcs.protobuf.mdb.AlgorithmInfo.inputParameter:type_name -> yamcs.protobuf.mdb.InputParameterInfo
	54,  // 105: yamcs.protobuf.mdb.AlgorithmInfo.outputParameter:type_name -> yamcs.protobuf.mdb.OutputParameterInfo
	35,  // 106: yamcs.protobuf.mdb.AlgorithmInfo.onParameterUpdate:type_name -> yamcs.protobuf.mdb.ParameterInfo
	55,  // 107: yamcs.protobuf.mdb.AlgorithmInfo.mathElements:type_name -> yamcs.protobuf.mdb.MathElement
	10,  // 108: yamcs.protobuf.mdb.ListAlgorithmsRequest.scope:type_name -> yamcs.protobuf.mdb.AlgorithmInfo.Scope
	0,   // 109: yamcs.protobuf.mdb.ListParametersRequest.source:type_name -> yamcs.protobuf.mdb.DataSourceType
	82,  // 110: yamcs.protobuf.mdb.ListParametersResponse.systems:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo
	35,  // 111: yamcs.protobuf.mdb.ListParametersResponse.parameters:type_name -> yamcs.protobuf.mdb.ParameterInfo
	92,  // 112: yamcs.protobuf.mdb.BatchGetParametersRequest.id:type_name -> yamcs.protobuf.NamedObjectId
	88,  // 113: yamcs.protobuf.mdb.BatchGetParametersResponse.response:type_name -> yamcs.protobuf.mdb.BatchGetParametersResponse.GetParameterResponse
	82,  // 114: yamcs.protobuf.mdb.ListContainersResponse.systems:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo
	52,  // 115: yamcs.protobuf.mdb.ListContainersResponse.containers:type_name -> yamcs.protobuf.mdb.ContainerInfo
	82,  // 116: yamcs.protobuf.mdb.ListParameterTypesResponse.systems:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo
	25,  // 117: yamcs.protobuf.mdb.ListParameterTypesResponse.parameterTypes:type_name -> yamcs.protobuf.mdb.ParameterTypeInfo
	82,  // 118: yamcs.protobuf.mdb.ListCommandsResponse.systems:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo
	44,  // 119: yamcs.protobuf.mdb.ListCommandsResponse.commands:type_name -> yamcs.protobuf.mdb.CommandInfo
	82,  // 120: yamcs.protobuf.mdb.ListAlgorithmsResponse.systems:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo
	56,  // 121: yamcs.protobuf.mdb.ListAlgorithmsResponse.algorithms:type_name -> yamcs.protobuf.mdb.AlgorithmInfo
	89,  // 122: yamcs.protobuf.mdb.CreateParameterRequest.aliases:type_name -> yamcs.protobuf.mdb.CreateParameterRequest.AliasesEntry
	0,   // 123: yamcs.protobuf.mdb.CreateParameterRequest.dataSource:type_name -> yamcs.protobuf.mdb.DataSourceType
	90,  // 124: yamcs.protobuf.mdb.CreateParameterTypeRequest.aliases:type_name -> yamcs.protobuf.mdb.CreateParameterTypeRequest.AliasesEntry
	16,  // 125: yamcs.protobuf.mdb.CreateParameterTypeRequest.defaultAlarm:type_name -> yamcs.protobuf.mdb.AlarmInfo
	17,  // 126: yamcs.protobuf.mdb.CreateParameterTypeRequest.contextAlarms:type_name -> yamcs.protobuf.mdb.ContextAlarmInfo
	24,  // 127: yamcs.protobuf.mdb.CreateParameterTypeRequest.enumerationValues:type_name -> yamcs.protobuf.mdb.EnumValue
	82,  // 128: yamcs.protobuf.mdb.MissionDatabaseItem.spaceSystem:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo
	52,  // 129: yamcs.protobuf.mdb.MissionDatabaseItem.container:type_name -> yamcs.protobuf.mdb.ContainerInfo
	35,  // 130: yamcs.protobuf.mdb.MissionDatabaseItem.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	25,  // 131: yamcs.protobuf.mdb.MissionDatabaseItem.parameterType:type_name -> yamcs.protobuf.mdb.ParameterTypeInfo
	44,  // 132: yamcs.protobuf.mdb.MissionDatabaseItem.command:type_name -> yamcs.protobuf.mdb.CommandInfo
	56,  // 133: yamcs.protobuf.mdb.MissionDatabaseItem.algorithm:type_name -> yamcs.protobuf.mdb.AlgorithmInfo
	82,  // 134: yamcs.protobuf.mdb.ListSpaceSystemsResponse.spaceSystems:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo
	92,  // 135: yamcs.protobuf.mdb.SpaceSystemInfo.alias:type_name -> yamcs.protobuf.NamedObjectId
	12,  // 136: yamcs.protobuf.mdb.SpaceSystemInfo.history:type_name -> yamcs.protobuf.mdb.HistoryInfo
	82,  // 137: yamcs.protobuf.mdb.SpaceSystemInfo.sub:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo
	91,  // 138: yamcs.protobuf.mdb.SpaceSystemInfo.ancillaryData:type_name -> yamcs.protobuf.mdb.SpaceSystemInfo.AncillaryDataEntry
	36,  // 139: yamcs.protobuf.mdb.ParameterTypeInfo.AncillaryDataEntry.value:type_name -> yamcs.protobuf.mdb.AncillaryDataInfo
	36,  // 140: yamcs.protobuf.mdb.ParameterInfo.AncillaryDataEntry.value:type_name -> yamcs.protobuf.mdb.AncillaryDataInfo
	36,  // 141: yamcs.protobuf.mdb.CommandInfo.AncillaryDataEntry.value:type_name -> yamcs.protobuf.mdb.AncillaryDataInfo
	36,  // 142: yamcs.protobuf.mdb.ContainerInfo.AncillaryDataEntry.value:type_name -> yamcs.protobuf.mdb.AncillaryDataInfo
	92,  // 143: yamcs.protobuf.mdb.BatchGetParametersResponse.GetParameterResponse.id:type_name -> yamcs.protobuf.NamedObjectId
	35,  // 144: yamcs.protobuf.mdb.BatchGetParametersResponse.GetParameterResponse.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	36,  // 145: yamcs.protobuf.mdb.SpaceSystemInfo.AncillaryDataEntry.value:type_name -> yamcs.protobuf.mdb.AncillaryDataInfo
	74,  // 146: yamcs.protobuf.mdb.MdbApi.GetMissionDatabase:input_type -> yamcs.protobuf.mdb.GetMissionDatabaseRequest
	75,  // 147: yamcs.protobuf.mdb.MdbApi.ExportJavaMissionDatabase:input_type -> yamcs.protobuf.mdb.ExportJavaMissionDatabaseRequest
	57,  // 148: yamcs.protobuf.mdb.MdbApi.ListSpaceSystems:input_type -> yamcs.protobuf.mdb.ListSpaceSystemsRequest
	79,  // 149: yamcs.protobuf.mdb.MdbApi.GetSpaceSystem:input_type -> yamcs.protobuf.mdb.GetSpaceSystemRequest
	80,  // 150: yamcs.protobuf.mdb.MdbApi.ExportXtce:input_type -> yamcs.protobuf.mdb.ExportXtceRequest
	76,  // 151: yamcs.protobuf.mdb.MdbApi.StreamMissionDatabase:input_type -> yamcs.protobuf.mdb.StreamMissionDatabaseRequest
	63,  // 152: yamcs.protobuf.mdb.MdbApi.ListParameters:input_type -> yamcs.protobuf.mdb.ListParametersRequest
	62,  // 153: yamcs.protobuf.mdb.MdbApi.GetParameter:input_type -> yamcs.protobuf.mdb.GetParameterRequest
	72,  // 154: yamcs.protobuf.mdb.MdbApi.CreateParameter:input_type -> yamcs.protobuf.mdb.CreateParameterRequest
	65,  // 155: yamcs.protobuf.mdb.MdbApi.BatchGetParameters:input_type -> yamcs.protobuf.mdb.BatchGetParametersRequest
	59,  // 156: yamcs.protobuf.mdb.MdbApi.ListParameterTypes:input_type -> yamcs.protobuf.mdb.ListParameterTypesRequest
	28,  // 157: yamcs.protobuf.mdb.MdbApi.GetParameterType:input_type -> yamcs.protobuf.mdb.GetParameterTypeRequest
	73,  // 158: yamcs.protobuf.mdb.MdbApi.CreateParameterType:input_type -> yamcs.protobuf.mdb.CreateParameterTypeRequest
	58,  // 159: yamcs.protobuf.mdb.MdbApi.ListContainers:input_type -> yamcs.protobuf.mdb.ListContainersRequest
	27,  // 160: yamcs.protobuf.mdb.MdbApi.GetContainer:input_type -> yamcs.protobuf.mdb.GetContainerRequest
	61,  // 161: yamcs.protobuf.mdb.MdbApi.ListCommands:input_type -> yamcs.protobuf.mdb.ListCommandsRequest
	81,  // 162: yamcs.protobuf.mdb.MdbApi.GetCommand:input_type -> yamcs.protobuf.mdb.GetCommandRequest
	60,  // 163: yamcs.protobuf.mdb.MdbApi.ListAlgorithms:input_type -> yamcs.protobuf.mdb.ListAlgorithmsRequest
	71,  // 164: yamcs.protobuf.mdb.MdbApi.GetAlgorithm:input_type -> yamcs.protobuf.mdb.GetAlgorithmRequest
	11,  // 165: yamcs.protobuf.mdb.MdbApi.GetMissionDatabase:output_type -> yamcs.protobuf.mdb.MissionDatabase
	93,  // 166: yamcs.protobuf.mdb.MdbApi.ExportJavaMissionDatabase:output_type -> yamcs.api.HttpBody
	78,  // 167: yamcs.protobuf.mdb.MdbApi.ListSpaceSystems:output_type -> yamcs.protobuf.mdb.ListSpaceSystemsResponse
	82,  // 168: yamcs.protobuf.mdb.MdbApi.GetSpaceSystem:output_type -> yamcs.protobuf.mdb.SpaceSystemInfo
	93,  // 169: yamcs.protobuf.mdb.MdbApi.ExportXtce:output_type -> yamcs.api.HttpBody
	77,  // 170: yamcs.protobuf.mdb.MdbApi.StreamMissionDatabase:output_type -> yamcs.protobuf.mdb.MissionDatabaseItem
	64,  // 171: yamcs.protobuf.mdb.MdbApi.ListParameters:output_type -> yamcs.protobuf.mdb.ListParametersResponse
	35,  // 172: yamcs.protobuf.mdb.MdbApi.GetParameter:output_type -> yamcs.protobuf.mdb.ParameterInfo
	35,  // 173: yamcs.protobuf.mdb.MdbApi.CreateParameter:output_type -> yamcs.protobuf.mdb.ParameterInfo
	66,  // 174: yamcs.protobuf.mdb.MdbApi.BatchGetParameters:output_type -> yamcs.protobuf.mdb.BatchGetParametersResponse
	68,  // 175: yamcs.protobuf.mdb.MdbApi.ListParameterTypes:output_type -> yamcs.protobuf.mdb.ListParameterTypesResponse
	25,  // 176: yamcs.protobuf.mdb.MdbApi.GetParameterType:output_type -> yamcs.protobuf.mdb.ParameterTypeInfo
	25,  // 177: yamcs.protobuf.mdb.MdbApi.CreateParameterType:output_type -> yamcs.protobuf.mdb.ParameterTypeInfo
	67,  // 178: yamcs.protobuf.mdb.MdbApi.ListContainers:output_type -> yamcs.protobuf.mdb.ListContainersResponse
	52,  // 179: yamcs.protobuf.mdb.MdbApi.GetContainer:output_type -> yamcs.protobuf.mdb.ContainerInfo
	69,  // 180: yamcs.protobuf.mdb.MdbApi.ListCommands:output_type -> yamcs.protobuf.mdb.ListCommandsResponse
	44,  // 181: yamcs.protobuf.mdb.MdbApi.GetCommand:output_type -> yamcs.protobuf.mdb.CommandInfo
	70,  // 182: yamcs.protobuf.mdb.MdbApi.ListAlgorithms:output_type -> yamcs.protobuf.mdb.ListAlgorithmsResponse
	56,  // 183: yamcs.protobuf.mdb.MdbApi.GetAlgorithm:output_type -> yamcs.protobuf.mdb.AlgorithmInfo
	165, // [165:184] is the sub-list for method output_type
	146, // [146:165] is the sub-list for method input_type
	146, // [146:146] is the sub-list for extension type_name
	146, // [146:146] is the sub-list for extension extendee
	0,   // [0:146] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_mdb_mdb_proto_init() }
func file_yamcs_protobuf_mdb_mdb_proto_init() {
	if File_yamcs_protobuf_mdb_mdb_proto != nil {
		return
	}
	file_yamcs_protobuf_mdb_mdb_proto_msgTypes[66].OneofWrappers = []any{
		(*MissionDatabaseItem_SpaceSystem)(nil),
		(*MissionDatabaseItem_Container)(nil),
		(*MissionDatabaseItem_Parameter)(nil),
		(*MissionDatabaseItem_ParameterType)(nil),
		(*MissionDatabaseItem_Command)(nil),
		(*MissionDatabaseItem_Algorithm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_mdb_mdb_proto_rawDesc), len(file_yamcs_protobuf_mdb_mdb_proto_rawDesc)),
			NumEnums:      11,
			NumMessages:   81,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_mdb_mdb_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_mdb_mdb_proto_depIdxs,
		EnumInfos:         file_yamcs_protobuf_mdb_mdb_proto_enumTypes,
		MessageInfos:      file_yamcs_protobuf_mdb_mdb_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_mdb_mdb_proto = out.File
	file_yamcs_protobuf_mdb_mdb_proto_goTypes = nil
	file_yamcs_protobuf_mdb_mdb_proto_depIdxs = nil
}
