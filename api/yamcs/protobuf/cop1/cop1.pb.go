// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/cop1/cop1.proto

package cop1

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InitializationType int32

const (
	// CLCW will be expected from the remote system and used to initiate the vS
	InitializationType_WITH_CLCW_CHECK InitializationType = 1
	// Initiate without waiting for CLCW
	InitializationType_WITHOUT_CLCW_CHECK InitializationType = 2
	// This causes a BC Unlock frame to be sent to the remote system.
	InitializationType_UNLOCK InitializationType = 3
	// Initiate AD with set V(R). This will cause a BC frame to be sent to the remote system
	InitializationType_SET_VR InitializationType = 4
)

// Enum value maps for InitializationType.
var (
	InitializationType_name = map[int32]string{
		1: "WITH_CLCW_CHECK",
		2: "WITHOUT_CLCW_CHECK",
		3: "UNLOCK",
		4: "SET_VR",
	}
	InitializationType_value = map[string]int32{
		"WITH_CLCW_CHECK":    1,
		"WITHOUT_CLCW_CHECK": 2,
		"UNLOCK":             3,
		"SET_VR":             4,
	}
)

func (x InitializationType) Enum() *InitializationType {
	p := new(InitializationType)
	*p = x
	return p
}

func (x InitializationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitializationType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_cop1_cop1_proto_enumTypes[0].Descriptor()
}

func (InitializationType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_cop1_cop1_proto_enumTypes[0]
}

func (x InitializationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *InitializationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = InitializationType(num)
	return nil
}

// Deprecated: Use InitializationType.Descriptor instead.
func (InitializationType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{0}
}

type Cop1State int32

const (
	Cop1State_ACTIVE                  Cop1State = 1
	Cop1State_RETRANSMIT_WITHOUT_WAIT Cop1State = 2
	Cop1State_RETRANSMIT_WITH_WAIT    Cop1State = 3
	Cop1State_INITIALIZING_WITHOUT_BC Cop1State = 4
	Cop1State_INITIALIZING_WITH_BC    Cop1State = 5
	Cop1State_UNINITIALIZED           Cop1State = 6
	Cop1State_SUSPENDED               Cop1State = 7
)

// Enum value maps for Cop1State.
var (
	Cop1State_name = map[int32]string{
		1: "ACTIVE",
		2: "RETRANSMIT_WITHOUT_WAIT",
		3: "RETRANSMIT_WITH_WAIT",
		4: "INITIALIZING_WITHOUT_BC",
		5: "INITIALIZING_WITH_BC",
		6: "UNINITIALIZED",
		7: "SUSPENDED",
	}
	Cop1State_value = map[string]int32{
		"ACTIVE":                  1,
		"RETRANSMIT_WITHOUT_WAIT": 2,
		"RETRANSMIT_WITH_WAIT":    3,
		"INITIALIZING_WITHOUT_BC": 4,
		"INITIALIZING_WITH_BC":    5,
		"UNINITIALIZED":           6,
		"SUSPENDED":               7,
	}
)

func (x Cop1State) Enum() *Cop1State {
	p := new(Cop1State)
	*p = x
	return p
}

func (x Cop1State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Cop1State) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_cop1_cop1_proto_enumTypes[1].Descriptor()
}

func (Cop1State) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_cop1_cop1_proto_enumTypes[1]
}

func (x Cop1State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Cop1State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Cop1State(num)
	return nil
}

// Deprecated: Use Cop1State.Descriptor instead.
func (Cop1State) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{1}
}

type TimeoutType int32

const (
	TimeoutType_UNINITIALIZE TimeoutType = 0
	TimeoutType_SUSPEND      TimeoutType = 1
)

// Enum value maps for TimeoutType.
var (
	TimeoutType_name = map[int32]string{
		0: "UNINITIALIZE",
		1: "SUSPEND",
	}
	TimeoutType_value = map[string]int32{
		"UNINITIALIZE": 0,
		"SUSPEND":      1,
	}
)

func (x TimeoutType) Enum() *TimeoutType {
	p := new(TimeoutType)
	*p = x
	return p
}

func (x TimeoutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeoutType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_cop1_cop1_proto_enumTypes[2].Descriptor()
}

func (TimeoutType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_cop1_cop1_proto_enumTypes[2]
}

func (x TimeoutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TimeoutType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TimeoutType(num)
	return nil
}

// Deprecated: Use TimeoutType.Descriptor instead.
func (TimeoutType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{2}
}

type InitializeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Link name.
	Link *string             `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	Type *InitializationType `protobuf:"varint,3,opt,name=type,enum=yamcs.protobuf.cop1.InitializationType" json:"type,omitempty"`
	// Timeout in milliseconds for initialize with CLCW check
	ClcwCheckInitializeTimeout *uint64 `protobuf:"varint,4,opt,name=clcwCheckInitializeTimeout" json:"clcwCheckInitializeTimeout,omitempty"`
	// vR value for initialize with set V(R)
	VR            *uint32 `protobuf:"varint,5,opt,name=vR" json:"vR,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitializeRequest) Reset() {
	*x = InitializeRequest{}
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequest) ProtoMessage() {}

func (x *InitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequest.ProtoReflect.Descriptor instead.
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{0}
}

func (x *InitializeRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *InitializeRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *InitializeRequest) GetType() InitializationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return InitializationType_WITH_CLCW_CHECK
}

func (x *InitializeRequest) GetClcwCheckInitializeTimeout() uint64 {
	if x != nil && x.ClcwCheckInitializeTimeout != nil {
		return *x.ClcwCheckInitializeTimeout
	}
	return 0
}

func (x *InitializeRequest) GetVR() uint32 {
	if x != nil && x.VR != nil {
		return *x.VR
	}
	return 0
}

type UpdateConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Link name.
	Link          *string     `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	Cop1Config    *Cop1Config `protobuf:"bytes,3,opt,name=cop1Config" json:"cop1Config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConfigRequest) Reset() {
	*x = UpdateConfigRequest{}
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigRequest) ProtoMessage() {}

func (x *UpdateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateConfigRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *UpdateConfigRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *UpdateConfigRequest) GetCop1Config() *Cop1Config {
	if x != nil {
		return x.Cop1Config
	}
	return nil
}

type GetConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Link name.
	Link          *string `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{2}
}

func (x *GetConfigRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetConfigRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

type GetStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Link name.
	Link          *string `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{3}
}

func (x *GetStatusRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetStatusRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

type ResumeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Link name.
	Link          *string `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeRequest) Reset() {
	*x = ResumeRequest{}
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeRequest) ProtoMessage() {}

func (x *ResumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeRequest.ProtoReflect.Descriptor instead.
func (*ResumeRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{4}
}

func (x *ResumeRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ResumeRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

type DisableRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Link name.
	Link *string `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	// If true, all transmitted frames while COP1 is disabled, have the bypass flag set
	SetBypassAll  *bool `protobuf:"varint,3,opt,name=setBypassAll" json:"setBypassAll,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableRequest) Reset() {
	*x = DisableRequest{}
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableRequest) ProtoMessage() {}

func (x *DisableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableRequest.ProtoReflect.Descriptor instead.
func (*DisableRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{5}
}

func (x *DisableRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *DisableRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *DisableRequest) GetSetBypassAll() bool {
	if x != nil && x.SetBypassAll != nil {
		return *x.SetBypassAll
	}
	return false
}

type Clcw struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReceptionTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=receptionTime" json:"receptionTime,omitempty"`
	Lockout       *bool                  `protobuf:"varint,2,opt,name=lockout" json:"lockout,omitempty"`
	Wait          *bool                  `protobuf:"varint,3,opt,name=wait" json:"wait,omitempty"`
	Retransmit    *bool                  `protobuf:"varint,4,opt,name=retransmit" json:"retransmit,omitempty"`
	NR            *uint32                `protobuf:"varint,5,opt,name=nR" json:"nR,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Clcw) Reset() {
	*x = Clcw{}
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Clcw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clcw) ProtoMessage() {}

func (x *Clcw) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clcw.ProtoReflect.Descriptor instead.
func (*Clcw) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{6}
}

func (x *Clcw) GetReceptionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceptionTime
	}
	return nil
}

func (x *Clcw) GetLockout() bool {
	if x != nil && x.Lockout != nil {
		return *x.Lockout
	}
	return false
}

func (x *Clcw) GetWait() bool {
	if x != nil && x.Wait != nil {
		return *x.Wait
	}
	return false
}

func (x *Clcw) GetRetransmit() bool {
	if x != nil && x.Retransmit != nil {
		return *x.Retransmit
	}
	return false
}

func (x *Clcw) GetNR() uint32 {
	if x != nil && x.NR != nil {
		return *x.NR
	}
	return 0
}

type Cop1Status struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Link name for which this status applies.
	// It is present when this message is sent over the websocket as there might
	// be multiple COP-1 links subscribed
	Link *string `protobuf:"bytes,11,opt,name=link" json:"link,omitempty"`
	// If false, all frames are immediately transmitted (i.e. COP-1 is disabled)
	Cop1Active *bool `protobuf:"varint,1,opt,name=cop1Active" json:"cop1Active,omitempty"`
	// Relevant if cop1Active = false -> set the bypass flag on all outgoing frames
	SetBypassAll *bool `protobuf:"varint,2,opt,name=setBypassAll" json:"setBypassAll,omitempty"`
	// Last received CLCW
	Clcw *Clcw `protobuf:"bytes,3,opt,name=clcw" json:"clcw,omitempty"`
	// Current state of FOP-1 state machine, only relevant if cop1Active = true
	State *Cop1State `protobuf:"varint,4,opt,name=state,enum=yamcs.protobuf.cop1.Cop1State" json:"state,omitempty"`
	// V(S) - Transmitter Frame Sequence Number;
	VS *uint32 `protobuf:"varint,5,opt,name=vS" json:"vS,omitempty"`
	// The nR from the previous CLCW
	NnR *uint32 `protobuf:"varint,6,opt,name=nnR" json:"nnR,omitempty"`
	// Number of TC packets in the wait queue
	WaitQueueNumTC *uint32 `protobuf:"varint,7,opt,name=waitQueueNumTC" json:"waitQueueNumTC,omitempty"`
	// Number of unacknowledged frames in the sent queue
	SentQueueNumFrames *uint32 `protobuf:"varint,8,opt,name=sentQueueNumFrames" json:"sentQueueNumFrames,omitempty"`
	// Number of frames in the out queue (waiting to be picked up by the master chain
	// multiplexer)
	OutQueueNumFrames *uint32 `protobuf:"varint,9,opt,name=outQueueNumFrames" json:"outQueueNumFrames,omitempty"`
	// How many times the last frame has been transmitted
	TxCount       *uint32 `protobuf:"varint,10,opt,name=txCount" json:"txCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cop1Status) Reset() {
	*x = Cop1Status{}
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cop1Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cop1Status) ProtoMessage() {}

func (x *Cop1Status) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cop1Status.ProtoReflect.Descriptor instead.
func (*Cop1Status) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{7}
}

func (x *Cop1Status) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *Cop1Status) GetCop1Active() bool {
	if x != nil && x.Cop1Active != nil {
		return *x.Cop1Active
	}
	return false
}

func (x *Cop1Status) GetSetBypassAll() bool {
	if x != nil && x.SetBypassAll != nil {
		return *x.SetBypassAll
	}
	return false
}

func (x *Cop1Status) GetClcw() *Clcw {
	if x != nil {
		return x.Clcw
	}
	return nil
}

func (x *Cop1Status) GetState() Cop1State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Cop1State_ACTIVE
}

func (x *Cop1Status) GetVS() uint32 {
	if x != nil && x.VS != nil {
		return *x.VS
	}
	return 0
}

func (x *Cop1Status) GetNnR() uint32 {
	if x != nil && x.NnR != nil {
		return *x.NnR
	}
	return 0
}

func (x *Cop1Status) GetWaitQueueNumTC() uint32 {
	if x != nil && x.WaitQueueNumTC != nil {
		return *x.WaitQueueNumTC
	}
	return 0
}

func (x *Cop1Status) GetSentQueueNumFrames() uint32 {
	if x != nil && x.SentQueueNumFrames != nil {
		return *x.SentQueueNumFrames
	}
	return 0
}

func (x *Cop1Status) GetOutQueueNumFrames() uint32 {
	if x != nil && x.OutQueueNumFrames != nil {
		return *x.OutQueueNumFrames
	}
	return 0
}

func (x *Cop1Status) GetTxCount() uint32 {
	if x != nil && x.TxCount != nil {
		return *x.TxCount
	}
	return 0
}

type Cop1Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	VcId  *uint32                `protobuf:"varint,1,opt,name=vcId" json:"vcId,omitempty"`
	// If true, the BD frames are sent immediately, without going to the waiting queue
	BdAbsolutePriority *bool `protobuf:"varint,3,opt,name=bdAbsolutePriority" json:"bdAbsolutePriority,omitempty"`
	// Maximum size of the sent queue (i.e. how many unacknowledged frames can be in the
	// queue before timing out)
	WindowWidth *uint32 `protobuf:"varint,4,opt,name=windowWidth" json:"windowWidth,omitempty"`
	// What should happen on timeout: go to SUSPEND or go to UNINITIALIZED
	TimeoutType *TimeoutType `protobuf:"varint,5,opt,name=timeoutType,enum=yamcs.protobuf.cop1.TimeoutType" json:"timeoutType,omitempty"`
	// How many times the frames are transmitted before timing out
	TxLimit *uint32 `protobuf:"varint,6,opt,name=txLimit" json:"txLimit,omitempty"`
	// How many milliseconds to wait between retransmissions
	T1            *uint64 `protobuf:"varint,7,opt,name=t1" json:"t1,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cop1Config) Reset() {
	*x = Cop1Config{}
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cop1Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cop1Config) ProtoMessage() {}

func (x *Cop1Config) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cop1Config.ProtoReflect.Descriptor instead.
func (*Cop1Config) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{8}
}

func (x *Cop1Config) GetVcId() uint32 {
	if x != nil && x.VcId != nil {
		return *x.VcId
	}
	return 0
}

func (x *Cop1Config) GetBdAbsolutePriority() bool {
	if x != nil && x.BdAbsolutePriority != nil {
		return *x.BdAbsolutePriority
	}
	return false
}

func (x *Cop1Config) GetWindowWidth() uint32 {
	if x != nil && x.WindowWidth != nil {
		return *x.WindowWidth
	}
	return 0
}

func (x *Cop1Config) GetTimeoutType() TimeoutType {
	if x != nil && x.TimeoutType != nil {
		return *x.TimeoutType
	}
	return TimeoutType_UNINITIALIZE
}

func (x *Cop1Config) GetTxLimit() uint32 {
	if x != nil && x.TxLimit != nil {
		return *x.TxLimit
	}
	return 0
}

func (x *Cop1Config) GetT1() uint64 {
	if x != nil && x.T1 != nil {
		return *x.T1
	}
	return 0
}

type SubscribeStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Link name.
	Link          *string `protobuf:"bytes,2,opt,name=link" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeStatusRequest) Reset() {
	*x = SubscribeStatusRequest{}
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStatusRequest) ProtoMessage() {}

func (x *SubscribeStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_cop1_cop1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStatusRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeStatusRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeStatusRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

var File_yamcs_protobuf_cop1_cop1_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_cop1_cop1_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x63, 0x6f, 0x70, 0x31, 0x2f, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x63, 0x6f, 0x70, 0x31, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd0, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x6c, 0x63, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x63, 0x6c, 0x63, 0x77, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x76, 0x52, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3f, 0x0a, 0x0a, 0x63,
	0x6f, 0x70, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0a, 0x63, 0x6f, 0x70, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x42, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x22, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x3f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x64, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x42, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x22, 0xa6, 0x01, 0x0a, 0x04,
	0x43, 0x6c, 0x63, 0x77, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x77, 0x61, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x52, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x6e, 0x52, 0x22, 0x8b, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x70, 0x31, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x70, 0x31, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x70,
	0x31, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x42, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x65, 0x74, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x63,
	0x6c, 0x63, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e,
	0x43, 0x6c, 0x63, 0x77, 0x52, 0x04, 0x63, 0x6c, 0x63, 0x77, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e,
	0x43, 0x6f, 0x70, 0x31, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x76, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x76, 0x53,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6e, 0x52, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6e,
	0x6e, 0x52, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e,
	0x75, 0x6d, 0x54, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x77, 0x61, 0x69, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x54, 0x43, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x65,
	0x6e, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x75,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e,
	0x75, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x70, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x76, 0x63, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x62, 0x64, 0x41, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x62, 0x64, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f,
	0x70, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x74, 0x31, 0x22, 0x48, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x2a,
	0x59, 0x0a, 0x12, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43, 0x4c,
	0x43, 0x57, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x49,
	0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4c, 0x43, 0x57, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x52, 0x10, 0x04, 0x2a, 0xa7, 0x01, 0x0a, 0x09, 0x43,
	0x6f, 0x70, 0x31, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d,
	0x49, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x54, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x4f, 0x55, 0x54, 0x5f, 0x42, 0x43, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x43,
	0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x07, 0x2a, 0x2c, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44,
	0x10, 0x01, 0x32, 0xf8, 0x06, 0x0a, 0x07, 0x43, 0x6f, 0x70, 0x31, 0x41, 0x70, 0x69, 0x12, 0x7d,
	0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f,
	0x70, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0x8a, 0x92,
	0x03, 0x2b, 0x3a, 0x01, 0x2a, 0x1a, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x70, 0x31,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6c, 0x69, 0x6e,
	0x6b, 0x7d, 0x3a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x6e, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x28, 0x8a, 0x92, 0x03, 0x24, 0x1a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x70, 0x31, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f,
	0x7b, 0x6c, 0x69, 0x6e, 0x6b, 0x7d, 0x3a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x74, 0x0a,
	0x07, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x8a, 0x92, 0x03, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x70, 0x31, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6c, 0x69, 0x6e, 0x6b, 0x7d, 0x3a, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x63, 0x6f, 0x70, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x34, 0x8a, 0x92, 0x03, 0x30, 0x3a, 0x0a, 0x63, 0x6f, 0x70, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x70, 0x31, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6c, 0x69, 0x6e, 0x6b, 0x7d, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x7d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e,
	0x43, 0x6f, 0x70, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x28, 0x8a, 0x92, 0x03, 0x24,
	0x0a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x70, 0x31, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6c, 0x69, 0x6e, 0x6b, 0x7d, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x7d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x43,
	0x6f, 0x70, 0x31, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x28, 0x8a, 0x92, 0x03, 0x24, 0x0a,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x70, 0x31, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x6c, 0x69, 0x6e, 0x6b, 0x7d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x6d, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x70, 0x31, 0x2e, 0x43, 0x6f, 0x70, 0x31, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x0a, 0xda, 0x92, 0x03, 0x06, 0x0a, 0x04, 0x63, 0x6f, 0x70, 0x31,
	0x30, 0x01, 0x1a, 0x09, 0x82, 0x80, 0x01, 0x05, 0x43, 0x4f, 0x50, 0x2d, 0x31, 0x42, 0x65, 0x0a,
	0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x42, 0x09, 0x43, 0x6f, 0x70, 0x31, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f,
	0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61,
	0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x63, 0x6f, 0x70, 0x31,
})

var (
	file_yamcs_protobuf_cop1_cop1_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_cop1_cop1_proto_rawDescData []byte
)

func file_yamcs_protobuf_cop1_cop1_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_cop1_cop1_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_cop1_cop1_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_cop1_cop1_proto_rawDesc), len(file_yamcs_protobuf_cop1_cop1_proto_rawDesc)))
	})
	return file_yamcs_protobuf_cop1_cop1_proto_rawDescData
}

var file_yamcs_protobuf_cop1_cop1_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yamcs_protobuf_cop1_cop1_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_yamcs_protobuf_cop1_cop1_proto_goTypes = []any{
	(InitializationType)(0),        // 0: yamcs.protobuf.cop1.InitializationType
	(Cop1State)(0),                 // 1: yamcs.protobuf.cop1.Cop1State
	(TimeoutType)(0),               // 2: yamcs.protobuf.cop1.TimeoutType
	(*InitializeRequest)(nil),      // 3: yamcs.protobuf.cop1.InitializeRequest
	(*UpdateConfigRequest)(nil),    // 4: yamcs.protobuf.cop1.UpdateConfigRequest
	(*GetConfigRequest)(nil),       // 5: yamcs.protobuf.cop1.GetConfigRequest
	(*GetStatusRequest)(nil),       // 6: yamcs.protobuf.cop1.GetStatusRequest
	(*ResumeRequest)(nil),          // 7: yamcs.protobuf.cop1.ResumeRequest
	(*DisableRequest)(nil),         // 8: yamcs.protobuf.cop1.DisableRequest
	(*Clcw)(nil),                   // 9: yamcs.protobuf.cop1.Clcw
	(*Cop1Status)(nil),             // 10: yamcs.protobuf.cop1.Cop1Status
	(*Cop1Config)(nil),             // 11: yamcs.protobuf.cop1.Cop1Config
	(*SubscribeStatusRequest)(nil), // 12: yamcs.protobuf.cop1.SubscribeStatusRequest
	(*timestamppb.Timestamp)(nil),  // 13: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),          // 14: google.protobuf.Empty
}
var file_yamcs_protobuf_cop1_cop1_proto_depIdxs = []int32{
	0,  // 0: yamcs.protobuf.cop1.InitializeRequest.type:type_name -> yamcs.protobuf.cop1.InitializationType
	11, // 1: yamcs.protobuf.cop1.UpdateConfigRequest.cop1Config:type_name -> yamcs.protobuf.cop1.Cop1Config
	13, // 2: yamcs.protobuf.cop1.Clcw.receptionTime:type_name -> google.protobuf.Timestamp
	9,  // 3: yamcs.protobuf.cop1.Cop1Status.clcw:type_name -> yamcs.protobuf.cop1.Clcw
	1,  // 4: yamcs.protobuf.cop1.Cop1Status.state:type_name -> yamcs.protobuf.cop1.Cop1State
	2,  // 5: yamcs.protobuf.cop1.Cop1Config.timeoutType:type_name -> yamcs.protobuf.cop1.TimeoutType
	3,  // 6: yamcs.protobuf.cop1.Cop1Api.Initialize:input_type -> yamcs.protobuf.cop1.InitializeRequest
	7,  // 7: yamcs.protobuf.cop1.Cop1Api.Resume:input_type -> yamcs.protobuf.cop1.ResumeRequest
	8,  // 8: yamcs.protobuf.cop1.Cop1Api.Disable:input_type -> yamcs.protobuf.cop1.DisableRequest
	4,  // 9: yamcs.protobuf.cop1.Cop1Api.UpdateConfig:input_type -> yamcs.protobuf.cop1.UpdateConfigRequest
	5,  // 10: yamcs.protobuf.cop1.Cop1Api.GetConfig:input_type -> yamcs.protobuf.cop1.GetConfigRequest
	6,  // 11: yamcs.protobuf.cop1.Cop1Api.GetStatus:input_type -> yamcs.protobuf.cop1.GetStatusRequest
	12, // 12: yamcs.protobuf.cop1.Cop1Api.SubscribeStatus:input_type -> yamcs.protobuf.cop1.SubscribeStatusRequest
	14, // 13: yamcs.protobuf.cop1.Cop1Api.Initialize:output_type -> google.protobuf.Empty
	14, // 14: yamcs.protobuf.cop1.Cop1Api.Resume:output_type -> google.protobuf.Empty
	14, // 15: yamcs.protobuf.cop1.Cop1Api.Disable:output_type -> google.protobuf.Empty
	11, // 16: yamcs.protobuf.cop1.Cop1Api.UpdateConfig:output_type -> yamcs.protobuf.cop1.Cop1Config
	11, // 17: yamcs.protobuf.cop1.Cop1Api.GetConfig:output_type -> yamcs.protobuf.cop1.Cop1Config
	10, // 18: yamcs.protobuf.cop1.Cop1Api.GetStatus:output_type -> yamcs.protobuf.cop1.Cop1Status
	10, // 19: yamcs.protobuf.cop1.Cop1Api.SubscribeStatus:output_type -> yamcs.protobuf.cop1.Cop1Status
	13, // [13:20] is the sub-list for method output_type
	6,  // [6:13] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_cop1_cop1_proto_init() }
func file_yamcs_protobuf_cop1_cop1_proto_init() {
	if File_yamcs_protobuf_cop1_cop1_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_cop1_cop1_proto_rawDesc), len(file_yamcs_protobuf_cop1_cop1_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_cop1_cop1_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_cop1_cop1_proto_depIdxs,
		EnumInfos:         file_yamcs_protobuf_cop1_cop1_proto_enumTypes,
		MessageInfos:      file_yamcs_protobuf_cop1_cop1_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_cop1_cop1_proto = out.File
	file_yamcs_protobuf_cop1_cop1_proto_goTypes = nil
	file_yamcs_protobuf_cop1_cop1_proto_depIdxs = nil
}
