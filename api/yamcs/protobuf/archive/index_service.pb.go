// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/archive/index_service.proto

package archive

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protobuf "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListCommandHistoryIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Value in milliseconds that indicates the maximum gap before two consecutive index
	// ranges are merged together. Default: “2000“
	MergeTime *int32 `protobuf:"varint,2,opt,name=mergeTime" json:"mergeTime,omitempty"`
	// The maximum number of returned entries. Choose this value too high and you risk hitting
	// the maximum response size limit enforced by the server. Default: “1000“.
	// Note that in general it is advised to control the size of the response via “mergeTime“,
	// rather than via “limit“.
	Limit *int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// Filter the lower bound of the index entries. Specify a date string in ISO 8601 format.
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the index entries. Specify a date string in ISO 8601 format.
	Stop *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=stop" json:"stop,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,6,opt,name=next" json:"next,omitempty"`
	// Filter on a specific command
	Name          []string `protobuf:"bytes,7,rep,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCommandHistoryIndexRequest) Reset() {
	*x = ListCommandHistoryIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCommandHistoryIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCommandHistoryIndexRequest) ProtoMessage() {}

func (x *ListCommandHistoryIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCommandHistoryIndexRequest.ProtoReflect.Descriptor instead.
func (*ListCommandHistoryIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListCommandHistoryIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListCommandHistoryIndexRequest) GetMergeTime() int32 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

func (x *ListCommandHistoryIndexRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListCommandHistoryIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListCommandHistoryIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ListCommandHistoryIndexRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListCommandHistoryIndexRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type ListEventIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Value in milliseconds that indicates the maximum gap before two consecutive index
	// ranges are merged together. Default: “2000“
	MergeTime *int32 `protobuf:"varint,2,opt,name=mergeTime" json:"mergeTime,omitempty"`
	// The maximum number of returned entries. Choose this value too high and you risk
	// hitting the maximum response size limit enforced by the server. Default: “1000“.
	// Note that in general it is advised to control the size of the response via
	// “mergeTime“, rather than via “limit“.
	Limit *int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// Filter the lower bound of the index entries. Specify a date string in ISO 8601 format.
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the index entries. Specify a date string in ISO 8601 format.
	Stop *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=stop" json:"stop,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,6,opt,name=next" json:"next,omitempty"`
	// Filter on specific sources.
	Source        []string `protobuf:"bytes,7,rep,name=source" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEventIndexRequest) Reset() {
	*x = ListEventIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventIndexRequest) ProtoMessage() {}

func (x *ListEventIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventIndexRequest.ProtoReflect.Descriptor instead.
func (*ListEventIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListEventIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListEventIndexRequest) GetMergeTime() int32 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

func (x *ListEventIndexRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListEventIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListEventIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ListEventIndexRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListEventIndexRequest) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

type ListPacketIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Value in milliseconds that indicates the maximum gap before two consecutive index
	// ranges are merged together. Default: “2000“
	MergeTime *int32 `protobuf:"varint,2,opt,name=mergeTime" json:"mergeTime,omitempty"`
	// The maximum number of returned entries. Choose this value too high and you risk
	// hitting the maximum response size limit enforced by the server. Default: “1000“.
	// Note that in general it is advised to control the size of the response via
	// “mergeTime“, rather than via “limit“.
	Limit *int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// Filter the lower bound of the index entries. Specify a date string in ISO 8601 format.
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the index entries. Specify a date string in ISO 8601 format.
	Stop *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=stop" json:"stop,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,6,opt,name=next" json:"next,omitempty"`
	// Filter on specific packet names.
	Name          []string `protobuf:"bytes,7,rep,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPacketIndexRequest) Reset() {
	*x = ListPacketIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPacketIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPacketIndexRequest) ProtoMessage() {}

func (x *ListPacketIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPacketIndexRequest.ProtoReflect.Descriptor instead.
func (*ListPacketIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListPacketIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListPacketIndexRequest) GetMergeTime() int32 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

func (x *ListPacketIndexRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListPacketIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListPacketIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ListPacketIndexRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListPacketIndexRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type ListParameterIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Value in milliseconds that indicates the maximum gap before two consecutive index
	// ranges are merged together. Default: “20000“
	MergeTime *int32 `protobuf:"varint,2,opt,name=mergeTime" json:"mergeTime,omitempty"`
	// The maximum number of returned entries. Choose this value too high and you risk
	// hitting the maximum response size limit enforced by the server. Default: “1000“.
	// Note that in general it is advised to control the size of the response via
	// “mergeTime“, rather than via “limit“.
	Limit *int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// Filter the lower bound of the index entries. Specify a date string in ISO 8601 format.
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the index entries. Specify a date string in ISO 8601 format.
	Stop *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=stop" json:"stop,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,6,opt,name=next" json:"next,omitempty"`
	// Filter on specific parameter groups.
	Group         []string `protobuf:"bytes,7,rep,name=group" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListParameterIndexRequest) Reset() {
	*x = ListParameterIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListParameterIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParameterIndexRequest) ProtoMessage() {}

func (x *ListParameterIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParameterIndexRequest.ProtoReflect.Descriptor instead.
func (*ListParameterIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListParameterIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListParameterIndexRequest) GetMergeTime() int32 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

func (x *ListParameterIndexRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListParameterIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListParameterIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ListParameterIndexRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListParameterIndexRequest) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

type ListCompletenessIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Value in milliseconds that indicates the maximum gap before two consecutive index
	// ranges are merged together. Default: unset
	MergeTime *int32 `protobuf:"varint,6,opt,name=mergeTime" json:"mergeTime,omitempty"`
	// The maximum number of returned entries. Choose this value too high and you risk hitting
	// the maximum response size limit enforced by the server. Default: “1000“.
	// Note that in general it is advised to control the size of the response via “mergeTime“,
	// rather than via “limit“.
	Limit *int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	// Filter the lower bound of the index entries. Specify a date string in ISO 8601 format.
	Start *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the index entries. Specify a date string in ISO 8601 format.
	Stop *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stop" json:"stop,omitempty"`
	// Continuation token returned by a previous page response.
	Next          *string `protobuf:"bytes,5,opt,name=next" json:"next,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCompletenessIndexRequest) Reset() {
	*x = ListCompletenessIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCompletenessIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCompletenessIndexRequest) ProtoMessage() {}

func (x *ListCompletenessIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCompletenessIndexRequest.ProtoReflect.Descriptor instead.
func (*ListCompletenessIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListCompletenessIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListCompletenessIndexRequest) GetMergeTime() int32 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

func (x *ListCompletenessIndexRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListCompletenessIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListCompletenessIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ListCompletenessIndexRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

type IndexResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Group []*IndexGroup          `protobuf:"bytes,1,rep,name=group" json:"group,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *IndexResponse) Reset() {
	*x = IndexResponse{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexResponse) ProtoMessage() {}

func (x *IndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexResponse.ProtoReflect.Descriptor instead.
func (*IndexResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{5}
}

func (x *IndexResponse) GetGroup() []*IndexGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *IndexResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

type IndexGroup struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            *protobuf.NamedObjectId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Entry         []*IndexEntry           `protobuf:"bytes,2,rep,name=entry" json:"entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexGroup) Reset() {
	*x = IndexGroup{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexGroup) ProtoMessage() {}

func (x *IndexGroup) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexGroup.ProtoReflect.Descriptor instead.
func (*IndexGroup) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{6}
}

func (x *IndexGroup) GetId() *protobuf.NamedObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IndexGroup) GetEntry() []*IndexEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type IndexEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *string                `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	Stop          *string                `protobuf:"bytes,2,opt,name=stop" json:"stop,omitempty"`
	Count         *int32                 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	SeqStart      *int64                 `protobuf:"varint,4,opt,name=seqStart" json:"seqStart,omitempty"`
	SeqStop       *int64                 `protobuf:"varint,5,opt,name=seqStop" json:"seqStop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexEntry) Reset() {
	*x = IndexEntry{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexEntry) ProtoMessage() {}

func (x *IndexEntry) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexEntry.ProtoReflect.Descriptor instead.
func (*IndexEntry) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{7}
}

func (x *IndexEntry) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *IndexEntry) GetStop() string {
	if x != nil && x.Stop != nil {
		return *x.Stop
	}
	return ""
}

func (x *IndexEntry) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *IndexEntry) GetSeqStart() int64 {
	if x != nil && x.SeqStart != nil {
		return *x.SeqStart
	}
	return 0
}

func (x *IndexEntry) GetSeqStop() int64 {
	if x != nil && x.SeqStop != nil {
		return *x.SeqStop
	}
	return 0
}

type StreamPacketIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The time at which to start retrieving index records.
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// The time at which to stop retrieving index records.
	Stop *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	// Filter on specific packet names
	Names []string `protobuf:"bytes,4,rep,name=names" json:"names,omitempty"`
	// Value in milliseconds that indicates the maximum gap before two consecutive index
	// ranges are merged together.
	MergeTime     *uint32 `protobuf:"varint,5,opt,name=mergeTime" json:"mergeTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPacketIndexRequest) Reset() {
	*x = StreamPacketIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPacketIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPacketIndexRequest) ProtoMessage() {}

func (x *StreamPacketIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPacketIndexRequest.ProtoReflect.Descriptor instead.
func (*StreamPacketIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{8}
}

func (x *StreamPacketIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *StreamPacketIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StreamPacketIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *StreamPacketIndexRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *StreamPacketIndexRequest) GetMergeTime() uint32 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

type StreamParameterIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The time at which to start retrieving index records.
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// The time at which to stop retrieving index records.
	Stop *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	// Value in milliseconds that indicates the maximum gap before two consecutive index
	// ranges are merged together.
	MergeTime     *int32 `protobuf:"varint,4,opt,name=mergeTime" json:"mergeTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamParameterIndexRequest) Reset() {
	*x = StreamParameterIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamParameterIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamParameterIndexRequest) ProtoMessage() {}

func (x *StreamParameterIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamParameterIndexRequest.ProtoReflect.Descriptor instead.
func (*StreamParameterIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{9}
}

func (x *StreamParameterIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *StreamParameterIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StreamParameterIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *StreamParameterIndexRequest) GetMergeTime() int32 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

type StreamCommandIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The time at which to start retrieving index records.
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// The time at which to stop retrieving index records.
	Stop *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	// Value in milliseconds that indicates the maximum gap before two consecutive index
	// ranges are merged together.
	MergeTime     *int32 `protobuf:"varint,4,opt,name=mergeTime" json:"mergeTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamCommandIndexRequest) Reset() {
	*x = StreamCommandIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCommandIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCommandIndexRequest) ProtoMessage() {}

func (x *StreamCommandIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCommandIndexRequest.ProtoReflect.Descriptor instead.
func (*StreamCommandIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{10}
}

func (x *StreamCommandIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *StreamCommandIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StreamCommandIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *StreamCommandIndexRequest) GetMergeTime() int32 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

type StreamEventIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The time at which to start retrieving index records.
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// The time at which to stop retrieving index records.
	Stop *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	// Value in milliseconds that indicates the maximum gap before two consecutive index
	// ranges are merged together.
	MergeTime     *int32 `protobuf:"varint,4,opt,name=mergeTime" json:"mergeTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamEventIndexRequest) Reset() {
	*x = StreamEventIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEventIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventIndexRequest) ProtoMessage() {}

func (x *StreamEventIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventIndexRequest.ProtoReflect.Descriptor instead.
func (*StreamEventIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{11}
}

func (x *StreamEventIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *StreamEventIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StreamEventIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *StreamEventIndexRequest) GetMergeTime() int32 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

type StreamCompletenessIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The time at which to start retrieving index records.
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// The time at which to stop retrieving index records.
	Stop *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	// Value in milliseconds that indicates the maximum gap before two consecutive index
	// ranges are merged together.
	MergeTime     *uint32 `protobuf:"varint,4,opt,name=mergeTime" json:"mergeTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamCompletenessIndexRequest) Reset() {
	*x = StreamCompletenessIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCompletenessIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCompletenessIndexRequest) ProtoMessage() {}

func (x *StreamCompletenessIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCompletenessIndexRequest.ProtoReflect.Descriptor instead.
func (*StreamCompletenessIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{12}
}

func (x *StreamCompletenessIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *StreamCompletenessIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StreamCompletenessIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *StreamCompletenessIndexRequest) GetMergeTime() uint32 {
	if x != nil && x.MergeTime != nil {
		return *x.MergeTime
	}
	return 0
}

type RebuildCcsdsIndexRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Range start (inclusive)
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// Range stop (exclusive)
	Stop          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebuildCcsdsIndexRequest) Reset() {
	*x = RebuildCcsdsIndexRequest{}
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebuildCcsdsIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildCcsdsIndexRequest) ProtoMessage() {}

func (x *RebuildCcsdsIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_index_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildCcsdsIndexRequest.ProtoReflect.Descriptor instead.
func (*RebuildCcsdsIndexRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP(), []int{13}
}

func (x *RebuildCcsdsIndexRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *RebuildCcsdsIndexRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *RebuildCcsdsIndexRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

var File_yamcs_protobuf_archive_index_service_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_archive_index_service_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x01, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x73, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0xf2, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0xe4, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x77, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x75, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x05,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x70, 0x22, 0xcc, 0x01, 0x0a, 0x18,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x1b, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xb5, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x43, 0x63, 0x73, 0x64, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x32, 0xfd, 0x0d, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x41, 0x70,
	0x69, 0x12, 0xa5, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x8a, 0x92,
	0x03, 0x27, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x8a, 0x92, 0x03, 0x25, 0x0a, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x94, 0x01,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x8a, 0x92, 0x03, 0x26, 0x0a, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x8a, 0x92, 0x03, 0x29, 0x0a, 0x27, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0xa6, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x8a, 0x92, 0x03,
	0x2c, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x2d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x9a, 0x01,
	0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x30, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x22, 0x32, 0x8a, 0x92, 0x03, 0x2e, 0x3a, 0x01, 0x2a, 0x1a, 0x29, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x30, 0x01, 0x12, 0xa3, 0x01, 0x0a, 0x14, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x35, 0x8a, 0x92, 0x03, 0x31, 0x3a, 0x01, 0x2a,
	0x1a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x30, 0x01,
	0x12, 0x9d, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x33, 0x8a, 0x92, 0x03, 0x2f, 0x3a,
	0x01, 0x2a, 0x1a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x30, 0x01,
	0x12, 0x97, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x31, 0x8a, 0x92, 0x03, 0x2d, 0x3a, 0x01, 0x2a, 0x1a, 0x28,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x30, 0x01, 0x12, 0xac, 0x01, 0x0a, 0x17, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x38, 0x8a,
	0x92, 0x03, 0x34, 0x3a, 0x01, 0x2a, 0x1a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x30, 0x01, 0x12, 0xa6, 0x01, 0x0a, 0x11, 0x52, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x63, 0x73, 0x64, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x30, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x43, 0x63, 0x73, 0x64, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x47, 0x8a, 0x92, 0x03, 0x43, 0x3a,
	0x01, 0x2a, 0x6a, 0x13, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x43, 0x43, 0x53, 0x44,
	0x53, 0x20, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x3a, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x43, 0x63, 0x73, 0x64, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x42, 0x70, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65,
})

var (
	file_yamcs_protobuf_archive_index_service_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_archive_index_service_proto_rawDescData []byte
)

func file_yamcs_protobuf_archive_index_service_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_archive_index_service_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_archive_index_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_archive_index_service_proto_rawDesc), len(file_yamcs_protobuf_archive_index_service_proto_rawDesc)))
	})
	return file_yamcs_protobuf_archive_index_service_proto_rawDescData
}

var file_yamcs_protobuf_archive_index_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_yamcs_protobuf_archive_index_service_proto_goTypes = []any{
	(*ListCommandHistoryIndexRequest)(nil), // 0: yamcs.protobuf.archive.ListCommandHistoryIndexRequest
	(*ListEventIndexRequest)(nil),          // 1: yamcs.protobuf.archive.ListEventIndexRequest
	(*ListPacketIndexRequest)(nil),         // 2: yamcs.protobuf.archive.ListPacketIndexRequest
	(*ListParameterIndexRequest)(nil),      // 3: yamcs.protobuf.archive.ListParameterIndexRequest
	(*ListCompletenessIndexRequest)(nil),   // 4: yamcs.protobuf.archive.ListCompletenessIndexRequest
	(*IndexResponse)(nil),                  // 5: yamcs.protobuf.archive.IndexResponse
	(*IndexGroup)(nil),                     // 6: yamcs.protobuf.archive.IndexGroup
	(*IndexEntry)(nil),                     // 7: yamcs.protobuf.archive.IndexEntry
	(*StreamPacketIndexRequest)(nil),       // 8: yamcs.protobuf.archive.StreamPacketIndexRequest
	(*StreamParameterIndexRequest)(nil),    // 9: yamcs.protobuf.archive.StreamParameterIndexRequest
	(*StreamCommandIndexRequest)(nil),      // 10: yamcs.protobuf.archive.StreamCommandIndexRequest
	(*StreamEventIndexRequest)(nil),        // 11: yamcs.protobuf.archive.StreamEventIndexRequest
	(*StreamCompletenessIndexRequest)(nil), // 12: yamcs.protobuf.archive.StreamCompletenessIndexRequest
	(*RebuildCcsdsIndexRequest)(nil),       // 13: yamcs.protobuf.archive.RebuildCcsdsIndexRequest
	(*timestamppb.Timestamp)(nil),          // 14: google.protobuf.Timestamp
	(*protobuf.NamedObjectId)(nil),         // 15: yamcs.protobuf.NamedObjectId
	(*protobuf.ArchiveRecord)(nil),         // 16: yamcs.protobuf.ArchiveRecord
	(*emptypb.Empty)(nil),                  // 17: google.protobuf.Empty
}
var file_yamcs_protobuf_archive_index_service_proto_depIdxs = []int32{
	14, // 0: yamcs.protobuf.archive.ListCommandHistoryIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 1: yamcs.protobuf.archive.ListCommandHistoryIndexRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 2: yamcs.protobuf.archive.ListEventIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 3: yamcs.protobuf.archive.ListEventIndexRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 4: yamcs.protobuf.archive.ListPacketIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 5: yamcs.protobuf.archive.ListPacketIndexRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 6: yamcs.protobuf.archive.ListParameterIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 7: yamcs.protobuf.archive.ListParameterIndexRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 8: yamcs.protobuf.archive.ListCompletenessIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 9: yamcs.protobuf.archive.ListCompletenessIndexRequest.stop:type_name -> google.protobuf.Timestamp
	6,  // 10: yamcs.protobuf.archive.IndexResponse.group:type_name -> yamcs.protobuf.archive.IndexGroup
	15, // 11: yamcs.protobuf.archive.IndexGroup.id:type_name -> yamcs.protobuf.NamedObjectId
	7,  // 12: yamcs.protobuf.archive.IndexGroup.entry:type_name -> yamcs.protobuf.archive.IndexEntry
	14, // 13: yamcs.protobuf.archive.StreamPacketIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 14: yamcs.protobuf.archive.StreamPacketIndexRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 15: yamcs.protobuf.archive.StreamParameterIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 16: yamcs.protobuf.archive.StreamParameterIndexRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 17: yamcs.protobuf.archive.StreamCommandIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 18: yamcs.protobuf.archive.StreamCommandIndexRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 19: yamcs.protobuf.archive.StreamEventIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 20: yamcs.protobuf.archive.StreamEventIndexRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 21: yamcs.protobuf.archive.StreamCompletenessIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 22: yamcs.protobuf.archive.StreamCompletenessIndexRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 23: yamcs.protobuf.archive.RebuildCcsdsIndexRequest.start:type_name -> google.protobuf.Timestamp
	14, // 24: yamcs.protobuf.archive.RebuildCcsdsIndexRequest.stop:type_name -> google.protobuf.Timestamp
	0,  // 25: yamcs.protobuf.archive.IndexesApi.ListCommandHistoryIndex:input_type -> yamcs.protobuf.archive.ListCommandHistoryIndexRequest
	1,  // 26: yamcs.protobuf.archive.IndexesApi.ListEventIndex:input_type -> yamcs.protobuf.archive.ListEventIndexRequest
	2,  // 27: yamcs.protobuf.archive.IndexesApi.ListPacketIndex:input_type -> yamcs.protobuf.archive.ListPacketIndexRequest
	3,  // 28: yamcs.protobuf.archive.IndexesApi.ListParameterIndex:input_type -> yamcs.protobuf.archive.ListParameterIndexRequest
	4,  // 29: yamcs.protobuf.archive.IndexesApi.ListCompletenessIndex:input_type -> yamcs.protobuf.archive.ListCompletenessIndexRequest
	8,  // 30: yamcs.protobuf.archive.IndexesApi.StreamPacketIndex:input_type -> yamcs.protobuf.archive.StreamPacketIndexRequest
	9,  // 31: yamcs.protobuf.archive.IndexesApi.StreamParameterIndex:input_type -> yamcs.protobuf.archive.StreamParameterIndexRequest
	10, // 32: yamcs.protobuf.archive.IndexesApi.StreamCommandIndex:input_type -> yamcs.protobuf.archive.StreamCommandIndexRequest
	11, // 33: yamcs.protobuf.archive.IndexesApi.StreamEventIndex:input_type -> yamcs.protobuf.archive.StreamEventIndexRequest
	12, // 34: yamcs.protobuf.archive.IndexesApi.StreamCompletenessIndex:input_type -> yamcs.protobuf.archive.StreamCompletenessIndexRequest
	13, // 35: yamcs.protobuf.archive.IndexesApi.RebuildCcsdsIndex:input_type -> yamcs.protobuf.archive.RebuildCcsdsIndexRequest
	5,  // 36: yamcs.protobuf.archive.IndexesApi.ListCommandHistoryIndex:output_type -> yamcs.protobuf.archive.IndexResponse
	5,  // 37: yamcs.protobuf.archive.IndexesApi.ListEventIndex:output_type -> yamcs.protobuf.archive.IndexResponse
	5,  // 38: yamcs.protobuf.archive.IndexesApi.ListPacketIndex:output_type -> yamcs.protobuf.archive.IndexResponse
	5,  // 39: yamcs.protobuf.archive.IndexesApi.ListParameterIndex:output_type -> yamcs.protobuf.archive.IndexResponse
	5,  // 40: yamcs.protobuf.archive.IndexesApi.ListCompletenessIndex:output_type -> yamcs.protobuf.archive.IndexResponse
	16, // 41: yamcs.protobuf.archive.IndexesApi.StreamPacketIndex:output_type -> yamcs.protobuf.ArchiveRecord
	16, // 42: yamcs.protobuf.archive.IndexesApi.StreamParameterIndex:output_type -> yamcs.protobuf.ArchiveRecord
	16, // 43: yamcs.protobuf.archive.IndexesApi.StreamCommandIndex:output_type -> yamcs.protobuf.ArchiveRecord
	16, // 44: yamcs.protobuf.archive.IndexesApi.StreamEventIndex:output_type -> yamcs.protobuf.ArchiveRecord
	16, // 45: yamcs.protobuf.archive.IndexesApi.StreamCompletenessIndex:output_type -> yamcs.protobuf.ArchiveRecord
	17, // 46: yamcs.protobuf.archive.IndexesApi.RebuildCcsdsIndex:output_type -> google.protobuf.Empty
	36, // [36:47] is the sub-list for method output_type
	25, // [25:36] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_archive_index_service_proto_init() }
func file_yamcs_protobuf_archive_index_service_proto_init() {
	if File_yamcs_protobuf_archive_index_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_archive_index_service_proto_rawDesc), len(file_yamcs_protobuf_archive_index_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_archive_index_service_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_archive_index_service_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_archive_index_service_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_archive_index_service_proto = out.File
	file_yamcs_protobuf_archive_index_service_proto_goTypes = nil
	file_yamcs_protobuf_archive_index_service_proto_depIdxs = nil
}
