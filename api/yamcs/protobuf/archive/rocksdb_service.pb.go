// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/archive/rocksdb_service.proto

package archive

import (
	api "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListRocksDbTablespacesResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Tablespaces   []*RocksDbTablespaceInfo `protobuf:"bytes,1,rep,name=tablespaces" json:"tablespaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRocksDbTablespacesResponse) Reset() {
	*x = ListRocksDbTablespacesResponse{}
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRocksDbTablespacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRocksDbTablespacesResponse) ProtoMessage() {}

func (x *ListRocksDbTablespacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRocksDbTablespacesResponse.ProtoReflect.Descriptor instead.
func (*ListRocksDbTablespacesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListRocksDbTablespacesResponse) GetTablespaces() []*RocksDbTablespaceInfo {
	if x != nil {
		return x.Tablespaces
	}
	return nil
}

type RocksDbTablespaceInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DataDir       *string                `protobuf:"bytes,2,opt,name=dataDir" json:"dataDir,omitempty"`
	Databases     []*RocksDbDatabaseInfo `protobuf:"bytes,3,rep,name=databases" json:"databases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RocksDbTablespaceInfo) Reset() {
	*x = RocksDbTablespaceInfo{}
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RocksDbTablespaceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RocksDbTablespaceInfo) ProtoMessage() {}

func (x *RocksDbTablespaceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RocksDbTablespaceInfo.ProtoReflect.Descriptor instead.
func (*RocksDbTablespaceInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescGZIP(), []int{1}
}

func (x *RocksDbTablespaceInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RocksDbTablespaceInfo) GetDataDir() string {
	if x != nil && x.DataDir != nil {
		return *x.DataDir
	}
	return ""
}

func (x *RocksDbTablespaceInfo) GetDatabases() []*RocksDbDatabaseInfo {
	if x != nil {
		return x.Databases
	}
	return nil
}

type ListRocksDbDatabasesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Databases     []*RocksDbDatabaseInfo `protobuf:"bytes,1,rep,name=databases" json:"databases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRocksDbDatabasesResponse) Reset() {
	*x = ListRocksDbDatabasesResponse{}
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRocksDbDatabasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRocksDbDatabasesResponse) ProtoMessage() {}

func (x *ListRocksDbDatabasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRocksDbDatabasesResponse.ProtoReflect.Descriptor instead.
func (*ListRocksDbDatabasesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListRocksDbDatabasesResponse) GetDatabases() []*RocksDbDatabaseInfo {
	if x != nil {
		return x.Databases
	}
	return nil
}

type RocksDbDatabaseInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tablespace    *string                `protobuf:"bytes,1,opt,name=tablespace" json:"tablespace,omitempty"`
	DataDir       *string                `protobuf:"bytes,2,opt,name=dataDir" json:"dataDir,omitempty"`
	DbPath        *string                `protobuf:"bytes,3,opt,name=dbPath" json:"dbPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RocksDbDatabaseInfo) Reset() {
	*x = RocksDbDatabaseInfo{}
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RocksDbDatabaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RocksDbDatabaseInfo) ProtoMessage() {}

func (x *RocksDbDatabaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RocksDbDatabaseInfo.ProtoReflect.Descriptor instead.
func (*RocksDbDatabaseInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescGZIP(), []int{3}
}

func (x *RocksDbDatabaseInfo) GetTablespace() string {
	if x != nil && x.Tablespace != nil {
		return *x.Tablespace
	}
	return ""
}

func (x *RocksDbDatabaseInfo) GetDataDir() string {
	if x != nil && x.DataDir != nil {
		return *x.DataDir
	}
	return ""
}

func (x *RocksDbDatabaseInfo) GetDbPath() string {
	if x != nil && x.DbPath != nil {
		return *x.DbPath
	}
	return ""
}

type BackupDatabaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tablespace    *string                `protobuf:"bytes,1,opt,name=tablespace" json:"tablespace,omitempty"`
	Dbpath        *string                `protobuf:"bytes,2,opt,name=dbpath" json:"dbpath,omitempty"`
	BackupDir     *string                `protobuf:"bytes,3,opt,name=backupDir" json:"backupDir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BackupDatabaseRequest) Reset() {
	*x = BackupDatabaseRequest{}
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BackupDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupDatabaseRequest) ProtoMessage() {}

func (x *BackupDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupDatabaseRequest.ProtoReflect.Descriptor instead.
func (*BackupDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescGZIP(), []int{4}
}

func (x *BackupDatabaseRequest) GetTablespace() string {
	if x != nil && x.Tablespace != nil {
		return *x.Tablespace
	}
	return ""
}

func (x *BackupDatabaseRequest) GetDbpath() string {
	if x != nil && x.Dbpath != nil {
		return *x.Dbpath
	}
	return ""
}

func (x *BackupDatabaseRequest) GetBackupDir() string {
	if x != nil && x.BackupDir != nil {
		return *x.BackupDir
	}
	return ""
}

type CompactDatabaseRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Tablespace *string                `protobuf:"bytes,1,opt,name=tablespace" json:"tablespace,omitempty"`
	Dbpath     *string                `protobuf:"bytes,2,opt,name=dbpath" json:"dbpath,omitempty"`
	// Column family
	//
	// Starting with Yamcs 5.9.0 the following column families are used:
	//
	// _metadata_
	//
	//	Stores information about tables, partitions
	//
	// rt_data
	//
	//	Stores the tm, pp and events tables
	//
	// parameter_archive
	//
	//	Stores the parameter archive
	//
	// default
	//
	//	Stores everything else: cmdhistory, alarms, completeness indices,
	//	timeline, activities, users, buckets, ...
	Cfname        *string `protobuf:"bytes,3,opt,name=cfname" json:"cfname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompactDatabaseRequest) Reset() {
	*x = CompactDatabaseRequest{}
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompactDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactDatabaseRequest) ProtoMessage() {}

func (x *CompactDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactDatabaseRequest.ProtoReflect.Descriptor instead.
func (*CompactDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescGZIP(), []int{5}
}

func (x *CompactDatabaseRequest) GetTablespace() string {
	if x != nil && x.Tablespace != nil {
		return *x.Tablespace
	}
	return ""
}

func (x *CompactDatabaseRequest) GetDbpath() string {
	if x != nil && x.Dbpath != nil {
		return *x.Dbpath
	}
	return ""
}

func (x *CompactDatabaseRequest) GetCfname() string {
	if x != nil && x.Cfname != nil {
		return *x.Cfname
	}
	return ""
}

type DescribeDatabaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tablespace    *string                `protobuf:"bytes,1,opt,name=tablespace" json:"tablespace,omitempty"`
	Dbpath        *string                `protobuf:"bytes,2,opt,name=dbpath" json:"dbpath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DescribeDatabaseRequest) Reset() {
	*x = DescribeDatabaseRequest{}
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DescribeDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeDatabaseRequest) ProtoMessage() {}

func (x *DescribeDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeDatabaseRequest.ProtoReflect.Descriptor instead.
func (*DescribeDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescGZIP(), []int{6}
}

func (x *DescribeDatabaseRequest) GetTablespace() string {
	if x != nil && x.Tablespace != nil {
		return *x.Tablespace
	}
	return ""
}

func (x *DescribeDatabaseRequest) GetDbpath() string {
	if x != nil && x.Dbpath != nil {
		return *x.Dbpath
	}
	return ""
}

var File_yamcs_protobuf_archive_rocksdb_service_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_archive_rocksdb_service_proto_rawDesc = string([]byte{
	0x0a, 0x2c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70,
	0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x1e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x73,
	0x44, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22, 0x90, 0x01,
	0x0a, 0x15, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x72, 0x12, 0x49, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x62, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x22, 0x69, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x62, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x52, 0x6f, 0x63,
	0x6b, 0x73, 0x44, 0x62, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x13, 0x52,
	0x6f, 0x63, 0x6b, 0x73, 0x44, 0x62, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x62, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x6d, 0x0a, 0x15, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x62, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x62, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44,
	0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x69, 0x72, 0x22, 0x68, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x62, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x62, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a,
	0x17, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x70, 0x61, 0x74, 0x68,
	0x32, 0xce, 0x07, 0x0a, 0x0a, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x62, 0x41, 0x70, 0x69, 0x12,
	0x89, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x36, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x62,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x8a, 0x92, 0x03, 0x22, 0x0a, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0xc3, 0x01, 0x0a, 0x0e,
	0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2d,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6a, 0x8a, 0x92, 0x03, 0x66, 0x62, 0x30, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x7d, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x75, 0x70, 0x20, 0x74,
	0x6f, 0x20, 0x7b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x69, 0x72, 0x7d, 0x1a, 0x32, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x6f, 0x63, 0x6b,
	0x73, 0x64, 0x62, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d,
	0x2f, 0x7b, 0x64, 0x62, 0x70, 0x61, 0x74, 0x68, 0x2a, 0x7d, 0x3a, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x34, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x62,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x8a, 0x92, 0x03, 0x20, 0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x6f, 0x63, 0x6b, 0x73, 0x64, 0x62, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x12, 0xcb, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x70, 0x8a, 0x92, 0x03, 0x6c, 0x3a, 0x01, 0x2a, 0x48, 0x01, 0x62, 0x2f,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x20, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x1a,
	0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x6f,
	0x63, 0x6b, 0x73, 0x64, 0x62, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x7d, 0x2f, 0x7b, 0x64, 0x62, 0x70, 0x61, 0x74, 0x68, 0x2a, 0x2a, 0x7d, 0x3a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x75, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x62, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x13, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74,
	0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x35, 0x8a, 0x92, 0x03, 0x31, 0x6a, 0x10, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x20, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x42, 0x0a, 0x1d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x6f, 0x63, 0x6b,
	0x73, 0x64, 0x62, 0x3a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x95, 0x01, 0x0a,
	0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x2f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x3b, 0x8a, 0x92, 0x03, 0x37, 0x0a, 0x35, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x72, 0x6f, 0x63, 0x6b,
	0x73, 0x64, 0x62, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d,
	0x2f, 0x7b, 0x64, 0x62, 0x70, 0x61, 0x74, 0x68, 0x2a, 0x2a, 0x7d, 0x3a, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x1a, 0x0b, 0x82, 0x80, 0x01, 0x07, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44,
	0x42, 0x42, 0x72, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x13, 0x52, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x62,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73,
	0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65,
})

var (
	file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescData []byte
)

func file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_archive_rocksdb_service_proto_rawDesc), len(file_yamcs_protobuf_archive_rocksdb_service_proto_rawDesc)))
	})
	return file_yamcs_protobuf_archive_rocksdb_service_proto_rawDescData
}

var file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_yamcs_protobuf_archive_rocksdb_service_proto_goTypes = []any{
	(*ListRocksDbTablespacesResponse)(nil), // 0: yamcs.protobuf.archive.ListRocksDbTablespacesResponse
	(*RocksDbTablespaceInfo)(nil),          // 1: yamcs.protobuf.archive.RocksDbTablespaceInfo
	(*ListRocksDbDatabasesResponse)(nil),   // 2: yamcs.protobuf.archive.ListRocksDbDatabasesResponse
	(*RocksDbDatabaseInfo)(nil),            // 3: yamcs.protobuf.archive.RocksDbDatabaseInfo
	(*BackupDatabaseRequest)(nil),          // 4: yamcs.protobuf.archive.BackupDatabaseRequest
	(*CompactDatabaseRequest)(nil),         // 5: yamcs.protobuf.archive.CompactDatabaseRequest
	(*DescribeDatabaseRequest)(nil),        // 6: yamcs.protobuf.archive.DescribeDatabaseRequest
	(*emptypb.Empty)(nil),                  // 7: google.protobuf.Empty
	(*api.HttpBody)(nil),                   // 8: yamcs.api.HttpBody
}
var file_yamcs_protobuf_archive_rocksdb_service_proto_depIdxs = []int32{
	1, // 0: yamcs.protobuf.archive.ListRocksDbTablespacesResponse.tablespaces:type_name -> yamcs.protobuf.archive.RocksDbTablespaceInfo
	3, // 1: yamcs.protobuf.archive.RocksDbTablespaceInfo.databases:type_name -> yamcs.protobuf.archive.RocksDbDatabaseInfo
	3, // 2: yamcs.protobuf.archive.ListRocksDbDatabasesResponse.databases:type_name -> yamcs.protobuf.archive.RocksDbDatabaseInfo
	7, // 3: yamcs.protobuf.archive.RocksDbApi.ListTablespaces:input_type -> google.protobuf.Empty
	4, // 4: yamcs.protobuf.archive.RocksDbApi.BackupDatabase:input_type -> yamcs.protobuf.archive.BackupDatabaseRequest
	7, // 5: yamcs.protobuf.archive.RocksDbApi.ListDatabases:input_type -> google.protobuf.Empty
	5, // 6: yamcs.protobuf.archive.RocksDbApi.CompactDatabase:input_type -> yamcs.protobuf.archive.CompactDatabaseRequest
	7, // 7: yamcs.protobuf.archive.RocksDbApi.DescribeRocksDb:input_type -> google.protobuf.Empty
	6, // 8: yamcs.protobuf.archive.RocksDbApi.DescribeDatabase:input_type -> yamcs.protobuf.archive.DescribeDatabaseRequest
	0, // 9: yamcs.protobuf.archive.RocksDbApi.ListTablespaces:output_type -> yamcs.protobuf.archive.ListRocksDbTablespacesResponse
	7, // 10: yamcs.protobuf.archive.RocksDbApi.BackupDatabase:output_type -> google.protobuf.Empty
	2, // 11: yamcs.protobuf.archive.RocksDbApi.ListDatabases:output_type -> yamcs.protobuf.archive.ListRocksDbDatabasesResponse
	7, // 12: yamcs.protobuf.archive.RocksDbApi.CompactDatabase:output_type -> google.protobuf.Empty
	8, // 13: yamcs.protobuf.archive.RocksDbApi.DescribeRocksDb:output_type -> yamcs.api.HttpBody
	8, // 14: yamcs.protobuf.archive.RocksDbApi.DescribeDatabase:output_type -> yamcs.api.HttpBody
	9, // [9:15] is the sub-list for method output_type
	3, // [3:9] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_archive_rocksdb_service_proto_init() }
func file_yamcs_protobuf_archive_rocksdb_service_proto_init() {
	if File_yamcs_protobuf_archive_rocksdb_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_archive_rocksdb_service_proto_rawDesc), len(file_yamcs_protobuf_archive_rocksdb_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_archive_rocksdb_service_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_archive_rocksdb_service_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_archive_rocksdb_service_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_archive_rocksdb_service_proto = out.File
	file_yamcs_protobuf_archive_rocksdb_service_proto_goTypes = nil
	file_yamcs_protobuf_archive_rocksdb_service_proto_depIdxs = nil
}
