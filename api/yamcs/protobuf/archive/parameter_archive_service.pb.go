// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/archive/parameter_archive_service.proto

package archive

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protobuf "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf"
	pvalue "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf/pvalue"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscribeBackfillingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance      *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeBackfillingRequest) Reset() {
	*x = SubscribeBackfillingRequest{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeBackfillingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBackfillingRequest) ProtoMessage() {}

func (x *SubscribeBackfillingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBackfillingRequest.ProtoReflect.Descriptor instead.
func (*SubscribeBackfillingRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeBackfillingRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type SubscribeBackfillingData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Recently finished backfills (bundled over a 5 second interval)
	Finished      []*SubscribeBackfillingData_BackfillFinishedInfo `protobuf:"bytes,1,rep,name=finished" json:"finished,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeBackfillingData) Reset() {
	*x = SubscribeBackfillingData{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeBackfillingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBackfillingData) ProtoMessage() {}

func (x *SubscribeBackfillingData) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBackfillingData.ProtoReflect.Descriptor instead.
func (*SubscribeBackfillingData) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeBackfillingData) GetFinished() []*SubscribeBackfillingData_BackfillFinishedInfo {
	if x != nil {
		return x.Finished
	}
	return nil
}

// Note that the archive is built in segments of approximatively 70 minutes,
// therefore the real start will be before the specified start and the real
// stop will be after the specified stop.
type RebuildRangeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Start rebuilding from here. Specify a date string in ISO 8601 format.
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// Rebuild until here. Specify a date string in ISO 8601 format.
	Stop          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebuildRangeRequest) Reset() {
	*x = RebuildRangeRequest{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebuildRangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildRangeRequest) ProtoMessage() {}

func (x *RebuildRangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildRangeRequest.ProtoReflect.Descriptor instead.
func (*RebuildRangeRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{2}
}

func (x *RebuildRangeRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *RebuildRangeRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *RebuildRangeRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

type PurgeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance      *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PurgeRequest) Reset() {
	*x = PurgeRequest{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PurgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeRequest) ProtoMessage() {}

func (x *PurgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeRequest.ProtoReflect.Descriptor instead.
func (*PurgeRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{3}
}

func (x *PurgeRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type GetParameterRangesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Parameter name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Filter the lower bound of the parameter's generation time. Specify a date
	// string in ISO 8601 format.
	Start *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the parameter's generation time. Specify a date
	// string in ISO 8601 format.
	Stop *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stop" json:"stop,omitempty"`
	// Time in milliseconds. Any gap (detected based on parameter expiration) smaller than
	// this will be ignored. However if the parameter changes value, the ranges will still
	// be split.
	MinGap *int64 `protobuf:"varint,5,opt,name=minGap" json:"minGap,omitempty"`
	// Time in milliseconds. If the distance between two subsequent values of the parameter
	// is bigger than this value (but smaller than the parameter expiration), then an
	// artificial gap will be constructed. This also applies if there is no parameter
	// expiration defined for the parameter.
	MaxGap *int64 `protobuf:"varint,6,opt,name=maxGap" json:"maxGap,omitempty"`
	// Disable loading of parameters from the parameter cache. Default: “false“.
	Norealtime *bool `protobuf:"varint,7,opt,name=norealtime" json:"norealtime,omitempty"`
	// The name of the processor from which to use the parameter cache. Default: “realtime“.
	Processor *string `protobuf:"bytes,8,opt,name=processor" json:"processor,omitempty"`
	// Specifies how to retrieve the parameters. Either “ParameterArchive“ or
	// “replay“. If “replay“ is specified, a replay processor will be created
	// and data will be processed with the active Mission Database. Note that this
	// is much slower than receiving data from the ParameterArchive.
	//
	// Default: “ParameterArchive“.
	Source *string `protobuf:"bytes,9,opt,name=source" json:"source,omitempty"`
	// Time in milliseconds of the minimum range to be returned. If the data changes more often,
	// a new range will not be created but the data will be added to the old range.
	MinRange *int64 `protobuf:"varint,10,opt,name=minRange" json:"minRange,omitempty"`
	// Maximum number of distinct values to be returned. The maximum number
	// applies across all ranges and is meant to limit the amount of data that
	// is being retrieved. The retrieved data has a count for each value as well
	// as a total count. The difference between the total count and the sum of the
	// individual counts can be used to compute the number of unsent values.
	MaxValues     *int32 `protobuf:"varint,11,opt,name=maxValues" json:"maxValues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetParameterRangesRequest) Reset() {
	*x = GetParameterRangesRequest{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetParameterRangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParameterRangesRequest) ProtoMessage() {}

func (x *GetParameterRangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParameterRangesRequest.ProtoReflect.Descriptor instead.
func (*GetParameterRangesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetParameterRangesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetParameterRangesRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetParameterRangesRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetParameterRangesRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *GetParameterRangesRequest) GetMinGap() int64 {
	if x != nil && x.MinGap != nil {
		return *x.MinGap
	}
	return 0
}

func (x *GetParameterRangesRequest) GetMaxGap() int64 {
	if x != nil && x.MaxGap != nil {
		return *x.MaxGap
	}
	return 0
}

func (x *GetParameterRangesRequest) GetNorealtime() bool {
	if x != nil && x.Norealtime != nil {
		return *x.Norealtime
	}
	return false
}

func (x *GetParameterRangesRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *GetParameterRangesRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *GetParameterRangesRequest) GetMinRange() int64 {
	if x != nil && x.MinRange != nil {
		return *x.MinRange
	}
	return 0
}

func (x *GetParameterRangesRequest) GetMaxValues() int32 {
	if x != nil && x.MaxValues != nil {
		return *x.MaxValues
	}
	return 0
}

// Get information about the parameters stored in the Parameter Archive
type GetArchivedParametersInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The search keywords.
	Q *string `protobuf:"bytes,2,opt,name=q" json:"q,omitempty"`
	// List only direct child parameters of the specified system.
	// Only the parameters whose fully qualified name start with system will be returned.
	//
	// When “system“ and “q“ are used together, the q search will be matched on the parameters
	// filtered by system.
	System *string `protobuf:"bytes,3,opt,name=system" json:"system,omitempty"`
	// The maximum number of returned parameters. Choose this value too
	// high and you risk hitting the maximum response size limit enforced by the
	// server. Default: “100“
	Limit         *int32 `protobuf:"varint,7,opt,name=limit" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArchivedParametersInfoRequest) Reset() {
	*x = GetArchivedParametersInfoRequest{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArchivedParametersInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArchivedParametersInfoRequest) ProtoMessage() {}

func (x *GetArchivedParametersInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArchivedParametersInfoRequest.ProtoReflect.Descriptor instead.
func (*GetArchivedParametersInfoRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetArchivedParametersInfoRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetArchivedParametersInfoRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *GetArchivedParametersInfoRequest) GetSystem() string {
	if x != nil && x.System != nil {
		return *x.System
	}
	return ""
}

func (x *GetArchivedParametersInfoRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type GetArchivedParameterSegmentsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// parameter id
	Pid *uint32 `protobuf:"varint,2,opt,name=pid" json:"pid,omitempty"`
	// get the segments overlapping with [start, stop) interval
	Start         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	Stop          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stop" json:"stop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArchivedParameterSegmentsRequest) Reset() {
	*x = GetArchivedParameterSegmentsRequest{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArchivedParameterSegmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArchivedParameterSegmentsRequest) ProtoMessage() {}

func (x *GetArchivedParameterSegmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArchivedParameterSegmentsRequest.ProtoReflect.Descriptor instead.
func (*GetArchivedParameterSegmentsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetArchivedParameterSegmentsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetArchivedParameterSegmentsRequest) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *GetArchivedParameterSegmentsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetArchivedParameterSegmentsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

// This message contains information about one parameter in the parameter archive.
// Each (parameter name, raw type, engineering type) is assigned a unique id and all
// the samples are stored with that id.
// If a MDB change results in the parameter having a different engineering or raw type,
// a new pid will be allocated.
// This is why for the same parameter name, we can have multiple parameter ids.
// The parameter archive will contain data even for parameters removed from the MDB
type ArchivedParameterInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// parameter id
	Pid *uint32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// parameter fully qualified name
	Fqn *string `protobuf:"bytes,2,opt,name=fqn" json:"fqn,omitempty"`
	// parameter raw type
	RawType *protobuf.Value_Type `protobuf:"varint,3,opt,name=rawType,enum=yamcs.protobuf.Value_Type" json:"rawType,omitempty"`
	// parameter engineering type
	EngType *protobuf.Value_Type `protobuf:"varint,4,opt,name=engType,enum=yamcs.protobuf.Value_Type" json:"engType,omitempty"`
	// the groups which this parameter is part of
	Gids          []uint32 `protobuf:"varint,5,rep,name=gids" json:"gids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchivedParameterInfo) Reset() {
	*x = ArchivedParameterInfo{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchivedParameterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchivedParameterInfo) ProtoMessage() {}

func (x *ArchivedParameterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchivedParameterInfo.ProtoReflect.Descriptor instead.
func (*ArchivedParameterInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{7}
}

func (x *ArchivedParameterInfo) GetPid() uint32 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ArchivedParameterInfo) GetFqn() string {
	if x != nil && x.Fqn != nil {
		return *x.Fqn
	}
	return ""
}

func (x *ArchivedParameterInfo) GetRawType() protobuf.Value_Type {
	if x != nil && x.RawType != nil {
		return *x.RawType
	}
	return protobuf.Value_Type(0)
}

func (x *ArchivedParameterInfo) GetEngType() protobuf.Value_Type {
	if x != nil && x.EngType != nil {
		return *x.EngType
	}
	return protobuf.Value_Type(0)
}

func (x *ArchivedParameterInfo) GetGids() []uint32 {
	if x != nil {
		return x.Gids
	}
	return nil
}

type ArchivedParametersInfoResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Parameters    []*ArchivedParameterInfo `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchivedParametersInfoResponse) Reset() {
	*x = ArchivedParametersInfoResponse{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchivedParametersInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchivedParametersInfoResponse) ProtoMessage() {}

func (x *ArchivedParametersInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchivedParametersInfoResponse.ProtoReflect.Descriptor instead.
func (*ArchivedParametersInfoResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{8}
}

func (x *ArchivedParametersInfoResponse) GetParameters() []*ArchivedParameterInfo {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ArchiveParameterSegmentInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Multiple parameters are grouped such that all in one group have
	// the same timestamps. For example: all parameters extracted from
	// one TM packet usually have the same timestamp.
	// This way we have a unique segment storing the timestamps for a
	// group of parameters. The groupId can be used to retrieve all parameters
	// from the same group.
	GroupId *uint32 `protobuf:"varint,1,opt,name=groupId" json:"groupId,omitempty"`
	// the segment start
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// the segment end
	End *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end" json:"end,omitempty"`
	// the number of samples in the segment
	Count         *uint32 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveParameterSegmentInfo) Reset() {
	*x = ArchiveParameterSegmentInfo{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveParameterSegmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveParameterSegmentInfo) ProtoMessage() {}

func (x *ArchiveParameterSegmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveParameterSegmentInfo.ProtoReflect.Descriptor instead.
func (*ArchiveParameterSegmentInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{9}
}

func (x *ArchiveParameterSegmentInfo) GetGroupId() uint32 {
	if x != nil && x.GroupId != nil {
		return *x.GroupId
	}
	return 0
}

func (x *ArchiveParameterSegmentInfo) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ArchiveParameterSegmentInfo) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *ArchiveParameterSegmentInfo) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

// Recorded segments for the requested parameter
type ArchivedParameterSegmentsResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ParameterInfo *ArchivedParameterInfo         `protobuf:"bytes,1,opt,name=parameterInfo" json:"parameterInfo,omitempty"`
	Segments      []*ArchiveParameterSegmentInfo `protobuf:"bytes,2,rep,name=segments" json:"segments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchivedParameterSegmentsResponse) Reset() {
	*x = ArchivedParameterSegmentsResponse{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchivedParameterSegmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchivedParameterSegmentsResponse) ProtoMessage() {}

func (x *ArchivedParameterSegmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchivedParameterSegmentsResponse.ProtoReflect.Descriptor instead.
func (*ArchivedParameterSegmentsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{10}
}

func (x *ArchivedParameterSegmentsResponse) GetParameterInfo() *ArchivedParameterInfo {
	if x != nil {
		return x.ParameterInfo
	}
	return nil
}

func (x *ArchivedParameterSegmentsResponse) GetSegments() []*ArchiveParameterSegmentInfo {
	if x != nil {
		return x.Segments
	}
	return nil
}

type GetArchivedParameterGroupRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Group identifier
	Gid           *uint32 `protobuf:"varint,2,opt,name=gid" json:"gid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArchivedParameterGroupRequest) Reset() {
	*x = GetArchivedParameterGroupRequest{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArchivedParameterGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArchivedParameterGroupRequest) ProtoMessage() {}

func (x *GetArchivedParameterGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArchivedParameterGroupRequest.ProtoReflect.Descriptor instead.
func (*GetArchivedParameterGroupRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetArchivedParameterGroupRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetArchivedParameterGroupRequest) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

type ArchivedParameterGroupResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Group identifier
	Gid *uint32 `protobuf:"varint,1,opt,name=gid" json:"gid,omitempty"`
	// Parameters belonging to the group
	Parameters    []*ArchivedParameterInfo `protobuf:"bytes,2,rep,name=parameters" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchivedParameterGroupResponse) Reset() {
	*x = ArchivedParameterGroupResponse{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchivedParameterGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchivedParameterGroupResponse) ProtoMessage() {}

func (x *ArchivedParameterGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchivedParameterGroupResponse.ProtoReflect.Descriptor instead.
func (*ArchivedParameterGroupResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{12}
}

func (x *ArchivedParameterGroupResponse) GetGid() uint32 {
	if x != nil && x.Gid != nil {
		return *x.Gid
	}
	return 0
}

func (x *ArchivedParameterGroupResponse) GetParameters() []*ArchivedParameterInfo {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Notification message when a backfill finished
type SubscribeBackfillingData_BackfillFinishedInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Range start
	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	// Range stop
	Stop *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=stop" json:"stop,omitempty"`
	// Number of processed parameters
	ProcessedParameters *uint64 `protobuf:"varint,3,opt,name=processedParameters" json:"processedParameters,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SubscribeBackfillingData_BackfillFinishedInfo) Reset() {
	*x = SubscribeBackfillingData_BackfillFinishedInfo{}
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeBackfillingData_BackfillFinishedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBackfillingData_BackfillFinishedInfo) ProtoMessage() {}

func (x *SubscribeBackfillingData_BackfillFinishedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBackfillingData_BackfillFinishedInfo.ProtoReflect.Descriptor instead.
func (*SubscribeBackfillingData_BackfillFinishedInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *SubscribeBackfillingData_BackfillFinishedInfo) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *SubscribeBackfillingData_BackfillFinishedInfo) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *SubscribeBackfillingData_BackfillFinishedInfo) GetProcessedParameters() uint64 {
	if x != nil && x.ProcessedParameters != nil {
		return *x.ProcessedParameters
	}
	return 0
}

var File_yamcs_protobuf_archive_parameter_archive_service_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDesc = string([]byte{
	0x0a, 0x36, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x39, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xaa, 0x02, 0x0a,
	0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x61, 0x0a, 0x08, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x1a, 0xaa, 0x01, 0x0a,
	0x14, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x52, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x22,
	0x2a, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x47, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x69, 0x6e,
	0x47, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x6f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6e, 0x6f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x30, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x22,
	0xbb, 0x01, 0x0a, 0x15, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66,
	0x71, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x71, 0x6e, 0x12, 0x34, 0x0a,
	0x07, 0x72, 0x61, 0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x61, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x65, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x69, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x69, 0x64, 0x73, 0x22, 0x6f, 0x0a,
	0x1e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xad,
	0x01, 0x0a, 0x1b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc9,
	0x01, 0x0a, 0x21, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x08, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x1e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x69,
	0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x32, 0xce, 0x0c, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x41, 0x70, 0x69, 0x12, 0x90, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3b,
	0x8a, 0x92, 0x03, 0x37, 0x3a, 0x01, 0x2a, 0x48, 0x01, 0x1a, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x3a, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0xae, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x40, 0x8a, 0x92, 0x03, 0x3c,
	0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x0a, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x2a, 0x7d, 0x2f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0xa6, 0x01, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x3e, 0x8a, 0x92, 0x03, 0x3a, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x0a, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x2f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x33,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x8a, 0x92, 0x03, 0x2c, 0x0a,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x12, 0xcd, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x8a, 0x92, 0x03,
	0x3a, 0x0a, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x6f,
	0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0xdb, 0x01, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x8a, 0x92, 0x03, 0x3f, 0x0a, 0x3d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x69, 0x64, 0x2a, 0x7d, 0x12, 0xd0, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x8a, 0x92, 0x03, 0x3d, 0x0a,
	0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x69, 0x64, 0x2a, 0x7d, 0x12, 0x7e, 0x0a, 0x05,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x50,
	0x75, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x37, 0x8a, 0x92, 0x03, 0x33, 0x3a, 0x01, 0x2a, 0x1a, 0x2e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x3a, 0x70, 0x75, 0x72, 0x67, 0x65, 0x12, 0x92, 0x01, 0x0a,
	0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x11, 0xda, 0x92,
	0x03, 0x0d, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x30,
	0x01, 0x42, 0x7b, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x1c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f,
	0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61,
	0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
})

var (
	file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescData []byte
)

func file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDesc), len(file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDesc)))
	})
	return file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDescData
}

var file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_yamcs_protobuf_archive_parameter_archive_service_proto_goTypes = []any{
	(*SubscribeBackfillingRequest)(nil),                   // 0: yamcs.protobuf.archive.SubscribeBackfillingRequest
	(*SubscribeBackfillingData)(nil),                      // 1: yamcs.protobuf.archive.SubscribeBackfillingData
	(*RebuildRangeRequest)(nil),                           // 2: yamcs.protobuf.archive.RebuildRangeRequest
	(*PurgeRequest)(nil),                                  // 3: yamcs.protobuf.archive.PurgeRequest
	(*GetParameterRangesRequest)(nil),                     // 4: yamcs.protobuf.archive.GetParameterRangesRequest
	(*GetArchivedParametersInfoRequest)(nil),              // 5: yamcs.protobuf.archive.GetArchivedParametersInfoRequest
	(*GetArchivedParameterSegmentsRequest)(nil),           // 6: yamcs.protobuf.archive.GetArchivedParameterSegmentsRequest
	(*ArchivedParameterInfo)(nil),                         // 7: yamcs.protobuf.archive.ArchivedParameterInfo
	(*ArchivedParametersInfoResponse)(nil),                // 8: yamcs.protobuf.archive.ArchivedParametersInfoResponse
	(*ArchiveParameterSegmentInfo)(nil),                   // 9: yamcs.protobuf.archive.ArchiveParameterSegmentInfo
	(*ArchivedParameterSegmentsResponse)(nil),             // 10: yamcs.protobuf.archive.ArchivedParameterSegmentsResponse
	(*GetArchivedParameterGroupRequest)(nil),              // 11: yamcs.protobuf.archive.GetArchivedParameterGroupRequest
	(*ArchivedParameterGroupResponse)(nil),                // 12: yamcs.protobuf.archive.ArchivedParameterGroupResponse
	(*SubscribeBackfillingData_BackfillFinishedInfo)(nil), // 13: yamcs.protobuf.archive.SubscribeBackfillingData.BackfillFinishedInfo
	(*timestamppb.Timestamp)(nil),                         // 14: google.protobuf.Timestamp
	(protobuf.Value_Type)(0),                              // 15: yamcs.protobuf.Value.Type
	(*GetParameterSamplesRequest)(nil),                    // 16: yamcs.protobuf.archive.GetParameterSamplesRequest
	(*ListParameterHistoryRequest)(nil),                   // 17: yamcs.protobuf.archive.ListParameterHistoryRequest
	(*emptypb.Empty)(nil),                                 // 18: google.protobuf.Empty
	(*pvalue.TimeSeries)(nil),                             // 19: yamcs.protobuf.pvalue.TimeSeries
	(*pvalue.Ranges)(nil),                                 // 20: yamcs.protobuf.pvalue.Ranges
	(*ListParameterHistoryResponse)(nil),                  // 21: yamcs.protobuf.archive.ListParameterHistoryResponse
}
var file_yamcs_protobuf_archive_parameter_archive_service_proto_depIdxs = []int32{
	13, // 0: yamcs.protobuf.archive.SubscribeBackfillingData.finished:type_name -> yamcs.protobuf.archive.SubscribeBackfillingData.BackfillFinishedInfo
	14, // 1: yamcs.protobuf.archive.RebuildRangeRequest.start:type_name -> google.protobuf.Timestamp
	14, // 2: yamcs.protobuf.archive.RebuildRangeRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 3: yamcs.protobuf.archive.GetParameterRangesRequest.start:type_name -> google.protobuf.Timestamp
	14, // 4: yamcs.protobuf.archive.GetParameterRangesRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 5: yamcs.protobuf.archive.GetArchivedParameterSegmentsRequest.start:type_name -> google.protobuf.Timestamp
	14, // 6: yamcs.protobuf.archive.GetArchivedParameterSegmentsRequest.stop:type_name -> google.protobuf.Timestamp
	15, // 7: yamcs.protobuf.archive.ArchivedParameterInfo.rawType:type_name -> yamcs.protobuf.Value.Type
	15, // 8: yamcs.protobuf.archive.ArchivedParameterInfo.engType:type_name -> yamcs.protobuf.Value.Type
	7,  // 9: yamcs.protobuf.archive.ArchivedParametersInfoResponse.parameters:type_name -> yamcs.protobuf.archive.ArchivedParameterInfo
	14, // 10: yamcs.protobuf.archive.ArchiveParameterSegmentInfo.start:type_name -> google.protobuf.Timestamp
	14, // 11: yamcs.protobuf.archive.ArchiveParameterSegmentInfo.end:type_name -> google.protobuf.Timestamp
	7,  // 12: yamcs.protobuf.archive.ArchivedParameterSegmentsResponse.parameterInfo:type_name -> yamcs.protobuf.archive.ArchivedParameterInfo
	9,  // 13: yamcs.protobuf.archive.ArchivedParameterSegmentsResponse.segments:type_name -> yamcs.protobuf.archive.ArchiveParameterSegmentInfo
	7,  // 14: yamcs.protobuf.archive.ArchivedParameterGroupResponse.parameters:type_name -> yamcs.protobuf.archive.ArchivedParameterInfo
	14, // 15: yamcs.protobuf.archive.SubscribeBackfillingData.BackfillFinishedInfo.start:type_name -> google.protobuf.Timestamp
	14, // 16: yamcs.protobuf.archive.SubscribeBackfillingData.BackfillFinishedInfo.stop:type_name -> google.protobuf.Timestamp
	2,  // 17: yamcs.protobuf.archive.ParameterArchiveApi.RebuildRange:input_type -> yamcs.protobuf.archive.RebuildRangeRequest
	16, // 18: yamcs.protobuf.archive.ParameterArchiveApi.GetParameterSamples:input_type -> yamcs.protobuf.archive.GetParameterSamplesRequest
	4,  // 19: yamcs.protobuf.archive.ParameterArchiveApi.GetParameterRanges:input_type -> yamcs.protobuf.archive.GetParameterRangesRequest
	17, // 20: yamcs.protobuf.archive.ParameterArchiveApi.ListParameterHistory:input_type -> yamcs.protobuf.archive.ListParameterHistoryRequest
	5,  // 21: yamcs.protobuf.archive.ParameterArchiveApi.GetArchivedParametersInfo:input_type -> yamcs.protobuf.archive.GetArchivedParametersInfoRequest
	6,  // 22: yamcs.protobuf.archive.ParameterArchiveApi.GetArchivedParameterSegments:input_type -> yamcs.protobuf.archive.GetArchivedParameterSegmentsRequest
	11, // 23: yamcs.protobuf.archive.ParameterArchiveApi.GetArchivedParameterGroup:input_type -> yamcs.protobuf.archive.GetArchivedParameterGroupRequest
	3,  // 24: yamcs.protobuf.archive.ParameterArchiveApi.Purge:input_type -> yamcs.protobuf.archive.PurgeRequest
	0,  // 25: yamcs.protobuf.archive.ParameterArchiveApi.SubscribeBackfilling:input_type -> yamcs.protobuf.archive.SubscribeBackfillingRequest
	18, // 26: yamcs.protobuf.archive.ParameterArchiveApi.RebuildRange:output_type -> google.protobuf.Empty
	19, // 27: yamcs.protobuf.archive.ParameterArchiveApi.GetParameterSamples:output_type -> yamcs.protobuf.pvalue.TimeSeries
	20, // 28: yamcs.protobuf.archive.ParameterArchiveApi.GetParameterRanges:output_type -> yamcs.protobuf.pvalue.Ranges
	21, // 29: yamcs.protobuf.archive.ParameterArchiveApi.ListParameterHistory:output_type -> yamcs.protobuf.archive.ListParameterHistoryResponse
	8,  // 30: yamcs.protobuf.archive.ParameterArchiveApi.GetArchivedParametersInfo:output_type -> yamcs.protobuf.archive.ArchivedParametersInfoResponse
	10, // 31: yamcs.protobuf.archive.ParameterArchiveApi.GetArchivedParameterSegments:output_type -> yamcs.protobuf.archive.ArchivedParameterSegmentsResponse
	12, // 32: yamcs.protobuf.archive.ParameterArchiveApi.GetArchivedParameterGroup:output_type -> yamcs.protobuf.archive.ArchivedParameterGroupResponse
	18, // 33: yamcs.protobuf.archive.ParameterArchiveApi.Purge:output_type -> google.protobuf.Empty
	1,  // 34: yamcs.protobuf.archive.ParameterArchiveApi.SubscribeBackfilling:output_type -> yamcs.protobuf.archive.SubscribeBackfillingData
	26, // [26:35] is the sub-list for method output_type
	17, // [17:26] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_archive_parameter_archive_service_proto_init() }
func file_yamcs_protobuf_archive_parameter_archive_service_proto_init() {
	if File_yamcs_protobuf_archive_parameter_archive_service_proto != nil {
		return
	}
	file_yamcs_protobuf_archive_archive_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDesc), len(file_yamcs_protobuf_archive_parameter_archive_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_archive_parameter_archive_service_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_archive_parameter_archive_service_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_archive_parameter_archive_service_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_archive_parameter_archive_service_proto = out.File
	file_yamcs_protobuf_archive_parameter_archive_service_proto_goTypes = nil
	file_yamcs_protobuf_archive_parameter_archive_service_proto_depIdxs = nil
}
