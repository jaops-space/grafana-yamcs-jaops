// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/table/table.proto

package table

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protobuf "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf"
	yamcsManagement "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf/yamcsManagement"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartitioningInfo_PartitioningType int32

const (
	PartitioningInfo_TIME           PartitioningInfo_PartitioningType = 1
	PartitioningInfo_VALUE          PartitioningInfo_PartitioningType = 2
	PartitioningInfo_TIME_AND_VALUE PartitioningInfo_PartitioningType = 3
)

// Enum value maps for PartitioningInfo_PartitioningType.
var (
	PartitioningInfo_PartitioningType_name = map[int32]string{
		1: "TIME",
		2: "VALUE",
		3: "TIME_AND_VALUE",
	}
	PartitioningInfo_PartitioningType_value = map[string]int32{
		"TIME":           1,
		"VALUE":          2,
		"TIME_AND_VALUE": 3,
	}
)

func (x PartitioningInfo_PartitioningType) Enum() *PartitioningInfo_PartitioningType {
	p := new(PartitioningInfo_PartitioningType)
	*p = x
	return p
}

func (x PartitioningInfo_PartitioningType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitioningInfo_PartitioningType) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_table_table_proto_enumTypes[0].Descriptor()
}

func (PartitioningInfo_PartitioningType) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_table_table_proto_enumTypes[0]
}

func (x PartitioningInfo_PartitioningType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PartitioningInfo_PartitioningType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PartitioningInfo_PartitioningType(num)
	return nil
}

// Deprecated: Use PartitioningInfo_PartitioningType.Descriptor instead.
func (PartitioningInfo_PartitioningType) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{23, 0}
}

type Row struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the column info is only present for new columns in a stream of Row messages
	Columns       []*Row_ColumnInfo `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	Cells         []*Row_Cell       `protobuf:"bytes,2,rep,name=cells" json:"cells,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Row) Reset() {
	*x = Row{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{0}
}

func (x *Row) GetColumns() []*Row_ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *Row) GetCells() []*Row_Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

type ReadRowsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Table name.
	Table *string `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	// The columns to be included in the result. If unspecified, all
	// table and/or additional tuple columns will be included.
	Cols []string `protobuf:"bytes,3,rep,name=cols" json:"cols,omitempty"`
	// Limit the results by specifying a SQL WHERE clause.
	//
	// Examples:
	// - pname = '/YSS/SIMULATOR/FlightData'
	// - gentime > '2023-01-01T00:00:00.000Z'
	// - pname = '/YSS/SIMULATOR/FlightData' and gentime > '2023-01-01T00:00:00.000Z'
	Query         *string `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadRowsRequest) Reset() {
	*x = ReadRowsRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadRowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRowsRequest) ProtoMessage() {}

func (x *ReadRowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRowsRequest.ProtoReflect.Descriptor instead.
func (*ReadRowsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{1}
}

func (x *ReadRowsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ReadRowsRequest) GetTable() string {
	if x != nil && x.Table != nil {
		return *x.Table
	}
	return ""
}

func (x *ReadRowsRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *ReadRowsRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

type WriteRowsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Table name.
	Table         *string `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	Row           *Row    `protobuf:"bytes,3,opt,name=row" json:"row,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRowsRequest) Reset() {
	*x = WriteRowsRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRowsRequest) ProtoMessage() {}

func (x *WriteRowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRowsRequest.ProtoReflect.Descriptor instead.
func (*WriteRowsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{2}
}

func (x *WriteRowsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *WriteRowsRequest) GetTable() string {
	if x != nil && x.Table != nil {
		return *x.Table
	}
	return ""
}

func (x *WriteRowsRequest) GetRow() *Row {
	if x != nil {
		return x.Row
	}
	return nil
}

type WriteRowsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of rows that were written
	Count         *uint32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRowsResponse) Reset() {
	*x = WriteRowsResponse{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRowsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRowsResponse) ProtoMessage() {}

func (x *WriteRowsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRowsResponse.ProtoReflect.Descriptor instead.
func (*WriteRowsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{3}
}

func (x *WriteRowsResponse) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type WriteRowsExceptionDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Count         *uint32                `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteRowsExceptionDetail) Reset() {
	*x = WriteRowsExceptionDetail{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteRowsExceptionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRowsExceptionDetail) ProtoMessage() {}

func (x *WriteRowsExceptionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRowsExceptionDetail.ProtoReflect.Descriptor instead.
func (*WriteRowsExceptionDetail) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{4}
}

func (x *WriteRowsExceptionDetail) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ListValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Values        []*protobuf.Value      `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListValue) Reset() {
	*x = ListValue{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListValue) ProtoMessage() {}

func (x *ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListValue.ProtoReflect.Descriptor instead.
func (*ListValue) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{5}
}

func (x *ListValue) GetValues() []*protobuf.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type ExecuteSqlRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// StreamSQL statement
	Statement     *string `protobuf:"bytes,2,opt,name=statement" json:"statement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecuteSqlRequest) Reset() {
	*x = ExecuteSqlRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecuteSqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSqlRequest) ProtoMessage() {}

func (x *ExecuteSqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSqlRequest.ProtoReflect.Descriptor instead.
func (*ExecuteSqlRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{6}
}

func (x *ExecuteSqlRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ExecuteSqlRequest) GetStatement() string {
	if x != nil && x.Statement != nil {
		return *x.Statement
	}
	return ""
}

type ResultSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Columns       []*ColumnInfo          `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	Rows          []*ListValue           `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResultSet) Reset() {
	*x = ResultSet{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResultSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultSet) ProtoMessage() {}

func (x *ResultSet) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultSet.ProtoReflect.Descriptor instead.
func (*ResultSet) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{7}
}

func (x *ResultSet) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ResultSet) GetRows() []*ListValue {
	if x != nil {
		return x.Rows
	}
	return nil
}

type ListTablesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance      *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablesRequest) Reset() {
	*x = ListTablesRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesRequest) ProtoMessage() {}

func (x *ListTablesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesRequest.ProtoReflect.Descriptor instead.
func (*ListTablesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{8}
}

func (x *ListTablesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type ListTablesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        []*TableInfo           `protobuf:"bytes,1,rep,name=tables" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTablesResponse) Reset() {
	*x = ListTablesResponse{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTablesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTablesResponse) ProtoMessage() {}

func (x *ListTablesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTablesResponse.ProtoReflect.Descriptor instead.
func (*ListTablesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{9}
}

func (x *ListTablesResponse) GetTables() []*TableInfo {
	if x != nil {
		return x.Tables
	}
	return nil
}

type GetTableRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Table name.
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTableRequest) Reset() {
	*x = GetTableRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRequest) ProtoMessage() {}

func (x *GetTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRequest.ProtoReflect.Descriptor instead.
func (*GetTableRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{10}
}

func (x *GetTableRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetTableRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type GetTableDataRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Table name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The columns to be included in the result. If unspecified, all table
	// and/or additional tuple columns will be included.
	Cols []string `protobuf:"bytes,3,rep,name=cols" json:"cols,omitempty"`
	// The zero-based row number at which to start outputting results. Default: “0“
	// Note that in the current rocksdb storage engine there is no way to jump to a row by its number.
	// This is why such a request will do a table scan and can be slow for large values of pos.
	Pos *int64 `protobuf:"varint,4,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned records per page. Choose this value
	// too high and you risk hitting the maximum response size limit
	// enforced by the server. Default: “100“
	Limit *int32 `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	// The direction of the sort. Sorting is always done on the key of the
	// table. Can be either “asc“ or “desc“. Default: “desc“
	Order         *string `protobuf:"bytes,6,opt,name=order" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTableDataRequest) Reset() {
	*x = GetTableDataRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTableDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableDataRequest) ProtoMessage() {}

func (x *GetTableDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableDataRequest.ProtoReflect.Descriptor instead.
func (*GetTableDataRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{11}
}

func (x *GetTableDataRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetTableDataRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetTableDataRequest) GetCols() []string {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *GetTableDataRequest) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *GetTableDataRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *GetTableDataRequest) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

type ListStreamsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance      *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStreamsRequest) Reset() {
	*x = ListStreamsRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamsRequest) ProtoMessage() {}

func (x *ListStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamsRequest.ProtoReflect.Descriptor instead.
func (*ListStreamsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{12}
}

func (x *ListStreamsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type ListStreamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streams       []*StreamInfo          `protobuf:"bytes,1,rep,name=streams" json:"streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStreamsResponse) Reset() {
	*x = ListStreamsResponse{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamsResponse) ProtoMessage() {}

func (x *ListStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamsResponse.ProtoReflect.Descriptor instead.
func (*ListStreamsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{13}
}

func (x *ListStreamsResponse) GetStreams() []*StreamInfo {
	if x != nil {
		return x.Streams
	}
	return nil
}

type GetStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Stream name
	Name          *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamRequest) Reset() {
	*x = GetStreamRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamRequest) ProtoMessage() {}

func (x *GetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamRequest.ProtoReflect.Descriptor instead.
func (*GetStreamRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{14}
}

func (x *GetStreamRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetStreamRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type SubscribeStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Stream name
	Stream        *string `protobuf:"bytes,2,opt,name=stream" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeStreamRequest) Reset() {
	*x = SubscribeStreamRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStreamRequest) ProtoMessage() {}

func (x *SubscribeStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStreamRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStreamRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{15}
}

func (x *SubscribeStreamRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeStreamRequest) GetStream() string {
	if x != nil && x.Stream != nil {
		return *x.Stream
	}
	return ""
}

type ColumnData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value         *protobuf.Value        `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnData) Reset() {
	*x = ColumnData{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnData) ProtoMessage() {}

func (x *ColumnData) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnData.ProtoReflect.Descriptor instead.
func (*ColumnData) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{16}
}

func (x *ColumnData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ColumnData) GetValue() *protobuf.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type StreamData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stream        *string                `protobuf:"bytes,1,opt,name=stream" json:"stream,omitempty"`
	Column        []*ColumnData          `protobuf:"bytes,2,rep,name=column" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamData) Reset() {
	*x = StreamData{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamData) ProtoMessage() {}

func (x *StreamData) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamData.ProtoReflect.Descriptor instead.
func (*StreamData) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{17}
}

func (x *StreamData) GetStream() string {
	if x != nil && x.Stream != nil {
		return *x.Stream
	}
	return ""
}

func (x *StreamData) GetColumn() []*ColumnData {
	if x != nil {
		return x.Column
	}
	return nil
}

type SubscribeStreamStatisticsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instance      *string                `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeStreamStatisticsRequest) Reset() {
	*x = SubscribeStreamStatisticsRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeStreamStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeStreamStatisticsRequest) ProtoMessage() {}

func (x *SubscribeStreamStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeStreamStatisticsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeStreamStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{18}
}

func (x *SubscribeStreamStatisticsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type TableData struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Record        []*TableData_TableRecord `protobuf:"bytes,1,rep,name=record" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableData) Reset() {
	*x = TableData{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData) ProtoMessage() {}

func (x *TableData) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData.ProtoReflect.Descriptor instead.
func (*TableData) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{19}
}

func (x *TableData) GetRecord() []*TableData_TableRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type ColumnInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Colum name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Column type
	Type      *string      `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	EnumValue []*EnumValue `protobuf:"bytes,3,rep,name=enumValue" json:"enumValue,omitempty"`
	// Attribute indicating automatic auto increment upon
	// record insertion. Only set for table column info.
	AutoIncrement *bool `protobuf:"varint,4,opt,name=autoIncrement" json:"autoIncrement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnInfo) Reset() {
	*x = ColumnInfo{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnInfo) ProtoMessage() {}

func (x *ColumnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnInfo.ProtoReflect.Descriptor instead.
func (*ColumnInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{20}
}

func (x *ColumnInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ColumnInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *ColumnInfo) GetEnumValue() []*EnumValue {
	if x != nil {
		return x.EnumValue
	}
	return nil
}

func (x *ColumnInfo) GetAutoIncrement() bool {
	if x != nil && x.AutoIncrement != nil {
		return *x.AutoIncrement
	}
	return false
}

type EnumValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         *int32                 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Label         *string                `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumValue) Reset() {
	*x = EnumValue{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValue) ProtoMessage() {}

func (x *EnumValue) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValue.ProtoReflect.Descriptor instead.
func (*EnumValue) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{21}
}

func (x *EnumValue) GetValue() int32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *EnumValue) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

type TableInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Table name
	Name             *string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	KeyColumn        []*ColumnInfo     `protobuf:"bytes,2,rep,name=keyColumn" json:"keyColumn,omitempty"`
	ValueColumn      []*ColumnInfo     `protobuf:"bytes,3,rep,name=valueColumn" json:"valueColumn,omitempty"`
	Script           *string           `protobuf:"bytes,4,opt,name=script" json:"script,omitempty"`
	HistogramColumn  []string          `protobuf:"bytes,5,rep,name=histogramColumn" json:"histogramColumn,omitempty"`
	StorageEngine    *string           `protobuf:"bytes,6,opt,name=storageEngine" json:"storageEngine,omitempty"`
	FormatVersion    *int32            `protobuf:"varint,7,opt,name=formatVersion" json:"formatVersion,omitempty"`
	Tablespace       *string           `protobuf:"bytes,8,opt,name=tablespace" json:"tablespace,omitempty"`
	Compressed       *bool             `protobuf:"varint,9,opt,name=compressed" json:"compressed,omitempty"`
	PartitioningInfo *PartitioningInfo `protobuf:"bytes,10,opt,name=partitioningInfo" json:"partitioningInfo,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TableInfo) Reset() {
	*x = TableInfo{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableInfo) ProtoMessage() {}

func (x *TableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableInfo.ProtoReflect.Descriptor instead.
func (*TableInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{22}
}

func (x *TableInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TableInfo) GetKeyColumn() []*ColumnInfo {
	if x != nil {
		return x.KeyColumn
	}
	return nil
}

func (x *TableInfo) GetValueColumn() []*ColumnInfo {
	if x != nil {
		return x.ValueColumn
	}
	return nil
}

func (x *TableInfo) GetScript() string {
	if x != nil && x.Script != nil {
		return *x.Script
	}
	return ""
}

func (x *TableInfo) GetHistogramColumn() []string {
	if x != nil {
		return x.HistogramColumn
	}
	return nil
}

func (x *TableInfo) GetStorageEngine() string {
	if x != nil && x.StorageEngine != nil {
		return *x.StorageEngine
	}
	return ""
}

func (x *TableInfo) GetFormatVersion() int32 {
	if x != nil && x.FormatVersion != nil {
		return *x.FormatVersion
	}
	return 0
}

func (x *TableInfo) GetTablespace() string {
	if x != nil && x.Tablespace != nil {
		return *x.Tablespace
	}
	return ""
}

func (x *TableInfo) GetCompressed() bool {
	if x != nil && x.Compressed != nil {
		return *x.Compressed
	}
	return false
}

func (x *TableInfo) GetPartitioningInfo() *PartitioningInfo {
	if x != nil {
		return x.PartitioningInfo
	}
	return nil
}

type PartitioningInfo struct {
	state               protoimpl.MessageState             `protogen:"open.v1"`
	Type                *PartitioningInfo_PartitioningType `protobuf:"varint,1,opt,name=type,enum=yamcs.protobuf.table.PartitioningInfo_PartitioningType" json:"type,omitempty"`
	TimeColumn          *string                            `protobuf:"bytes,2,opt,name=timeColumn" json:"timeColumn,omitempty"`
	TimePartitionSchema *string                            `protobuf:"bytes,3,opt,name=timePartitionSchema" json:"timePartitionSchema,omitempty"`
	ValueColumn         *string                            `protobuf:"bytes,4,opt,name=valueColumn" json:"valueColumn,omitempty"`
	ValueColumnType     *string                            `protobuf:"bytes,5,opt,name=valueColumnType" json:"valueColumnType,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PartitioningInfo) Reset() {
	*x = PartitioningInfo{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitioningInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitioningInfo) ProtoMessage() {}

func (x *PartitioningInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitioningInfo.ProtoReflect.Descriptor instead.
func (*PartitioningInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{23}
}

func (x *PartitioningInfo) GetType() PartitioningInfo_PartitioningType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PartitioningInfo_TIME
}

func (x *PartitioningInfo) GetTimeColumn() string {
	if x != nil && x.TimeColumn != nil {
		return *x.TimeColumn
	}
	return ""
}

func (x *PartitioningInfo) GetTimePartitionSchema() string {
	if x != nil && x.TimePartitionSchema != nil {
		return *x.TimePartitionSchema
	}
	return ""
}

func (x *PartitioningInfo) GetValueColumn() string {
	if x != nil && x.ValueColumn != nil {
		return *x.ValueColumn
	}
	return ""
}

func (x *PartitioningInfo) GetValueColumnType() string {
	if x != nil && x.ValueColumnType != nil {
		return *x.ValueColumnType
	}
	return ""
}

type StreamInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stream name
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Deprecated: Marked as deprecated in yamcs/protobuf/table/table.proto.
	Column    []*ColumnInfo `protobuf:"bytes,2,rep,name=column" json:"column,omitempty"`
	Columns   []*ColumnInfo `protobuf:"bytes,5,rep,name=columns" json:"columns,omitempty"`
	Script    *string       `protobuf:"bytes,3,opt,name=script" json:"script,omitempty"`
	DataCount *int64        `protobuf:"varint,4,opt,name=dataCount" json:"dataCount,omitempty"`
	// Subscribers represented in the format “className@hashCode“.
	Subscribers   []string `protobuf:"bytes,6,rep,name=subscribers" json:"subscribers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamInfo) Reset() {
	*x = StreamInfo{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamInfo) ProtoMessage() {}

func (x *StreamInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamInfo.ProtoReflect.Descriptor instead.
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{24}
}

func (x *StreamInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Deprecated: Marked as deprecated in yamcs/protobuf/table/table.proto.
func (x *StreamInfo) GetColumn() []*ColumnInfo {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *StreamInfo) GetColumns() []*ColumnInfo {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *StreamInfo) GetScript() string {
	if x != nil && x.Script != nil {
		return *x.Script
	}
	return ""
}

func (x *StreamInfo) GetDataCount() int64 {
	if x != nil && x.DataCount != nil {
		return *x.DataCount
	}
	return 0
}

func (x *StreamInfo) GetSubscribers() []string {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

type RebuildHistogramRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Table name.
	Table *string `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
	// Specify a date string in ISO 8601 format. The histogram data for all
	// partitions overlapping with the [start, stop] interval will be
	// recreated.
	// If not specified, it is assumed as the start of the archive.
	Start *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	// Specify a date string in ISO 8601 format. The histogram data for all
	// partitions overlapping with the [start, stop] interval will be
	// recreated.
	// If not specified, it is assumed as the end of of the archive.
	Stop          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stop" json:"stop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebuildHistogramRequest) Reset() {
	*x = RebuildHistogramRequest{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebuildHistogramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildHistogramRequest) ProtoMessage() {}

func (x *RebuildHistogramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildHistogramRequest.ProtoReflect.Descriptor instead.
func (*RebuildHistogramRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{25}
}

func (x *RebuildHistogramRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *RebuildHistogramRequest) GetTable() string {
	if x != nil && x.Table != nil {
		return *x.Table
	}
	return ""
}

func (x *RebuildHistogramRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *RebuildHistogramRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

type RebuildHistogramResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RebuildHistogramResponse) Reset() {
	*x = RebuildHistogramResponse{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RebuildHistogramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebuildHistogramResponse) ProtoMessage() {}

func (x *RebuildHistogramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebuildHistogramResponse.ProtoReflect.Descriptor instead.
func (*RebuildHistogramResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{26}
}

type Row_ColumnInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    *uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name  *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type  *string                `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	// The name of the class implementing the proto object if dataType is PROTOBUF
	ProtoClass    *string `protobuf:"bytes,4,opt,name=protoClass" json:"protoClass,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Row_ColumnInfo) Reset() {
	*x = Row_ColumnInfo{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Row_ColumnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row_ColumnInfo) ProtoMessage() {}

func (x *Row_ColumnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row_ColumnInfo.ProtoReflect.Descriptor instead.
func (*Row_ColumnInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Row_ColumnInfo) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Row_ColumnInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Row_ColumnInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Row_ColumnInfo) GetProtoClass() string {
	if x != nil && x.ProtoClass != nil {
		return *x.ProtoClass
	}
	return ""
}

type Row_Cell struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ColumnId      *uint32                `protobuf:"varint,1,opt,name=columnId" json:"columnId,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Row_Cell) Reset() {
	*x = Row_Cell{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Row_Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row_Cell) ProtoMessage() {}

func (x *Row_Cell) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row_Cell.ProtoReflect.Descriptor instead.
func (*Row_Cell) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Row_Cell) GetColumnId() uint32 {
	if x != nil && x.ColumnId != nil {
		return *x.ColumnId
	}
	return 0
}

func (x *Row_Cell) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TableData_TableRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Column        []*ColumnData          `protobuf:"bytes,1,rep,name=column" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableData_TableRecord) Reset() {
	*x = TableData_TableRecord{}
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableData_TableRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData_TableRecord) ProtoMessage() {}

func (x *TableData_TableRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_table_table_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData_TableRecord.ProtoReflect.Descriptor instead.
func (*TableData_TableRecord) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_table_table_proto_rawDescGZIP(), []int{19, 0}
}

func (x *TableData_TableRecord) GetColumn() []*ColumnData {
	if x != nil {
		return x.Column
	}
	return nil
}

var File_yamcs_protobuf_table_table_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_table_table_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x34, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x03, 0x52, 0x6f, 0x77,
	0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x12, 0x34, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x1a, 0x64, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x1a, 0x36, 0x0a, 0x04,
	0x43, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x71, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x72, 0x6f, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x6f,
	0x77, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0x29, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x6f, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x30, 0x0a, 0x18, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x45, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x3a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2d, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x4d, 0x0a, 0x11, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x7c,
	0x0a, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x2f, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x4d, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x97, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x42,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x22, 0x4d, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x5e, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22,
	0x3e, 0x0a, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x99, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x1a, 0x47, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x38, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x0a,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x37, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0xc5, 0x03, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xba, 0x02, 0x0a, 0x10, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x20, 0x0a, 0x0b,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x10, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x03, 0x22, 0xf2, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x52,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe3, 0x0d, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x70, 0x69, 0x12, 0x90, 0x01, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53,
	0x71, 0x6c, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x22, 0x38, 0x8a, 0x92,
	0x03, 0x34, 0x3a, 0x01, 0x2a, 0x6a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x53,
	0x51, 0x4c, 0x1a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x53, 0x71, 0x6c, 0x12, 0xae, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x71, 0x6c, 0x12, 0x27,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x71, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x74, 0x22, 0x4b, 0x8a, 0x92, 0x03, 0x47, 0x3a, 0x01,
	0x2a, 0x6a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x51, 0x4c, 0x1a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x3a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x71, 0x6c, 0x30, 0x01, 0x12, 0x89, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x8a, 0x92,
	0x03, 0x21, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x36, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x12, 0xda, 0x92, 0x03, 0x0e, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x8a, 0x92, 0x03, 0x28, 0x0a, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x7d, 0x12, 0x71, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x0c, 0xda, 0x92, 0x03, 0x08, 0x0a, 0x06, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x30, 0x01, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x8a, 0x92, 0x03, 0x20, 0x0a, 0x1e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x7f, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x2b, 0x8a, 0x92, 0x03, 0x27, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x8c,
	0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x30, 0x8a, 0x92, 0x03,
	0x2c, 0x0a, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x88, 0x01,
	0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x25, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x6f, 0x77, 0x22, 0x38, 0x8a, 0x92,
	0x03, 0x34, 0x3a, 0x01, 0x2a, 0x1a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x7d, 0x3a, 0x72, 0x65,
	0x61, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x30, 0x01, 0x12, 0x9b, 0x01, 0x0a, 0x09, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x26, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x8a, 0x92, 0x03, 0x37, 0x3a, 0x03, 0x72,
	0x6f, 0x77, 0x1a, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x7d, 0x3a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x52, 0x6f, 0x77, 0x73, 0x28, 0x01, 0x12, 0xb3, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x2d, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x2e, 0x52, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x8a, 0x92, 0x03, 0x3c,
	0x3a, 0x01, 0x2a, 0x1a, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x7d, 0x3a, 0x72, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x59, 0x0a, 0x12,
	0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
	0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61,
	0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65,
})

var (
	file_yamcs_protobuf_table_table_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_table_table_proto_rawDescData []byte
)

func file_yamcs_protobuf_table_table_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_table_table_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_table_table_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_table_table_proto_rawDesc), len(file_yamcs_protobuf_table_table_proto_rawDesc)))
	})
	return file_yamcs_protobuf_table_table_proto_rawDescData
}

var file_yamcs_protobuf_table_table_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yamcs_protobuf_table_table_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_yamcs_protobuf_table_table_proto_goTypes = []any{
	(PartitioningInfo_PartitioningType)(0),   // 0: yamcs.protobuf.table.PartitioningInfo.PartitioningType
	(*Row)(nil),                              // 1: yamcs.protobuf.table.Row
	(*ReadRowsRequest)(nil),                  // 2: yamcs.protobuf.table.ReadRowsRequest
	(*WriteRowsRequest)(nil),                 // 3: yamcs.protobuf.table.WriteRowsRequest
	(*WriteRowsResponse)(nil),                // 4: yamcs.protobuf.table.WriteRowsResponse
	(*WriteRowsExceptionDetail)(nil),         // 5: yamcs.protobuf.table.WriteRowsExceptionDetail
	(*ListValue)(nil),                        // 6: yamcs.protobuf.table.ListValue
	(*ExecuteSqlRequest)(nil),                // 7: yamcs.protobuf.table.ExecuteSqlRequest
	(*ResultSet)(nil),                        // 8: yamcs.protobuf.table.ResultSet
	(*ListTablesRequest)(nil),                // 9: yamcs.protobuf.table.ListTablesRequest
	(*ListTablesResponse)(nil),               // 10: yamcs.protobuf.table.ListTablesResponse
	(*GetTableRequest)(nil),                  // 11: yamcs.protobuf.table.GetTableRequest
	(*GetTableDataRequest)(nil),              // 12: yamcs.protobuf.table.GetTableDataRequest
	(*ListStreamsRequest)(nil),               // 13: yamcs.protobuf.table.ListStreamsRequest
	(*ListStreamsResponse)(nil),              // 14: yamcs.protobuf.table.ListStreamsResponse
	(*GetStreamRequest)(nil),                 // 15: yamcs.protobuf.table.GetStreamRequest
	(*SubscribeStreamRequest)(nil),           // 16: yamcs.protobuf.table.SubscribeStreamRequest
	(*ColumnData)(nil),                       // 17: yamcs.protobuf.table.ColumnData
	(*StreamData)(nil),                       // 18: yamcs.protobuf.table.StreamData
	(*SubscribeStreamStatisticsRequest)(nil), // 19: yamcs.protobuf.table.SubscribeStreamStatisticsRequest
	(*TableData)(nil),                        // 20: yamcs.protobuf.table.TableData
	(*ColumnInfo)(nil),                       // 21: yamcs.protobuf.table.ColumnInfo
	(*EnumValue)(nil),                        // 22: yamcs.protobuf.table.EnumValue
	(*TableInfo)(nil),                        // 23: yamcs.protobuf.table.TableInfo
	(*PartitioningInfo)(nil),                 // 24: yamcs.protobuf.table.PartitioningInfo
	(*StreamInfo)(nil),                       // 25: yamcs.protobuf.table.StreamInfo
	(*RebuildHistogramRequest)(nil),          // 26: yamcs.protobuf.table.RebuildHistogramRequest
	(*RebuildHistogramResponse)(nil),         // 27: yamcs.protobuf.table.RebuildHistogramResponse
	(*Row_ColumnInfo)(nil),                   // 28: yamcs.protobuf.table.Row.ColumnInfo
	(*Row_Cell)(nil),                         // 29: yamcs.protobuf.table.Row.Cell
	(*TableData_TableRecord)(nil),            // 30: yamcs.protobuf.table.TableData.TableRecord
	(*protobuf.Value)(nil),                   // 31: yamcs.protobuf.Value
	(*timestamppb.Timestamp)(nil),            // 32: google.protobuf.Timestamp
	(*yamcsManagement.StreamEvent)(nil),      // 33: yamcs.protobuf.yamcsManagement.StreamEvent
}
var file_yamcs_protobuf_table_table_proto_depIdxs = []int32{
	28, // 0: yamcs.protobuf.table.Row.columns:type_name -> yamcs.protobuf.table.Row.ColumnInfo
	29, // 1: yamcs.protobuf.table.Row.cells:type_name -> yamcs.protobuf.table.Row.Cell
	1,  // 2: yamcs.protobuf.table.WriteRowsRequest.row:type_name -> yamcs.protobuf.table.Row
	31, // 3: yamcs.protobuf.table.ListValue.values:type_name -> yamcs.protobuf.Value
	21, // 4: yamcs.protobuf.table.ResultSet.columns:type_name -> yamcs.protobuf.table.ColumnInfo
	6,  // 5: yamcs.protobuf.table.ResultSet.rows:type_name -> yamcs.protobuf.table.ListValue
	23, // 6: yamcs.protobuf.table.ListTablesResponse.tables:type_name -> yamcs.protobuf.table.TableInfo
	25, // 7: yamcs.protobuf.table.ListStreamsResponse.streams:type_name -> yamcs.protobuf.table.StreamInfo
	31, // 8: yamcs.protobuf.table.ColumnData.value:type_name -> yamcs.protobuf.Value
	17, // 9: yamcs.protobuf.table.StreamData.column:type_name -> yamcs.protobuf.table.ColumnData
	30, // 10: yamcs.protobuf.table.TableData.record:type_name -> yamcs.protobuf.table.TableData.TableRecord
	22, // 11: yamcs.protobuf.table.ColumnInfo.enumValue:type_name -> yamcs.protobuf.table.EnumValue
	21, // 12: yamcs.protobuf.table.TableInfo.keyColumn:type_name -> yamcs.protobuf.table.ColumnInfo
	21, // 13: yamcs.protobuf.table.TableInfo.valueColumn:type_name -> yamcs.protobuf.table.ColumnInfo
	24, // 14: yamcs.protobuf.table.TableInfo.partitioningInfo:type_name -> yamcs.protobuf.table.PartitioningInfo
	0,  // 15: yamcs.protobuf.table.PartitioningInfo.type:type_name -> yamcs.protobuf.table.PartitioningInfo.PartitioningType
	21, // 16: yamcs.protobuf.table.StreamInfo.column:type_name -> yamcs.protobuf.table.ColumnInfo
	21, // 17: yamcs.protobuf.table.StreamInfo.columns:type_name -> yamcs.protobuf.table.ColumnInfo
	32, // 18: yamcs.protobuf.table.RebuildHistogramRequest.start:type_name -> google.protobuf.Timestamp
	32, // 19: yamcs.protobuf.table.RebuildHistogramRequest.stop:type_name -> google.protobuf.Timestamp
	17, // 20: yamcs.protobuf.table.TableData.TableRecord.column:type_name -> yamcs.protobuf.table.ColumnData
	7,  // 21: yamcs.protobuf.table.TableApi.ExecuteSql:input_type -> yamcs.protobuf.table.ExecuteSqlRequest
	7,  // 22: yamcs.protobuf.table.TableApi.ExecuteStreamingSql:input_type -> yamcs.protobuf.table.ExecuteSqlRequest
	13, // 23: yamcs.protobuf.table.TableApi.ListStreams:input_type -> yamcs.protobuf.table.ListStreamsRequest
	19, // 24: yamcs.protobuf.table.TableApi.SubscribeStreamStatistics:input_type -> yamcs.protobuf.table.SubscribeStreamStatisticsRequest
	15, // 25: yamcs.protobuf.table.TableApi.GetStream:input_type -> yamcs.protobuf.table.GetStreamRequest
	16, // 26: yamcs.protobuf.table.TableApi.SubscribeStream:input_type -> yamcs.protobuf.table.SubscribeStreamRequest
	9,  // 27: yamcs.protobuf.table.TableApi.ListTables:input_type -> yamcs.protobuf.table.ListTablesRequest
	11, // 28: yamcs.protobuf.table.TableApi.GetTable:input_type -> yamcs.protobuf.table.GetTableRequest
	12, // 29: yamcs.protobuf.table.TableApi.GetTableData:input_type -> yamcs.protobuf.table.GetTableDataRequest
	2,  // 30: yamcs.protobuf.table.TableApi.ReadRows:input_type -> yamcs.protobuf.table.ReadRowsRequest
	3,  // 31: yamcs.protobuf.table.TableApi.WriteRows:input_type -> yamcs.protobuf.table.WriteRowsRequest
	26, // 32: yamcs.protobuf.table.TableApi.RebuildHistogram:input_type -> yamcs.protobuf.table.RebuildHistogramRequest
	8,  // 33: yamcs.protobuf.table.TableApi.ExecuteSql:output_type -> yamcs.protobuf.table.ResultSet
	8,  // 34: yamcs.protobuf.table.TableApi.ExecuteStreamingSql:output_type -> yamcs.protobuf.table.ResultSet
	14, // 35: yamcs.protobuf.table.TableApi.ListStreams:output_type -> yamcs.protobuf.table.ListStreamsResponse
	33, // 36: yamcs.protobuf.table.TableApi.SubscribeStreamStatistics:output_type -> yamcs.protobuf.yamcsManagement.StreamEvent
	25, // 37: yamcs.protobuf.table.TableApi.GetStream:output_type -> yamcs.protobuf.table.StreamInfo
	18, // 38: yamcs.protobuf.table.TableApi.SubscribeStream:output_type -> yamcs.protobuf.table.StreamData
	10, // 39: yamcs.protobuf.table.TableApi.ListTables:output_type -> yamcs.protobuf.table.ListTablesResponse
	23, // 40: yamcs.protobuf.table.TableApi.GetTable:output_type -> yamcs.protobuf.table.TableInfo
	20, // 41: yamcs.protobuf.table.TableApi.GetTableData:output_type -> yamcs.protobuf.table.TableData
	1,  // 42: yamcs.protobuf.table.TableApi.ReadRows:output_type -> yamcs.protobuf.table.Row
	4,  // 43: yamcs.protobuf.table.TableApi.WriteRows:output_type -> yamcs.protobuf.table.WriteRowsResponse
	27, // 44: yamcs.protobuf.table.TableApi.RebuildHistogram:output_type -> yamcs.protobuf.table.RebuildHistogramResponse
	33, // [33:45] is the sub-list for method output_type
	21, // [21:33] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_table_table_proto_init() }
func file_yamcs_protobuf_table_table_proto_init() {
	if File_yamcs_protobuf_table_table_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_table_table_proto_rawDesc), len(file_yamcs_protobuf_table_table_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_table_table_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_table_table_proto_depIdxs,
		EnumInfos:         file_yamcs_protobuf_table_table_proto_enumTypes,
		MessageInfos:      file_yamcs_protobuf_table_table_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_table_table_proto = out.File
	file_yamcs_protobuf_table_table_proto_goTypes = nil
	file_yamcs_protobuf_table_table_proto_depIdxs = nil
}
