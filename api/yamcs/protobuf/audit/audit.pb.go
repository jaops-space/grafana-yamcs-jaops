// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/audit/audit.proto

package audit

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListAuditRecordsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The maximum number of returned records per page. Choose this value too high
	// and you risk hitting the maximum response size limit enforced by the server.
	// Default: “100“
	Limit *int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,3,opt,name=next" json:"next,omitempty"`
	// Filter the lower bound of the record's time. Specify a date string in
	// ISO 8601 format. This bound is inclusive.
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the record's time. Specify a date string in
	// ISO 8601 format. This bound is exclusive.
	Stop *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=stop" json:"stop,omitempty"`
	// Text to search for in the summary.
	Q *string `protobuf:"bytes,6,opt,name=q" json:"q,omitempty"`
	// Include only records matching the specified service.
	Service       *string `protobuf:"bytes,7,opt,name=service" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAuditRecordsRequest) Reset() {
	*x = ListAuditRecordsRequest{}
	mi := &file_yamcs_protobuf_audit_audit_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuditRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditRecordsRequest) ProtoMessage() {}

func (x *ListAuditRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_audit_audit_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditRecordsRequest.ProtoReflect.Descriptor instead.
func (*ListAuditRecordsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_audit_audit_proto_rawDescGZIP(), []int{0}
}

func (x *ListAuditRecordsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListAuditRecordsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListAuditRecordsRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListAuditRecordsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListAuditRecordsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ListAuditRecordsRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *ListAuditRecordsRequest) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

type ListAuditRecordsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page with matching records
	Records []*AuditRecord `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListAuditRecordsResponse) Reset() {
	*x = ListAuditRecordsResponse{}
	mi := &file_yamcs_protobuf_audit_audit_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuditRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditRecordsResponse) ProtoMessage() {}

func (x *ListAuditRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_audit_audit_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListAuditRecordsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_audit_audit_proto_rawDescGZIP(), []int{1}
}

func (x *ListAuditRecordsResponse) GetRecords() []*AuditRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *ListAuditRecordsResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

type AuditRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Time          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Service       *string                `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Method        *string                `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	User          *string                `protobuf:"bytes,4,opt,name=user" json:"user,omitempty"`
	Summary       *string                `protobuf:"bytes,5,opt,name=summary" json:"summary,omitempty"`
	Request       *structpb.Struct       `protobuf:"bytes,6,opt,name=request" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditRecord) Reset() {
	*x = AuditRecord{}
	mi := &file_yamcs_protobuf_audit_audit_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditRecord) ProtoMessage() {}

func (x *AuditRecord) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_audit_audit_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditRecord.ProtoReflect.Descriptor instead.
func (*AuditRecord) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_audit_audit_proto_rawDescGZIP(), []int{2}
}

func (x *AuditRecord) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AuditRecord) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

func (x *AuditRecord) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *AuditRecord) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *AuditRecord) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *AuditRecord) GetRequest() *structpb.Struct {
	if x != nil {
		return x.Request
	}
	return nil
}

var File_yamcs_protobuf_audit_audit_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_audit_audit_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x85, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd0, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xa3, 0x01, 0x0a, 0x08,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x41, 0x70, 0x69, 0x12, 0x96, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x2d, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x8a, 0x92,
	0x03, 0x1f, 0x0a, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x42, 0x74, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x42, 0x11, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
	0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61,
	0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74,
})

var (
	file_yamcs_protobuf_audit_audit_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_audit_audit_proto_rawDescData []byte
)

func file_yamcs_protobuf_audit_audit_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_audit_audit_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_audit_audit_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_audit_audit_proto_rawDesc), len(file_yamcs_protobuf_audit_audit_proto_rawDesc)))
	})
	return file_yamcs_protobuf_audit_audit_proto_rawDescData
}

var file_yamcs_protobuf_audit_audit_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_yamcs_protobuf_audit_audit_proto_goTypes = []any{
	(*ListAuditRecordsRequest)(nil),  // 0: yamcs.protobuf.audit.ListAuditRecordsRequest
	(*ListAuditRecordsResponse)(nil), // 1: yamcs.protobuf.audit.ListAuditRecordsResponse
	(*AuditRecord)(nil),              // 2: yamcs.protobuf.audit.AuditRecord
	(*timestamppb.Timestamp)(nil),    // 3: google.protobuf.Timestamp
	(*structpb.Struct)(nil),          // 4: google.protobuf.Struct
}
var file_yamcs_protobuf_audit_audit_proto_depIdxs = []int32{
	3, // 0: yamcs.protobuf.audit.ListAuditRecordsRequest.start:type_name -> google.protobuf.Timestamp
	3, // 1: yamcs.protobuf.audit.ListAuditRecordsRequest.stop:type_name -> google.protobuf.Timestamp
	2, // 2: yamcs.protobuf.audit.ListAuditRecordsResponse.records:type_name -> yamcs.protobuf.audit.AuditRecord
	3, // 3: yamcs.protobuf.audit.AuditRecord.time:type_name -> google.protobuf.Timestamp
	4, // 4: yamcs.protobuf.audit.AuditRecord.request:type_name -> google.protobuf.Struct
	0, // 5: yamcs.protobuf.audit.AuditApi.ListAuditRecords:input_type -> yamcs.protobuf.audit.ListAuditRecordsRequest
	1, // 6: yamcs.protobuf.audit.AuditApi.ListAuditRecords:output_type -> yamcs.protobuf.audit.ListAuditRecordsResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_audit_audit_proto_init() }
func file_yamcs_protobuf_audit_audit_proto_init() {
	if File_yamcs_protobuf_audit_audit_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_audit_audit_proto_rawDesc), len(file_yamcs_protobuf_audit_audit_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_audit_audit_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_audit_audit_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_audit_audit_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_audit_audit_proto = out.File
	file_yamcs_protobuf_audit_audit_proto_goTypes = nil
	file_yamcs_protobuf_audit_audit_proto_depIdxs = nil
}
