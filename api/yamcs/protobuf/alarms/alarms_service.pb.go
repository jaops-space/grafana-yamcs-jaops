// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/alarms/alarms_service.proto

package alarms

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListAlarmsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The zero-based row number at which to start outputting results.
	// Default: “0“
	Pos *int64 `protobuf:"varint,2,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned records per page. Choose this value
	// too high and you risk hitting the maximum response size limit
	// enforced by the server. Default: “100“
	Limit *int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// Filter the lower bound of the alarm's trigger time. Specify a date
	// string in ISO 8601 format. This bound is inclusive.
	Start *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the alarm's trigger time. Specify a date
	// string in ISO 8601 format. This bound is exclusive.
	Stop *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=stop" json:"stop,omitempty"`
	// The order of the returned results. Can be either “asc“ or
	// “desc“. The sorting is always by trigger time (i.e. the
	// generation time of the trigger value). Default: “desc“
	Order *string `protobuf:"bytes,6,opt,name=order" json:"order,omitempty"`
	// Filter alarm instances on a specific alarm name (for example:
	// parameter name)
	Name *string `protobuf:"bytes,7,opt,name=name" json:"name,omitempty"`
	// Continuation token returned by a previous page response.
	Next          *string `protobuf:"bytes,8,opt,name=next" json:"next,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAlarmsRequest) Reset() {
	*x = ListAlarmsRequest{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAlarmsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlarmsRequest) ProtoMessage() {}

func (x *ListAlarmsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlarmsRequest.ProtoReflect.Descriptor instead.
func (*ListAlarmsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListAlarmsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListAlarmsRequest) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ListAlarmsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListAlarmsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListAlarmsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ListAlarmsRequest) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

func (x *ListAlarmsRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ListAlarmsRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

type ListAlarmsResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Alarms []*AlarmData           `protobuf:"bytes,1,rep,name=alarms" json:"alarms,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListAlarmsResponse) Reset() {
	*x = ListAlarmsResponse{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAlarmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAlarmsResponse) ProtoMessage() {}

func (x *ListAlarmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAlarmsResponse.ProtoReflect.Descriptor instead.
func (*ListAlarmsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListAlarmsResponse) GetAlarms() []*AlarmData {
	if x != nil {
		return x.Alarms
	}
	return nil
}

func (x *ListAlarmsResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

type ListProcessorAlarmsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instance      *string                `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	Processor     *string                `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProcessorAlarmsRequest) Reset() {
	*x = ListProcessorAlarmsRequest{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProcessorAlarmsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessorAlarmsRequest) ProtoMessage() {}

func (x *ListProcessorAlarmsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessorAlarmsRequest.ProtoReflect.Descriptor instead.
func (*ListProcessorAlarmsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListProcessorAlarmsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListProcessorAlarmsRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

type ListProcessorAlarmsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Alarms        []*AlarmData           `protobuf:"bytes,1,rep,name=alarms" json:"alarms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProcessorAlarmsResponse) Reset() {
	*x = ListProcessorAlarmsResponse{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProcessorAlarmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessorAlarmsResponse) ProtoMessage() {}

func (x *ListProcessorAlarmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessorAlarmsResponse.ProtoReflect.Descriptor instead.
func (*ListProcessorAlarmsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListProcessorAlarmsResponse) GetAlarms() []*AlarmData {
	if x != nil {
		return x.Alarms
	}
	return nil
}

type SubscribeAlarmsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Instance      *string                `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	Processor     *string                `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeAlarmsRequest) Reset() {
	*x = SubscribeAlarmsRequest{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeAlarmsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeAlarmsRequest) ProtoMessage() {}

func (x *SubscribeAlarmsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeAlarmsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeAlarmsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{4}
}

func (x *SubscribeAlarmsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeAlarmsRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

type EditAlarmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Alarm name
	Name   *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Seqnum *uint32 `protobuf:"varint,4,opt,name=seqnum" json:"seqnum,omitempty"`
	// **Required.** The state of the alarm.
	// Either “acknowledged“, “shelved“, “unshelved“ or “cleared“.
	State *string `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	// Message documenting the alarm change.
	Comment *string `protobuf:"bytes,6,opt,name=comment" json:"comment,omitempty"`
	// shelve time in milliseconds (if the state = shelved)
	// can be left out which means it is shelved indefinitely
	ShelveDuration *uint64 `protobuf:"varint,7,opt,name=shelveDuration" json:"shelveDuration,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EditAlarmRequest) Reset() {
	*x = EditAlarmRequest{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EditAlarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditAlarmRequest) ProtoMessage() {}

func (x *EditAlarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditAlarmRequest.ProtoReflect.Descriptor instead.
func (*EditAlarmRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{5}
}

func (x *EditAlarmRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *EditAlarmRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *EditAlarmRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EditAlarmRequest) GetSeqnum() uint32 {
	if x != nil && x.Seqnum != nil {
		return *x.Seqnum
	}
	return 0
}

func (x *EditAlarmRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *EditAlarmRequest) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *EditAlarmRequest) GetShelveDuration() uint64 {
	if x != nil && x.ShelveDuration != nil {
		return *x.ShelveDuration
	}
	return 0
}

type AcknowledgeAlarmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Alarm name
	Alarm  *string `protobuf:"bytes,3,opt,name=alarm" json:"alarm,omitempty"`
	Seqnum *uint32 `protobuf:"varint,4,opt,name=seqnum" json:"seqnum,omitempty"`
	// Message documenting the alarm change.
	Comment       *string `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AcknowledgeAlarmRequest) Reset() {
	*x = AcknowledgeAlarmRequest{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcknowledgeAlarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcknowledgeAlarmRequest) ProtoMessage() {}

func (x *AcknowledgeAlarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcknowledgeAlarmRequest.ProtoReflect.Descriptor instead.
func (*AcknowledgeAlarmRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{6}
}

func (x *AcknowledgeAlarmRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *AcknowledgeAlarmRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *AcknowledgeAlarmRequest) GetAlarm() string {
	if x != nil && x.Alarm != nil {
		return *x.Alarm
	}
	return ""
}

func (x *AcknowledgeAlarmRequest) GetSeqnum() uint32 {
	if x != nil && x.Seqnum != nil {
		return *x.Seqnum
	}
	return 0
}

func (x *AcknowledgeAlarmRequest) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type ShelveAlarmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Alarm name
	Alarm  *string `protobuf:"bytes,3,opt,name=alarm" json:"alarm,omitempty"`
	Seqnum *uint32 `protobuf:"varint,4,opt,name=seqnum" json:"seqnum,omitempty"`
	// Message documenting the alarm change.
	Comment *string `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
	// shelve time in milliseconds (if the state = shelved)
	// can be left out which means it is shelved indefinitely
	ShelveDuration *uint64 `protobuf:"varint,6,opt,name=shelveDuration" json:"shelveDuration,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ShelveAlarmRequest) Reset() {
	*x = ShelveAlarmRequest{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShelveAlarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShelveAlarmRequest) ProtoMessage() {}

func (x *ShelveAlarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShelveAlarmRequest.ProtoReflect.Descriptor instead.
func (*ShelveAlarmRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{7}
}

func (x *ShelveAlarmRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ShelveAlarmRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *ShelveAlarmRequest) GetAlarm() string {
	if x != nil && x.Alarm != nil {
		return *x.Alarm
	}
	return ""
}

func (x *ShelveAlarmRequest) GetSeqnum() uint32 {
	if x != nil && x.Seqnum != nil {
		return *x.Seqnum
	}
	return 0
}

func (x *ShelveAlarmRequest) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ShelveAlarmRequest) GetShelveDuration() uint64 {
	if x != nil && x.ShelveDuration != nil {
		return *x.ShelveDuration
	}
	return 0
}

type UnshelveAlarmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Alarm name
	Alarm         *string `protobuf:"bytes,3,opt,name=alarm" json:"alarm,omitempty"`
	Seqnum        *uint32 `protobuf:"varint,4,opt,name=seqnum" json:"seqnum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnshelveAlarmRequest) Reset() {
	*x = UnshelveAlarmRequest{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnshelveAlarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnshelveAlarmRequest) ProtoMessage() {}

func (x *UnshelveAlarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnshelveAlarmRequest.ProtoReflect.Descriptor instead.
func (*UnshelveAlarmRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{8}
}

func (x *UnshelveAlarmRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *UnshelveAlarmRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *UnshelveAlarmRequest) GetAlarm() string {
	if x != nil && x.Alarm != nil {
		return *x.Alarm
	}
	return ""
}

func (x *UnshelveAlarmRequest) GetSeqnum() uint32 {
	if x != nil && x.Seqnum != nil {
		return *x.Seqnum
	}
	return 0
}

type ClearAlarmRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Alarm name
	Alarm  *string `protobuf:"bytes,3,opt,name=alarm" json:"alarm,omitempty"`
	Seqnum *uint32 `protobuf:"varint,4,opt,name=seqnum" json:"seqnum,omitempty"`
	// Message documenting the alarm change
	Comment       *string `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClearAlarmRequest) Reset() {
	*x = ClearAlarmRequest{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearAlarmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearAlarmRequest) ProtoMessage() {}

func (x *ClearAlarmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearAlarmRequest.ProtoReflect.Descriptor instead.
func (*ClearAlarmRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{9}
}

func (x *ClearAlarmRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ClearAlarmRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *ClearAlarmRequest) GetAlarm() string {
	if x != nil && x.Alarm != nil {
		return *x.Alarm
	}
	return ""
}

func (x *ClearAlarmRequest) GetSeqnum() uint32 {
	if x != nil && x.Seqnum != nil {
		return *x.Seqnum
	}
	return 0
}

func (x *ClearAlarmRequest) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type SubscribeGlobalStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name
	Processor     *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeGlobalStatusRequest) Reset() {
	*x = SubscribeGlobalStatusRequest{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeGlobalStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeGlobalStatusRequest) ProtoMessage() {}

func (x *SubscribeGlobalStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeGlobalStatusRequest.ProtoReflect.Descriptor instead.
func (*SubscribeGlobalStatusRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{10}
}

func (x *SubscribeGlobalStatusRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeGlobalStatusRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

type GlobalAlarmStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of active unacknowledged alarms
	UnacknowledgedCount *int32 `protobuf:"varint,1,opt,name=unacknowledgedCount" json:"unacknowledgedCount,omitempty"`
	// True if there is at least one unacknowledged alarm not OK
	// (i.e. latest value of parameter still out of limits)
	UnacknowledgedActive *bool `protobuf:"varint,2,opt,name=unacknowledgedActive" json:"unacknowledgedActive,omitempty"`
	// Highest severity among all unacknowledged alarms
	UnacknowledgedSeverity *AlarmSeverity `protobuf:"varint,7,opt,name=unacknowledgedSeverity,enum=yamcs.protobuf.alarms.AlarmSeverity" json:"unacknowledgedSeverity,omitempty"`
	// The number of active acknowledged alarms
	AcknowledgedCount *int32 `protobuf:"varint,3,opt,name=acknowledgedCount" json:"acknowledgedCount,omitempty"`
	// True if there is at least one acknowledged alarm not OK
	// (i.e. latest value of parameter still out of limits)
	AcknowledgedActive *bool `protobuf:"varint,4,opt,name=acknowledgedActive" json:"acknowledgedActive,omitempty"`
	// Highest severity among all acknowledged alarms
	AcknowledgedSeverity *AlarmSeverity `protobuf:"varint,8,opt,name=acknowledgedSeverity,enum=yamcs.protobuf.alarms.AlarmSeverity" json:"acknowledgedSeverity,omitempty"`
	// The number of shelved alarms
	ShelvedCount *int32 `protobuf:"varint,5,opt,name=shelvedCount" json:"shelvedCount,omitempty"`
	// True if there is at least one shelved alarm not OK (i.e. latest value of parameter still out of limits)
	ShelvedActive *bool `protobuf:"varint,6,opt,name=shelvedActive" json:"shelvedActive,omitempty"`
	// Highest severity among all shelved alarms
	ShelvedSeverity *AlarmSeverity `protobuf:"varint,9,opt,name=shelvedSeverity,enum=yamcs.protobuf.alarms.AlarmSeverity" json:"shelvedSeverity,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GlobalAlarmStatus) Reset() {
	*x = GlobalAlarmStatus{}
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalAlarmStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalAlarmStatus) ProtoMessage() {}

func (x *GlobalAlarmStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalAlarmStatus.ProtoReflect.Descriptor instead.
func (*GlobalAlarmStatus) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP(), []int{11}
}

func (x *GlobalAlarmStatus) GetUnacknowledgedCount() int32 {
	if x != nil && x.UnacknowledgedCount != nil {
		return *x.UnacknowledgedCount
	}
	return 0
}

func (x *GlobalAlarmStatus) GetUnacknowledgedActive() bool {
	if x != nil && x.UnacknowledgedActive != nil {
		return *x.UnacknowledgedActive
	}
	return false
}

func (x *GlobalAlarmStatus) GetUnacknowledgedSeverity() AlarmSeverity {
	if x != nil && x.UnacknowledgedSeverity != nil {
		return *x.UnacknowledgedSeverity
	}
	return AlarmSeverity_WATCH
}

func (x *GlobalAlarmStatus) GetAcknowledgedCount() int32 {
	if x != nil && x.AcknowledgedCount != nil {
		return *x.AcknowledgedCount
	}
	return 0
}

func (x *GlobalAlarmStatus) GetAcknowledgedActive() bool {
	if x != nil && x.AcknowledgedActive != nil {
		return *x.AcknowledgedActive
	}
	return false
}

func (x *GlobalAlarmStatus) GetAcknowledgedSeverity() AlarmSeverity {
	if x != nil && x.AcknowledgedSeverity != nil {
		return *x.AcknowledgedSeverity
	}
	return AlarmSeverity_WATCH
}

func (x *GlobalAlarmStatus) GetShelvedCount() int32 {
	if x != nil && x.ShelvedCount != nil {
		return *x.ShelvedCount
	}
	return 0
}

func (x *GlobalAlarmStatus) GetShelvedActive() bool {
	if x != nil && x.ShelvedActive != nil {
		return *x.ShelvedActive
	}
	return false
}

func (x *GlobalAlarmStatus) GetShelvedSeverity() AlarmSeverity {
	if x != nil && x.ShelvedSeverity != nil {
		return *x.ShelvedSeverity
	}
	return AlarmSeverity_WATCH
}

var File_yamcs_protobuf_alarms_alarms_service_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_alarms_alarms_service_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e,
	0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x22, 0x7c, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x56, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x22, 0x57, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x22, 0x52, 0x0a, 0x16, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22,
	0xd0, 0x01, 0x0a, 0x10, 0x45, 0x64, 0x69, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68,
	0x65, 0x6c, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xbe, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x65,
	0x6c, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x7e, 0x0a, 0x14, 0x55, 0x6e, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71,
	0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75,
	0x6d, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x1c, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x22, 0xa9, 0x04, 0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x6e, 0x61,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x75,
	0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x6e, 0x61, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x5c, 0x0a, 0x16, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x16, 0x75, 0x6e, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x64, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x61,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x61,
	0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52,
	0x14, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x68, 0x65,
	0x6c, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x65,
	0x6c, 0x76, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x4e, 0x0a, 0x0f, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0f,
	0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x32,
	0x95, 0x0b, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x41, 0x70, 0x69, 0x12, 0x90, 0x01,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x28, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x8a, 0x92, 0x03, 0x29, 0x0a, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x2a, 0x7d,
	0x12, 0xb1, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x33, 0x8a, 0x92, 0x03, 0x2f, 0x0a, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x09, 0x45, 0x64, 0x69, 0x74, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x49, 0x8a, 0x92, 0x03, 0x45, 0x30, 0x01, 0x3a, 0x01, 0x2a, 0x2a, 0x3e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x7b, 0x6e,
	0x61, 0x6d, 0x65, 0x2a, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x7d, 0x12, 0xb0,
	0x01, 0x0a, 0x10, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x63, 0x6b, 0x6e,
	0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x54, 0x8a, 0x92, 0x03,
	0x50, 0x3a, 0x01, 0x2a, 0x1a, 0x4b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2a, 0x7d, 0x2f, 0x7b, 0x73, 0x65,
	0x71, 0x6e, 0x75, 0x6d, 0x7d, 0x3a, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x12, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x76, 0x65,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x4f, 0x8a, 0x92, 0x03, 0x4b, 0x3a, 0x01, 0x2a, 0x1a, 0x46, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x7b, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x2a, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x7d, 0x3a, 0x73,
	0x68, 0x65, 0x6c, 0x76, 0x65, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x73, 0x68, 0x65, 0x6c,
	0x76, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e,
	0x55, 0x6e, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4e, 0x8a, 0x92,
	0x03, 0x4a, 0x1a, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2a, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x71, 0x6e,
	0x75, 0x6d, 0x7d, 0x3a, 0x75, 0x6e, 0x73, 0x68, 0x65, 0x6c, 0x76, 0x65, 0x12, 0x9e, 0x01, 0x0a,
	0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x28, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x73, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4e, 0x8a,
	0x92, 0x03, 0x4a, 0x3a, 0x01, 0x2a, 0x1a, 0x45, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x7d, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x7d, 0x2f, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2a, 0x7d, 0x2f, 0x7b,
	0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x7d, 0x3a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x93, 0x01,
	0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x19, 0xda, 0x92, 0x03, 0x15, 0x0a, 0x13, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x2d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x22, 0x0c, 0xda, 0x92, 0x03, 0x08, 0x0a, 0x06, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x73, 0x30, 0x01, 0x42, 0x77, 0x0a, 0x19, 0x6f, 0x72, 0x67, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x73, 0x42, 0x12, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x73,
})

var (
	file_yamcs_protobuf_alarms_alarms_service_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_alarms_alarms_service_proto_rawDescData []byte
)

func file_yamcs_protobuf_alarms_alarms_service_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_alarms_alarms_service_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_alarms_alarms_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_alarms_alarms_service_proto_rawDesc), len(file_yamcs_protobuf_alarms_alarms_service_proto_rawDesc)))
	})
	return file_yamcs_protobuf_alarms_alarms_service_proto_rawDescData
}

var file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_yamcs_protobuf_alarms_alarms_service_proto_goTypes = []any{
	(*ListAlarmsRequest)(nil),            // 0: yamcs.protobuf.alarms.ListAlarmsRequest
	(*ListAlarmsResponse)(nil),           // 1: yamcs.protobuf.alarms.ListAlarmsResponse
	(*ListProcessorAlarmsRequest)(nil),   // 2: yamcs.protobuf.alarms.ListProcessorAlarmsRequest
	(*ListProcessorAlarmsResponse)(nil),  // 3: yamcs.protobuf.alarms.ListProcessorAlarmsResponse
	(*SubscribeAlarmsRequest)(nil),       // 4: yamcs.protobuf.alarms.SubscribeAlarmsRequest
	(*EditAlarmRequest)(nil),             // 5: yamcs.protobuf.alarms.EditAlarmRequest
	(*AcknowledgeAlarmRequest)(nil),      // 6: yamcs.protobuf.alarms.AcknowledgeAlarmRequest
	(*ShelveAlarmRequest)(nil),           // 7: yamcs.protobuf.alarms.ShelveAlarmRequest
	(*UnshelveAlarmRequest)(nil),         // 8: yamcs.protobuf.alarms.UnshelveAlarmRequest
	(*ClearAlarmRequest)(nil),            // 9: yamcs.protobuf.alarms.ClearAlarmRequest
	(*SubscribeGlobalStatusRequest)(nil), // 10: yamcs.protobuf.alarms.SubscribeGlobalStatusRequest
	(*GlobalAlarmStatus)(nil),            // 11: yamcs.protobuf.alarms.GlobalAlarmStatus
	(*timestamppb.Timestamp)(nil),        // 12: google.protobuf.Timestamp
	(*AlarmData)(nil),                    // 13: yamcs.protobuf.alarms.AlarmData
	(AlarmSeverity)(0),                   // 14: yamcs.protobuf.alarms.AlarmSeverity
	(*emptypb.Empty)(nil),                // 15: google.protobuf.Empty
}
var file_yamcs_protobuf_alarms_alarms_service_proto_depIdxs = []int32{
	12, // 0: yamcs.protobuf.alarms.ListAlarmsRequest.start:type_name -> google.protobuf.Timestamp
	12, // 1: yamcs.protobuf.alarms.ListAlarmsRequest.stop:type_name -> google.protobuf.Timestamp
	13, // 2: yamcs.protobuf.alarms.ListAlarmsResponse.alarms:type_name -> yamcs.protobuf.alarms.AlarmData
	13, // 3: yamcs.protobuf.alarms.ListProcessorAlarmsResponse.alarms:type_name -> yamcs.protobuf.alarms.AlarmData
	14, // 4: yamcs.protobuf.alarms.GlobalAlarmStatus.unacknowledgedSeverity:type_name -> yamcs.protobuf.alarms.AlarmSeverity
	14, // 5: yamcs.protobuf.alarms.GlobalAlarmStatus.acknowledgedSeverity:type_name -> yamcs.protobuf.alarms.AlarmSeverity
	14, // 6: yamcs.protobuf.alarms.GlobalAlarmStatus.shelvedSeverity:type_name -> yamcs.protobuf.alarms.AlarmSeverity
	0,  // 7: yamcs.protobuf.alarms.AlarmsApi.ListAlarms:input_type -> yamcs.protobuf.alarms.ListAlarmsRequest
	2,  // 8: yamcs.protobuf.alarms.AlarmsApi.ListProcessorAlarms:input_type -> yamcs.protobuf.alarms.ListProcessorAlarmsRequest
	5,  // 9: yamcs.protobuf.alarms.AlarmsApi.EditAlarm:input_type -> yamcs.protobuf.alarms.EditAlarmRequest
	6,  // 10: yamcs.protobuf.alarms.AlarmsApi.AcknowledgeAlarm:input_type -> yamcs.protobuf.alarms.AcknowledgeAlarmRequest
	7,  // 11: yamcs.protobuf.alarms.AlarmsApi.ShelveAlarm:input_type -> yamcs.protobuf.alarms.ShelveAlarmRequest
	8,  // 12: yamcs.protobuf.alarms.AlarmsApi.UnshelveAlarm:input_type -> yamcs.protobuf.alarms.UnshelveAlarmRequest
	9,  // 13: yamcs.protobuf.alarms.AlarmsApi.ClearAlarm:input_type -> yamcs.protobuf.alarms.ClearAlarmRequest
	10, // 14: yamcs.protobuf.alarms.AlarmsApi.SubscribeGlobalStatus:input_type -> yamcs.protobuf.alarms.SubscribeGlobalStatusRequest
	4,  // 15: yamcs.protobuf.alarms.AlarmsApi.SubscribeAlarms:input_type -> yamcs.protobuf.alarms.SubscribeAlarmsRequest
	1,  // 16: yamcs.protobuf.alarms.AlarmsApi.ListAlarms:output_type -> yamcs.protobuf.alarms.ListAlarmsResponse
	3,  // 17: yamcs.protobuf.alarms.AlarmsApi.ListProcessorAlarms:output_type -> yamcs.protobuf.alarms.ListProcessorAlarmsResponse
	15, // 18: yamcs.protobuf.alarms.AlarmsApi.EditAlarm:output_type -> google.protobuf.Empty
	15, // 19: yamcs.protobuf.alarms.AlarmsApi.AcknowledgeAlarm:output_type -> google.protobuf.Empty
	15, // 20: yamcs.protobuf.alarms.AlarmsApi.ShelveAlarm:output_type -> google.protobuf.Empty
	15, // 21: yamcs.protobuf.alarms.AlarmsApi.UnshelveAlarm:output_type -> google.protobuf.Empty
	15, // 22: yamcs.protobuf.alarms.AlarmsApi.ClearAlarm:output_type -> google.protobuf.Empty
	11, // 23: yamcs.protobuf.alarms.AlarmsApi.SubscribeGlobalStatus:output_type -> yamcs.protobuf.alarms.GlobalAlarmStatus
	13, // 24: yamcs.protobuf.alarms.AlarmsApi.SubscribeAlarms:output_type -> yamcs.protobuf.alarms.AlarmData
	16, // [16:25] is the sub-list for method output_type
	7,  // [7:16] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_alarms_alarms_service_proto_init() }
func file_yamcs_protobuf_alarms_alarms_service_proto_init() {
	if File_yamcs_protobuf_alarms_alarms_service_proto != nil {
		return
	}
	file_yamcs_protobuf_alarms_alarms_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_alarms_alarms_service_proto_rawDesc), len(file_yamcs_protobuf_alarms_alarms_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_alarms_alarms_service_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_alarms_alarms_service_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_alarms_alarms_service_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_alarms_alarms_service_proto = out.File
	file_yamcs_protobuf_alarms_alarms_service_proto_goTypes = nil
	file_yamcs_protobuf_alarms_alarms_service_proto_depIdxs = nil
}
