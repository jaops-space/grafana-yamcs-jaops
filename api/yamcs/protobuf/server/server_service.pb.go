// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/server/server_service.proto

package server

import (
	api "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetThreadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Thread ID
	Id            *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetThreadRequest) Reset() {
	*x = GetThreadRequest{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetThreadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetThreadRequest) ProtoMessage() {}

func (x *GetThreadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetThreadRequest.ProtoReflect.Descriptor instead.
func (*GetThreadRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetThreadRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ListThreadsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Threads       []*ThreadInfo          `protobuf:"bytes,1,rep,name=threads" json:"threads,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListThreadsResponse) Reset() {
	*x = ListThreadsResponse{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListThreadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThreadsResponse) ProtoMessage() {}

func (x *ListThreadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThreadsResponse.ProtoReflect.Descriptor instead.
func (*ListThreadsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListThreadsResponse) GetThreads() []*ThreadInfo {
	if x != nil {
		return x.Threads
	}
	return nil
}

type ListRoutesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Routes        []*RouteInfo           `protobuf:"bytes,1,rep,name=routes" json:"routes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRoutesResponse) Reset() {
	*x = ListRoutesResponse{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRoutesResponse) ProtoMessage() {}

func (x *ListRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRoutesResponse.ProtoReflect.Descriptor instead.
func (*ListRoutesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListRoutesResponse) GetRoutes() []*RouteInfo {
	if x != nil {
		return x.Routes
	}
	return nil
}

type ListTopicsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topics        []*TopicInfo           `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTopicsResponse) Reset() {
	*x = ListTopicsResponse{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicsResponse) ProtoMessage() {}

func (x *ListTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicsResponse.ProtoReflect.Descriptor instead.
func (*ListTopicsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListTopicsResponse) GetTopics() []*TopicInfo {
	if x != nil {
		return x.Topics
	}
	return nil
}

type HttpTraffic struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	ReadBytes       *uint64                 `protobuf:"varint,1,opt,name=readBytes" json:"readBytes,omitempty"`
	WrittenBytes    *uint64                 `protobuf:"varint,2,opt,name=writtenBytes" json:"writtenBytes,omitempty"`
	ReadThroughput  *uint64                 `protobuf:"varint,3,opt,name=readThroughput" json:"readThroughput,omitempty"`
	WriteThroughput *uint64                 `protobuf:"varint,4,opt,name=writeThroughput" json:"writeThroughput,omitempty"`
	Connections     []*ClientConnectionInfo `protobuf:"bytes,5,rep,name=connections" json:"connections,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HttpTraffic) Reset() {
	*x = HttpTraffic{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpTraffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpTraffic) ProtoMessage() {}

func (x *HttpTraffic) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpTraffic.ProtoReflect.Descriptor instead.
func (*HttpTraffic) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{4}
}

func (x *HttpTraffic) GetReadBytes() uint64 {
	if x != nil && x.ReadBytes != nil {
		return *x.ReadBytes
	}
	return 0
}

func (x *HttpTraffic) GetWrittenBytes() uint64 {
	if x != nil && x.WrittenBytes != nil {
		return *x.WrittenBytes
	}
	return 0
}

func (x *HttpTraffic) GetReadThroughput() uint64 {
	if x != nil && x.ReadThroughput != nil {
		return *x.ReadThroughput
	}
	return 0
}

func (x *HttpTraffic) GetWriteThroughput() uint64 {
	if x != nil && x.WriteThroughput != nil {
		return *x.WriteThroughput
	}
	return 0
}

func (x *HttpTraffic) GetConnections() []*ClientConnectionInfo {
	if x != nil {
		return x.Connections
	}
	return nil
}

type RouteInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Service       *string                `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Method        *string                `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	HttpMethod    *string                `protobuf:"bytes,4,opt,name=httpMethod" json:"httpMethod,omitempty"`
	Url           *string                `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	InputType     *string                `protobuf:"bytes,6,opt,name=inputType" json:"inputType,omitempty"`
	OutputType    *string                `protobuf:"bytes,7,opt,name=outputType" json:"outputType,omitempty"`
	Deprecated    *bool                  `protobuf:"varint,8,opt,name=deprecated" json:"deprecated,omitempty"`
	RequestCount  *int64                 `protobuf:"varint,9,opt,name=requestCount" json:"requestCount,omitempty"`
	ErrorCount    *int64                 `protobuf:"varint,10,opt,name=errorCount" json:"errorCount,omitempty"`
	LogFormat     *string                `protobuf:"bytes,11,opt,name=logFormat" json:"logFormat,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RouteInfo) Reset() {
	*x = RouteInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteInfo) ProtoMessage() {}

func (x *RouteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteInfo.ProtoReflect.Descriptor instead.
func (*RouteInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{5}
}

func (x *RouteInfo) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

func (x *RouteInfo) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *RouteInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *RouteInfo) GetHttpMethod() string {
	if x != nil && x.HttpMethod != nil {
		return *x.HttpMethod
	}
	return ""
}

func (x *RouteInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *RouteInfo) GetInputType() string {
	if x != nil && x.InputType != nil {
		return *x.InputType
	}
	return ""
}

func (x *RouteInfo) GetOutputType() string {
	if x != nil && x.OutputType != nil {
		return *x.OutputType
	}
	return ""
}

func (x *RouteInfo) GetDeprecated() bool {
	if x != nil && x.Deprecated != nil {
		return *x.Deprecated
	}
	return false
}

func (x *RouteInfo) GetRequestCount() int64 {
	if x != nil && x.RequestCount != nil {
		return *x.RequestCount
	}
	return 0
}

func (x *RouteInfo) GetErrorCount() int64 {
	if x != nil && x.ErrorCount != nil {
		return *x.ErrorCount
	}
	return 0
}

func (x *RouteInfo) GetLogFormat() string {
	if x != nil && x.LogFormat != nil {
		return *x.LogFormat
	}
	return ""
}

type TopicInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         *string                `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Service       *string                `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	Method        *string                `protobuf:"bytes,3,opt,name=method" json:"method,omitempty"`
	Description   *string                `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	InputType     *string                `protobuf:"bytes,5,opt,name=inputType" json:"inputType,omitempty"`
	OutputType    *string                `protobuf:"bytes,6,opt,name=outputType" json:"outputType,omitempty"`
	Deprecated    *bool                  `protobuf:"varint,7,opt,name=deprecated" json:"deprecated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TopicInfo) Reset() {
	*x = TopicInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicInfo) ProtoMessage() {}

func (x *TopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicInfo.ProtoReflect.Descriptor instead.
func (*TopicInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{6}
}

func (x *TopicInfo) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *TopicInfo) GetService() string {
	if x != nil && x.Service != nil {
		return *x.Service
	}
	return ""
}

func (x *TopicInfo) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *TopicInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TopicInfo) GetInputType() string {
	if x != nil && x.InputType != nil {
		return *x.InputType
	}
	return ""
}

func (x *TopicInfo) GetOutputType() string {
	if x != nil && x.OutputType != nil {
		return *x.OutputType
	}
	return ""
}

func (x *TopicInfo) GetDeprecated() bool {
	if x != nil && x.Deprecated != nil {
		return *x.Deprecated
	}
	return false
}

type TraceElementInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClassName     *string                `protobuf:"bytes,1,opt,name=className" json:"className,omitempty"`
	FileName      *string                `protobuf:"bytes,2,opt,name=fileName" json:"fileName,omitempty"`
	MethodName    *string                `protobuf:"bytes,3,opt,name=methodName" json:"methodName,omitempty"`
	LineNumber    *int32                 `protobuf:"varint,4,opt,name=lineNumber" json:"lineNumber,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceElementInfo) Reset() {
	*x = TraceElementInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceElementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceElementInfo) ProtoMessage() {}

func (x *TraceElementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceElementInfo.ProtoReflect.Descriptor instead.
func (*TraceElementInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{7}
}

func (x *TraceElementInfo) GetClassName() string {
	if x != nil && x.ClassName != nil {
		return *x.ClassName
	}
	return ""
}

func (x *TraceElementInfo) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *TraceElementInfo) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

func (x *TraceElementInfo) GetLineNumber() int32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

type ListThreadsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum depth of each thread's stacktrace. Default: no limit.
	Depth         *int32 `protobuf:"varint,1,opt,name=depth" json:"depth,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListThreadsRequest) Reset() {
	*x = ListThreadsRequest{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListThreadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListThreadsRequest) ProtoMessage() {}

func (x *ListThreadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListThreadsRequest.ProtoReflect.Descriptor instead.
func (*ListThreadsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListThreadsRequest) GetDepth() int32 {
	if x != nil && x.Depth != nil {
		return *x.Depth
	}
	return 0
}

type ThreadGroupInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Parent        *ThreadGroupInfo       `protobuf:"bytes,3,opt,name=parent" json:"parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThreadGroupInfo) Reset() {
	*x = ThreadGroupInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreadGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadGroupInfo) ProtoMessage() {}

func (x *ThreadGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadGroupInfo.ProtoReflect.Descriptor instead.
func (*ThreadGroupInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{9}
}

func (x *ThreadGroupInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ThreadGroupInfo) GetParent() *ThreadGroupInfo {
	if x != nil {
		return x.Parent
	}
	return nil
}

type ThreadInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int64                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	State         *string                `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Native        *bool                  `protobuf:"varint,4,opt,name=native" json:"native,omitempty"`
	Suspended     *bool                  `protobuf:"varint,5,opt,name=suspended" json:"suspended,omitempty"`
	Group         *ThreadGroupInfo       `protobuf:"bytes,6,opt,name=group" json:"group,omitempty"`
	Trace         []*TraceElementInfo    `protobuf:"bytes,7,rep,name=trace" json:"trace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ThreadInfo) Reset() {
	*x = ThreadInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThreadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadInfo) ProtoMessage() {}

func (x *ThreadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadInfo.ProtoReflect.Descriptor instead.
func (*ThreadInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{10}
}

func (x *ThreadInfo) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ThreadInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ThreadInfo) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ThreadInfo) GetNative() bool {
	if x != nil && x.Native != nil {
		return *x.Native
	}
	return false
}

func (x *ThreadInfo) GetSuspended() bool {
	if x != nil && x.Suspended != nil {
		return *x.Suspended
	}
	return false
}

func (x *ThreadInfo) GetGroup() *ThreadGroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ThreadInfo) GetTrace() []*TraceElementInfo {
	if x != nil {
		return x.Trace
	}
	return nil
}

type GetServerInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs version derived on build time.
	YamcsVersion *string `protobuf:"bytes,1,opt,name=yamcsVersion" json:"yamcsVersion,omitempty"`
	// Yamcs SHA-1 revision identifier. Set on
	// build time, but only if the git command
	// was available.
	Revision *string `protobuf:"bytes,6,opt,name=revision" json:"revision,omitempty"`
	// An identifier for this server. Used in
	// system parameters.
	ServerId *string `protobuf:"bytes,2,opt,name=serverId" json:"serverId,omitempty"`
	// A default instance for this Yamcs installation.
	// This is a calculated suggestion. UI clients may ignore.
	DefaultYamcsInstance *string `protobuf:"bytes,3,opt,name=defaultYamcsInstance" json:"defaultYamcsInstance,omitempty"`
	// Plugins loaded within this server instance
	Plugins []*GetServerInfoResponse_PluginInfo `protobuf:"bytes,5,rep,name=plugins" json:"plugins,omitempty"`
	// Additional options available to commands
	CommandOptions []*GetServerInfoResponse_CommandOptionInfo `protobuf:"bytes,7,rep,name=commandOptions" json:"commandOptions,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetServerInfoResponse) Reset() {
	*x = GetServerInfoResponse{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerInfoResponse) ProtoMessage() {}

func (x *GetServerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerInfoResponse.ProtoReflect.Descriptor instead.
func (*GetServerInfoResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetServerInfoResponse) GetYamcsVersion() string {
	if x != nil && x.YamcsVersion != nil {
		return *x.YamcsVersion
	}
	return ""
}

func (x *GetServerInfoResponse) GetRevision() string {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return ""
}

func (x *GetServerInfoResponse) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

func (x *GetServerInfoResponse) GetDefaultYamcsInstance() string {
	if x != nil && x.DefaultYamcsInstance != nil {
		return *x.DefaultYamcsInstance
	}
	return ""
}

func (x *GetServerInfoResponse) GetPlugins() []*GetServerInfoResponse_PluginInfo {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *GetServerInfoResponse) GetCommandOptions() []*GetServerInfoResponse_CommandOptionInfo {
	if x != nil {
		return x.CommandOptions
	}
	return nil
}

type ClientConnectionInfo struct {
	state           protoimpl.MessageState                `protogen:"open.v1"`
	Id              *string                               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Open            *bool                                 `protobuf:"varint,2,opt,name=open" json:"open,omitempty"`
	Active          *bool                                 `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
	Writable        *bool                                 `protobuf:"varint,4,opt,name=writable" json:"writable,omitempty"`
	RemoteAddress   *string                               `protobuf:"bytes,5,opt,name=remoteAddress" json:"remoteAddress,omitempty"`
	ReadBytes       *uint64                               `protobuf:"varint,6,opt,name=readBytes" json:"readBytes,omitempty"`
	WrittenBytes    *uint64                               `protobuf:"varint,7,opt,name=writtenBytes" json:"writtenBytes,omitempty"`
	ReadThroughput  *uint64                               `protobuf:"varint,8,opt,name=readThroughput" json:"readThroughput,omitempty"`
	WriteThroughput *uint64                               `protobuf:"varint,9,opt,name=writeThroughput" json:"writeThroughput,omitempty"`
	HttpRequest     *ClientConnectionInfo_HttpRequestInfo `protobuf:"bytes,10,opt,name=httpRequest" json:"httpRequest,omitempty"`
	Username        *string                               `protobuf:"bytes,11,opt,name=username" json:"username,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ClientConnectionInfo) Reset() {
	*x = ClientConnectionInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientConnectionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConnectionInfo) ProtoMessage() {}

func (x *ClientConnectionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConnectionInfo.ProtoReflect.Descriptor instead.
func (*ClientConnectionInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{12}
}

func (x *ClientConnectionInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ClientConnectionInfo) GetOpen() bool {
	if x != nil && x.Open != nil {
		return *x.Open
	}
	return false
}

func (x *ClientConnectionInfo) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *ClientConnectionInfo) GetWritable() bool {
	if x != nil && x.Writable != nil {
		return *x.Writable
	}
	return false
}

func (x *ClientConnectionInfo) GetRemoteAddress() string {
	if x != nil && x.RemoteAddress != nil {
		return *x.RemoteAddress
	}
	return ""
}

func (x *ClientConnectionInfo) GetReadBytes() uint64 {
	if x != nil && x.ReadBytes != nil {
		return *x.ReadBytes
	}
	return 0
}

func (x *ClientConnectionInfo) GetWrittenBytes() uint64 {
	if x != nil && x.WrittenBytes != nil {
		return *x.WrittenBytes
	}
	return 0
}

func (x *ClientConnectionInfo) GetReadThroughput() uint64 {
	if x != nil && x.ReadThroughput != nil {
		return *x.ReadThroughput
	}
	return 0
}

func (x *ClientConnectionInfo) GetWriteThroughput() uint64 {
	if x != nil && x.WriteThroughput != nil {
		return *x.WriteThroughput
	}
	return 0
}

func (x *ClientConnectionInfo) GetHttpRequest() *ClientConnectionInfo_HttpRequestInfo {
	if x != nil {
		return x.HttpRequest
	}
	return nil
}

func (x *ClientConnectionInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

type SystemInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs version number.
	YamcsVersion *string `protobuf:"bytes,1,opt,name=yamcsVersion" json:"yamcsVersion,omitempty"`
	// Git revision number at build time.
	Revision *string `protobuf:"bytes,2,opt,name=revision" json:"revision,omitempty"`
	// Server identifier, as used in system parameters and distributed setups.
	ServerId *string `protobuf:"bytes,3,opt,name=serverId" json:"serverId,omitempty"`
	// Uptime of Yamcs in milliseconds
	Uptime *int64 `protobuf:"varint,5,opt,name=uptime" json:"uptime,omitempty"`
	// Java virtual machine implementation name, version and vendor
	Jvm *string `protobuf:"bytes,6,opt,name=jvm" json:"jvm,omitempty"`
	// Working directory of Yamcs (base path for relative references)
	WorkingDirectory *string `protobuf:"bytes,7,opt,name=workingDirectory" json:"workingDirectory,omitempty"`
	// Directory where configuration files are located.
	ConfigDirectory *string `protobuf:"bytes,8,opt,name=configDirectory" json:"configDirectory,omitempty"`
	// Directory where Yamcs data is stored.
	DataDirectory *string `protobuf:"bytes,9,opt,name=dataDirectory" json:"dataDirectory,omitempty"`
	// Directory where Yamcs may cache files.
	CacheDirectory *string `protobuf:"bytes,10,opt,name=cacheDirectory" json:"cacheDirectory,omitempty"`
	// Operating system name and version.
	Os *string `protobuf:"bytes,11,opt,name=os" json:"os,omitempty"`
	// Operating system architecture.
	Arch *string `protobuf:"bytes,12,opt,name=arch" json:"arch,omitempty"`
	// Number of processors available to Yamcs.
	AvailableProcessors *int32 `protobuf:"varint,13,opt,name=availableProcessors" json:"availableProcessors,omitempty"`
	// System load average for the last minute.
	LoadAverage *float64 `protobuf:"fixed64,14,opt,name=loadAverage" json:"loadAverage,omitempty"`
	// Amount of memory in bytes of the heap that is used for object allocation and that is committed for the JVM to use.
	HeapMemory *int64 `protobuf:"varint,15,opt,name=heapMemory" json:"heapMemory,omitempty"`
	// Amount of used heap memory in bytes.
	UsedHeapMemory *int64 `protobuf:"varint,16,opt,name=usedHeapMemory" json:"usedHeapMemory,omitempty"`
	// Maximum amount of heap memory in bytes that can be used for memory management.
	MaxHeapMemory *int64 `protobuf:"varint,17,opt,name=maxHeapMemory" json:"maxHeapMemory,omitempty"`
	// Amount of non-heap memory in bytes that is committed for the JVM to use.
	NonHeapMemory *int64 `protobuf:"varint,18,opt,name=nonHeapMemory" json:"nonHeapMemory,omitempty"`
	// Amount of non-heap used memory in bytes.
	UsedNonHeapMemory *int64 `protobuf:"varint,19,opt,name=usedNonHeapMemory" json:"usedNonHeapMemory,omitempty"`
	// Maximum amount of non-heap memory in bytes that can be used for memory management.
	MaxNonHeapMemory *int64 `protobuf:"varint,20,opt,name=maxNonHeapMemory" json:"maxNonHeapMemory,omitempty"`
	// Number of active threads.
	JvmThreadCount *int64 `protobuf:"varint,21,opt,name=jvmThreadCount" json:"jvmThreadCount,omitempty"`
	// Root directories, each corresponding to a distinct file hierarchy.
	RootDirectories []*RootDirectory `protobuf:"bytes,22,rep,name=rootDirectories" json:"rootDirectories,omitempty"`
	// Information about the Yamcs process and any descendants.
	Process       *ProcessInfo `protobuf:"bytes,23,opt,name=process" json:"process,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemInfo) Reset() {
	*x = SystemInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfo) ProtoMessage() {}

func (x *SystemInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfo.ProtoReflect.Descriptor instead.
func (*SystemInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{13}
}

func (x *SystemInfo) GetYamcsVersion() string {
	if x != nil && x.YamcsVersion != nil {
		return *x.YamcsVersion
	}
	return ""
}

func (x *SystemInfo) GetRevision() string {
	if x != nil && x.Revision != nil {
		return *x.Revision
	}
	return ""
}

func (x *SystemInfo) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

func (x *SystemInfo) GetUptime() int64 {
	if x != nil && x.Uptime != nil {
		return *x.Uptime
	}
	return 0
}

func (x *SystemInfo) GetJvm() string {
	if x != nil && x.Jvm != nil {
		return *x.Jvm
	}
	return ""
}

func (x *SystemInfo) GetWorkingDirectory() string {
	if x != nil && x.WorkingDirectory != nil {
		return *x.WorkingDirectory
	}
	return ""
}

func (x *SystemInfo) GetConfigDirectory() string {
	if x != nil && x.ConfigDirectory != nil {
		return *x.ConfigDirectory
	}
	return ""
}

func (x *SystemInfo) GetDataDirectory() string {
	if x != nil && x.DataDirectory != nil {
		return *x.DataDirectory
	}
	return ""
}

func (x *SystemInfo) GetCacheDirectory() string {
	if x != nil && x.CacheDirectory != nil {
		return *x.CacheDirectory
	}
	return ""
}

func (x *SystemInfo) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *SystemInfo) GetArch() string {
	if x != nil && x.Arch != nil {
		return *x.Arch
	}
	return ""
}

func (x *SystemInfo) GetAvailableProcessors() int32 {
	if x != nil && x.AvailableProcessors != nil {
		return *x.AvailableProcessors
	}
	return 0
}

func (x *SystemInfo) GetLoadAverage() float64 {
	if x != nil && x.LoadAverage != nil {
		return *x.LoadAverage
	}
	return 0
}

func (x *SystemInfo) GetHeapMemory() int64 {
	if x != nil && x.HeapMemory != nil {
		return *x.HeapMemory
	}
	return 0
}

func (x *SystemInfo) GetUsedHeapMemory() int64 {
	if x != nil && x.UsedHeapMemory != nil {
		return *x.UsedHeapMemory
	}
	return 0
}

func (x *SystemInfo) GetMaxHeapMemory() int64 {
	if x != nil && x.MaxHeapMemory != nil {
		return *x.MaxHeapMemory
	}
	return 0
}

func (x *SystemInfo) GetNonHeapMemory() int64 {
	if x != nil && x.NonHeapMemory != nil {
		return *x.NonHeapMemory
	}
	return 0
}

func (x *SystemInfo) GetUsedNonHeapMemory() int64 {
	if x != nil && x.UsedNonHeapMemory != nil {
		return *x.UsedNonHeapMemory
	}
	return 0
}

func (x *SystemInfo) GetMaxNonHeapMemory() int64 {
	if x != nil && x.MaxNonHeapMemory != nil {
		return *x.MaxNonHeapMemory
	}
	return 0
}

func (x *SystemInfo) GetJvmThreadCount() int64 {
	if x != nil && x.JvmThreadCount != nil {
		return *x.JvmThreadCount
	}
	return 0
}

func (x *SystemInfo) GetRootDirectories() []*RootDirectory {
	if x != nil {
		return x.RootDirectories
	}
	return nil
}

func (x *SystemInfo) GetProcess() *ProcessInfo {
	if x != nil {
		return x.Process
	}
	return nil
}

type RootDirectory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Root directory location.
	Directory *string `protobuf:"bytes,1,opt,name=directory" json:"directory,omitempty"`
	// The type of the file store where this root directory is located.
	Type *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// Size in bytes of the file store where this root directory is located.
	TotalSpace *int64 `protobuf:"varint,3,opt,name=totalSpace" json:"totalSpace,omitempty"`
	// Number of unallocated bytes in the file store where this root directory
	// is located.
	UnallocatedSpace *int64 `protobuf:"varint,4,opt,name=unallocatedSpace" json:"unallocatedSpace,omitempty"`
	// Number of bytes available to Yamcs on the file store where this root
	// directory is located.
	UsableSpace   *int64 `protobuf:"varint,5,opt,name=usableSpace" json:"usableSpace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RootDirectory) Reset() {
	*x = RootDirectory{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RootDirectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootDirectory) ProtoMessage() {}

func (x *RootDirectory) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootDirectory.ProtoReflect.Descriptor instead.
func (*RootDirectory) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{14}
}

func (x *RootDirectory) GetDirectory() string {
	if x != nil && x.Directory != nil {
		return *x.Directory
	}
	return ""
}

func (x *RootDirectory) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *RootDirectory) GetTotalSpace() int64 {
	if x != nil && x.TotalSpace != nil {
		return *x.TotalSpace
	}
	return 0
}

func (x *RootDirectory) GetUnallocatedSpace() int64 {
	if x != nil && x.UnallocatedSpace != nil {
		return *x.UnallocatedSpace
	}
	return 0
}

func (x *RootDirectory) GetUsableSpace() int64 {
	if x != nil && x.UsableSpace != nil {
		return *x.UsableSpace
	}
	return 0
}

type ProcessInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Native process ID.
	Pid *int64 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
	// User of the process.
	User *string `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	// Executable pathname of the process.
	Command *string `protobuf:"bytes,3,opt,name=command" json:"command,omitempty"`
	// Arguments of the process.
	Arguments []string `protobuf:"bytes,4,rep,name=arguments" json:"arguments,omitempty"`
	// Start time of the process.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=startTime" json:"startTime,omitempty"`
	// Accumulated total cputime.
	TotalCpuDuration *durationpb.Duration `protobuf:"bytes,6,opt,name=totalCpuDuration" json:"totalCpuDuration,omitempty"`
	// Direct children of the process.
	Children      []*ProcessInfo `protobuf:"bytes,7,rep,name=children" json:"children,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{15}
}

func (x *ProcessInfo) GetPid() int64 {
	if x != nil && x.Pid != nil {
		return *x.Pid
	}
	return 0
}

func (x *ProcessInfo) GetUser() string {
	if x != nil && x.User != nil {
		return *x.User
	}
	return ""
}

func (x *ProcessInfo) GetCommand() string {
	if x != nil && x.Command != nil {
		return *x.Command
	}
	return ""
}

func (x *ProcessInfo) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ProcessInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ProcessInfo) GetTotalCpuDuration() *durationpb.Duration {
	if x != nil {
		return x.TotalCpuDuration
	}
	return nil
}

func (x *ProcessInfo) GetChildren() []*ProcessInfo {
	if x != nil {
		return x.Children
	}
	return nil
}

type GetServerInfoResponse_PluginInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description   *string                `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Version       *string                `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Vendor        *string                `protobuf:"bytes,4,opt,name=vendor" json:"vendor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServerInfoResponse_PluginInfo) Reset() {
	*x = GetServerInfoResponse_PluginInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServerInfoResponse_PluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerInfoResponse_PluginInfo) ProtoMessage() {}

func (x *GetServerInfoResponse_PluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerInfoResponse_PluginInfo.ProtoReflect.Descriptor instead.
func (*GetServerInfoResponse_PluginInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GetServerInfoResponse_PluginInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GetServerInfoResponse_PluginInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *GetServerInfoResponse_PluginInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *GetServerInfoResponse_PluginInfo) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

type GetServerInfoResponse_CommandOptionInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	VerboseName   *string                `protobuf:"bytes,2,opt,name=verboseName" json:"verboseName,omitempty"`
	Type          *string                `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Help          *string                `protobuf:"bytes,4,opt,name=help" json:"help,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServerInfoResponse_CommandOptionInfo) Reset() {
	*x = GetServerInfoResponse_CommandOptionInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServerInfoResponse_CommandOptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerInfoResponse_CommandOptionInfo) ProtoMessage() {}

func (x *GetServerInfoResponse_CommandOptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerInfoResponse_CommandOptionInfo.ProtoReflect.Descriptor instead.
func (*GetServerInfoResponse_CommandOptionInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{11, 1}
}

func (x *GetServerInfoResponse_CommandOptionInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *GetServerInfoResponse_CommandOptionInfo) GetVerboseName() string {
	if x != nil && x.VerboseName != nil {
		return *x.VerboseName
	}
	return ""
}

func (x *GetServerInfoResponse_CommandOptionInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *GetServerInfoResponse_CommandOptionInfo) GetHelp() string {
	if x != nil && x.Help != nil {
		return *x.Help
	}
	return ""
}

type ClientConnectionInfo_HttpRequestInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Protocol      *string                `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	Method        *string                `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	Uri           *string                `protobuf:"bytes,3,opt,name=uri" json:"uri,omitempty"`
	KeepAlive     *bool                  `protobuf:"varint,4,opt,name=keepAlive" json:"keepAlive,omitempty"`
	UserAgent     *string                `protobuf:"bytes,5,opt,name=userAgent" json:"userAgent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientConnectionInfo_HttpRequestInfo) Reset() {
	*x = ClientConnectionInfo_HttpRequestInfo{}
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientConnectionInfo_HttpRequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConnectionInfo_HttpRequestInfo) ProtoMessage() {}

func (x *ClientConnectionInfo_HttpRequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_server_server_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConnectionInfo_HttpRequestInfo.ProtoReflect.Descriptor instead.
func (*ClientConnectionInfo_HttpRequestInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_server_server_service_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ClientConnectionInfo_HttpRequestInfo) GetProtocol() string {
	if x != nil && x.Protocol != nil {
		return *x.Protocol
	}
	return ""
}

func (x *ClientConnectionInfo_HttpRequestInfo) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *ClientConnectionInfo_HttpRequestInfo) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *ClientConnectionInfo_HttpRequestInfo) GetKeepAlive() bool {
	if x != nil && x.KeepAlive != nil {
		return *x.KeepAlive
	}
	return false
}

func (x *ClientConnectionInfo_HttpRequestInfo) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

var File_yamcs_protobuf_server_server_service_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_server_server_service_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f,
	0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x22, 0x4e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x22, 0x4e, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x22, 0xf0, 0x01, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f,
	0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x8c, 0x01,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0x65, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22,
	0xf9, 0x01, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3d, 0x0a, 0x05,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0xc7, 0x04, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x59, 0x61, 0x6d, 0x63,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x59, 0x61, 0x6d, 0x63, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x74, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x1a, 0x6d, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x65, 0x6c, 0x70, 0x22, 0xb9, 0x04, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x77, 0x72,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x72,
	0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x12, 0x5d, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x93, 0x01, 0x0a, 0x0f,
	0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x22, 0xd2, 0x06, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x76, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6a, 0x76, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x30,
	0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x48, 0x65, 0x61, 0x70, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x64,
	0x48, 0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x48, 0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x64, 0x4e, 0x6f,
	0x6e, 0x48, 0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x75, 0x73, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x6e, 0x48, 0x65,
	0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x6a, 0x76, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6a, 0x76, 0x6d, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x6f, 0x74, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x6e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x6e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x22, 0xac, 0x02, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x70, 0x75, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x32, 0xb6, 0x08, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x41, 0x70, 0x69, 0x12, 0x61, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0a, 0x8a, 0x92,
	0x03, 0x06, 0x0a, 0x04, 0x2f, 0x61, 0x70, 0x69, 0x12, 0x5e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x12, 0x8a, 0x92, 0x03, 0x0e, 0x0a, 0x0c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x79, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x0d, 0xda, 0x92, 0x03, 0x09,
	0x0a, 0x07, 0x73, 0x79, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x8a, 0x92,
	0x03, 0x0d, 0x0a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x62, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x11, 0x8a, 0x92, 0x03, 0x0d, 0x0a, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x12, 0x78, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x12, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x8a, 0x92, 0x03, 0x0e, 0x0a,
	0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x70, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x17, 0x8a, 0x92, 0x03, 0x13, 0x0a, 0x11, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x53, 0x0a, 0x0b, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x17, 0x8a, 0x92, 0x03,
	0x13, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x3a,
	0x64, 0x75, 0x6d, 0x70, 0x12, 0x77, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x74, 0x74, 0x70, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x22, 0x29, 0x8a, 0x92, 0x03, 0x25, 0x6a, 0x10, 0x47, 0x65, 0x74, 0x20, 0x48, 0x54,
	0x54, 0x50, 0x20, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x0a, 0x11, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x80, 0x01,
	0x0a, 0x14, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x48, 0x74, 0x74, 0x70, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x22, 0x2a, 0xda, 0x92, 0x03, 0x26, 0x0a, 0x0c, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x20, 0x48, 0x54, 0x54, 0x50, 0x20, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x30, 0x01,
	0x42, 0x70, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72,
})

var (
	file_yamcs_protobuf_server_server_service_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_server_server_service_proto_rawDescData []byte
)

func file_yamcs_protobuf_server_server_service_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_server_server_service_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_server_server_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_server_server_service_proto_rawDesc), len(file_yamcs_protobuf_server_server_service_proto_rawDesc)))
	})
	return file_yamcs_protobuf_server_server_service_proto_rawDescData
}

var file_yamcs_protobuf_server_server_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_yamcs_protobuf_server_server_service_proto_goTypes = []any{
	(*GetThreadRequest)(nil),                        // 0: yamcs.protobuf.server.GetThreadRequest
	(*ListThreadsResponse)(nil),                     // 1: yamcs.protobuf.server.ListThreadsResponse
	(*ListRoutesResponse)(nil),                      // 2: yamcs.protobuf.server.ListRoutesResponse
	(*ListTopicsResponse)(nil),                      // 3: yamcs.protobuf.server.ListTopicsResponse
	(*HttpTraffic)(nil),                             // 4: yamcs.protobuf.server.HttpTraffic
	(*RouteInfo)(nil),                               // 5: yamcs.protobuf.server.RouteInfo
	(*TopicInfo)(nil),                               // 6: yamcs.protobuf.server.TopicInfo
	(*TraceElementInfo)(nil),                        // 7: yamcs.protobuf.server.TraceElementInfo
	(*ListThreadsRequest)(nil),                      // 8: yamcs.protobuf.server.ListThreadsRequest
	(*ThreadGroupInfo)(nil),                         // 9: yamcs.protobuf.server.ThreadGroupInfo
	(*ThreadInfo)(nil),                              // 10: yamcs.protobuf.server.ThreadInfo
	(*GetServerInfoResponse)(nil),                   // 11: yamcs.protobuf.server.GetServerInfoResponse
	(*ClientConnectionInfo)(nil),                    // 12: yamcs.protobuf.server.ClientConnectionInfo
	(*SystemInfo)(nil),                              // 13: yamcs.protobuf.server.SystemInfo
	(*RootDirectory)(nil),                           // 14: yamcs.protobuf.server.RootDirectory
	(*ProcessInfo)(nil),                             // 15: yamcs.protobuf.server.ProcessInfo
	(*GetServerInfoResponse_PluginInfo)(nil),        // 16: yamcs.protobuf.server.GetServerInfoResponse.PluginInfo
	(*GetServerInfoResponse_CommandOptionInfo)(nil), // 17: yamcs.protobuf.server.GetServerInfoResponse.CommandOptionInfo
	(*ClientConnectionInfo_HttpRequestInfo)(nil),    // 18: yamcs.protobuf.server.ClientConnectionInfo.HttpRequestInfo
	(*timestamppb.Timestamp)(nil),                   // 19: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                     // 20: google.protobuf.Duration
	(*emptypb.Empty)(nil),                           // 21: google.protobuf.Empty
	(*api.HttpBody)(nil),                            // 22: yamcs.api.HttpBody
}
var file_yamcs_protobuf_server_server_service_proto_depIdxs = []int32{
	10, // 0: yamcs.protobuf.server.ListThreadsResponse.threads:type_name -> yamcs.protobuf.server.ThreadInfo
	5,  // 1: yamcs.protobuf.server.ListRoutesResponse.routes:type_name -> yamcs.protobuf.server.RouteInfo
	6,  // 2: yamcs.protobuf.server.ListTopicsResponse.topics:type_name -> yamcs.protobuf.server.TopicInfo
	12, // 3: yamcs.protobuf.server.HttpTraffic.connections:type_name -> yamcs.protobuf.server.ClientConnectionInfo
	9,  // 4: yamcs.protobuf.server.ThreadGroupInfo.parent:type_name -> yamcs.protobuf.server.ThreadGroupInfo
	9,  // 5: yamcs.protobuf.server.ThreadInfo.group:type_name -> yamcs.protobuf.server.ThreadGroupInfo
	7,  // 6: yamcs.protobuf.server.ThreadInfo.trace:type_name -> yamcs.protobuf.server.TraceElementInfo
	16, // 7: yamcs.protobuf.server.GetServerInfoResponse.plugins:type_name -> yamcs.protobuf.server.GetServerInfoResponse.PluginInfo
	17, // 8: yamcs.protobuf.server.GetServerInfoResponse.commandOptions:type_name -> yamcs.protobuf.server.GetServerInfoResponse.CommandOptionInfo
	18, // 9: yamcs.protobuf.server.ClientConnectionInfo.httpRequest:type_name -> yamcs.protobuf.server.ClientConnectionInfo.HttpRequestInfo
	14, // 10: yamcs.protobuf.server.SystemInfo.rootDirectories:type_name -> yamcs.protobuf.server.RootDirectory
	15, // 11: yamcs.protobuf.server.SystemInfo.process:type_name -> yamcs.protobuf.server.ProcessInfo
	19, // 12: yamcs.protobuf.server.ProcessInfo.startTime:type_name -> google.protobuf.Timestamp
	20, // 13: yamcs.protobuf.server.ProcessInfo.totalCpuDuration:type_name -> google.protobuf.Duration
	15, // 14: yamcs.protobuf.server.ProcessInfo.children:type_name -> yamcs.protobuf.server.ProcessInfo
	21, // 15: yamcs.protobuf.server.ServerApi.GetServerInfo:input_type -> google.protobuf.Empty
	21, // 16: yamcs.protobuf.server.ServerApi.GetSystemInfo:input_type -> google.protobuf.Empty
	21, // 17: yamcs.protobuf.server.ServerApi.SubscribeSystemInfo:input_type -> google.protobuf.Empty
	21, // 18: yamcs.protobuf.server.ServerApi.ListRoutes:input_type -> google.protobuf.Empty
	21, // 19: yamcs.protobuf.server.ServerApi.ListTopics:input_type -> google.protobuf.Empty
	8,  // 20: yamcs.protobuf.server.ServerApi.ListThreads:input_type -> yamcs.protobuf.server.ListThreadsRequest
	0,  // 21: yamcs.protobuf.server.ServerApi.GetThread:input_type -> yamcs.protobuf.server.GetThreadRequest
	21, // 22: yamcs.protobuf.server.ServerApi.DumpThreads:input_type -> google.protobuf.Empty
	21, // 23: yamcs.protobuf.server.ServerApi.GetHttpTraffic:input_type -> google.protobuf.Empty
	21, // 24: yamcs.protobuf.server.ServerApi.SubscribeHttpTraffic:input_type -> google.protobuf.Empty
	11, // 25: yamcs.protobuf.server.ServerApi.GetServerInfo:output_type -> yamcs.protobuf.server.GetServerInfoResponse
	13, // 26: yamcs.protobuf.server.ServerApi.GetSystemInfo:output_type -> yamcs.protobuf.server.SystemInfo
	13, // 27: yamcs.protobuf.server.ServerApi.SubscribeSystemInfo:output_type -> yamcs.protobuf.server.SystemInfo
	2,  // 28: yamcs.protobuf.server.ServerApi.ListRoutes:output_type -> yamcs.protobuf.server.ListRoutesResponse
	3,  // 29: yamcs.protobuf.server.ServerApi.ListTopics:output_type -> yamcs.protobuf.server.ListTopicsResponse
	1,  // 30: yamcs.protobuf.server.ServerApi.ListThreads:output_type -> yamcs.protobuf.server.ListThreadsResponse
	10, // 31: yamcs.protobuf.server.ServerApi.GetThread:output_type -> yamcs.protobuf.server.ThreadInfo
	22, // 32: yamcs.protobuf.server.ServerApi.DumpThreads:output_type -> yamcs.api.HttpBody
	4,  // 33: yamcs.protobuf.server.ServerApi.GetHttpTraffic:output_type -> yamcs.protobuf.server.HttpTraffic
	4,  // 34: yamcs.protobuf.server.ServerApi.SubscribeHttpTraffic:output_type -> yamcs.protobuf.server.HttpTraffic
	25, // [25:35] is the sub-list for method output_type
	15, // [15:25] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_server_server_service_proto_init() }
func file_yamcs_protobuf_server_server_service_proto_init() {
	if File_yamcs_protobuf_server_server_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_server_server_service_proto_rawDesc), len(file_yamcs_protobuf_server_server_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_server_server_service_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_server_server_service_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_server_server_service_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_server_server_service_proto = out.File
	file_yamcs_protobuf_server_server_service_proto_goTypes = nil
	file_yamcs_protobuf_server_server_service_proto_depIdxs = nil
}
