// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/tco/tco.proto

package tco

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetTcoConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// service name.
	ServiceName   *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTcoConfigRequest) Reset() {
	*x = GetTcoConfigRequest{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTcoConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTcoConfigRequest) ProtoMessage() {}

func (x *GetTcoConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTcoConfigRequest.ProtoReflect.Descriptor instead.
func (*GetTcoConfigRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{0}
}

func (x *GetTcoConfigRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetTcoConfigRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

type SetTcoConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Service name.
	ServiceName *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	// configuration to set
	Config        *TcoConfig `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTcoConfigRequest) Reset() {
	*x = SetTcoConfigRequest{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTcoConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTcoConfigRequest) ProtoMessage() {}

func (x *SetTcoConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTcoConfigRequest.ProtoReflect.Descriptor instead.
func (*SetTcoConfigRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{1}
}

func (x *SetTcoConfigRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SetTcoConfigRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *SetTcoConfigRequest) GetConfig() *TcoConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type TcoResetRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Service name.
	ServiceName   *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcoResetRequest) Reset() {
	*x = TcoResetRequest{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcoResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcoResetRequest) ProtoMessage() {}

func (x *TcoResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcoResetRequest.ProtoReflect.Descriptor instead.
func (*TcoResetRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{2}
}

func (x *TcoResetRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *TcoResetRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

type TcoConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accuracy      *float64               `protobuf:"fixed64,1,opt,name=accuracy" json:"accuracy,omitempty"`
	Validity      *float64               `protobuf:"fixed64,2,opt,name=validity" json:"validity,omitempty"`
	OnboardDelay  *float64               `protobuf:"fixed64,3,opt,name=onboardDelay" json:"onboardDelay,omitempty"`
	DefaultTof    *float64               `protobuf:"fixed64,4,opt,name=defaultTof" json:"defaultTof,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcoConfig) Reset() {
	*x = TcoConfig{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcoConfig) ProtoMessage() {}

func (x *TcoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcoConfig.ProtoReflect.Descriptor instead.
func (*TcoConfig) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{3}
}

func (x *TcoConfig) GetAccuracy() float64 {
	if x != nil && x.Accuracy != nil {
		return *x.Accuracy
	}
	return 0
}

func (x *TcoConfig) GetValidity() float64 {
	if x != nil && x.Validity != nil {
		return *x.Validity
	}
	return 0
}

func (x *TcoConfig) GetOnboardDelay() float64 {
	if x != nil && x.OnboardDelay != nil {
		return *x.OnboardDelay
	}
	return 0
}

func (x *TcoConfig) GetDefaultTof() float64 {
	if x != nil && x.DefaultTof != nil {
		return *x.DefaultTof
	}
	return 0
}

type GetTcoStatusRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Service name.
	ServiceName   *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTcoStatusRequest) Reset() {
	*x = GetTcoStatusRequest{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTcoStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTcoStatusRequest) ProtoMessage() {}

func (x *GetTcoStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTcoStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTcoStatusRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{4}
}

func (x *GetTcoStatusRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetTcoStatusRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

type SetCoefficientsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Service name.
	ServiceName *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	// Time correlation coefficients
	Coefficients  *TcoCoefficients `protobuf:"bytes,3,opt,name=coefficients" json:"coefficients,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCoefficientsRequest) Reset() {
	*x = SetCoefficientsRequest{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCoefficientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCoefficientsRequest) ProtoMessage() {}

func (x *SetCoefficientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCoefficientsRequest.ProtoReflect.Descriptor instead.
func (*SetCoefficientsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{5}
}

func (x *SetCoefficientsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SetCoefficientsRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *SetCoefficientsRequest) GetCoefficients() *TcoCoefficients {
	if x != nil {
		return x.Coefficients
	}
	return nil
}

type AddTimeOfFlightIntervalsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Service name.
	ServiceName *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	// intervals for time of flight calculation
	Intervals     []*TofInterval `protobuf:"bytes,3,rep,name=intervals" json:"intervals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTimeOfFlightIntervalsRequest) Reset() {
	*x = AddTimeOfFlightIntervalsRequest{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTimeOfFlightIntervalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTimeOfFlightIntervalsRequest) ProtoMessage() {}

func (x *AddTimeOfFlightIntervalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTimeOfFlightIntervalsRequest.ProtoReflect.Descriptor instead.
func (*AddTimeOfFlightIntervalsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{6}
}

func (x *AddTimeOfFlightIntervalsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *AddTimeOfFlightIntervalsRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *AddTimeOfFlightIntervalsRequest) GetIntervals() []*TofInterval {
	if x != nil {
		return x.Intervals
	}
	return nil
}

// Delete all the TofIntervals having
// start <= tofInterval.ertStart <= stop
type DeleteTimeOfFlightIntervalsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Service name.
	ServiceName   *string                `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	Stop          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stop" json:"stop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTimeOfFlightIntervalsRequest) Reset() {
	*x = DeleteTimeOfFlightIntervalsRequest{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTimeOfFlightIntervalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTimeOfFlightIntervalsRequest) ProtoMessage() {}

func (x *DeleteTimeOfFlightIntervalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTimeOfFlightIntervalsRequest.ProtoReflect.Descriptor instead.
func (*DeleteTimeOfFlightIntervalsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteTimeOfFlightIntervalsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *DeleteTimeOfFlightIntervalsRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *DeleteTimeOfFlightIntervalsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DeleteTimeOfFlightIntervalsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

type TcoCoefficients struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Utc           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=utc" json:"utc,omitempty"`
	Obt           *uint64                `protobuf:"varint,2,opt,name=obt" json:"obt,omitempty"`
	Gradient      *float64               `protobuf:"fixed64,3,opt,name=gradient" json:"gradient,omitempty"`
	Offset        *float64               `protobuf:"fixed64,4,opt,name=offset" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcoCoefficients) Reset() {
	*x = TcoCoefficients{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcoCoefficients) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcoCoefficients) ProtoMessage() {}

func (x *TcoCoefficients) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcoCoefficients.ProtoReflect.Descriptor instead.
func (*TcoCoefficients) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{8}
}

func (x *TcoCoefficients) GetUtc() *timestamppb.Timestamp {
	if x != nil {
		return x.Utc
	}
	return nil
}

func (x *TcoCoefficients) GetObt() uint64 {
	if x != nil && x.Obt != nil {
		return *x.Obt
	}
	return 0
}

func (x *TcoCoefficients) GetGradient() float64 {
	if x != nil && x.Gradient != nil {
		return *x.Gradient
	}
	return 0
}

func (x *TcoCoefficients) GetOffset() float64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

// If the TCO is used only for verifying the synchronization, the message will
// contain only the validity, accuracy and deviation.
type TcoStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Currently used coefficients.
	// If not present, the synchronization is not established
	Coefficients *TcoCoefficients `protobuf:"bytes,1,opt,name=coefficients" json:"coefficients,omitempty"`
	// The time when the coefficients have been computed
	CoefficientsTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=coefficientsTime" json:"coefficientsTime,omitempty"`
	// The last computed deviation
	Deviation *float64 `protobuf:"fixed64,3,opt,name=deviation" json:"deviation,omitempty"`
	// The last accumulated samples
	// These are not necessary those from which the coefficients
	// have been calculated because the coefficients will only
	// be recalculated when the deviation is higher than the accuracy settings
	Samples       []*TcoSample `protobuf:"bytes,4,rep,name=samples" json:"samples,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcoStatus) Reset() {
	*x = TcoStatus{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcoStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcoStatus) ProtoMessage() {}

func (x *TcoStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcoStatus.ProtoReflect.Descriptor instead.
func (*TcoStatus) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{9}
}

func (x *TcoStatus) GetCoefficients() *TcoCoefficients {
	if x != nil {
		return x.Coefficients
	}
	return nil
}

func (x *TcoStatus) GetCoefficientsTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CoefficientsTime
	}
	return nil
}

func (x *TcoStatus) GetDeviation() float64 {
	if x != nil && x.Deviation != nil {
		return *x.Deviation
	}
	return 0
}

func (x *TcoStatus) GetSamples() []*TcoSample {
	if x != nil {
		return x.Samples
	}
	return nil
}

// Sample association between UTC and Onboard time.
// This is computed by the TCO service after adjusting for internal
// delays and time of flight.
type TcoSample struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Utc           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=utc" json:"utc,omitempty"`
	Obt           *uint64                `protobuf:"varint,2,opt,name=obt" json:"obt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TcoSample) Reset() {
	*x = TcoSample{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TcoSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcoSample) ProtoMessage() {}

func (x *TcoSample) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcoSample.ProtoReflect.Descriptor instead.
func (*TcoSample) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{10}
}

func (x *TcoSample) GetUtc() *timestamppb.Timestamp {
	if x != nil {
		return x.Utc
	}
	return nil
}

func (x *TcoSample) GetObt() uint64 {
	if x != nil && x.Obt != nil {
		return *x.Obt
	}
	return 0
}

type TofInterval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErtStart      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=ertStart" json:"ertStart,omitempty"`
	ErtStop       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ertStop" json:"ertStop,omitempty"`
	PolCoef       []float64              `protobuf:"fixed64,3,rep,name=polCoef" json:"polCoef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TofInterval) Reset() {
	*x = TofInterval{}
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TofInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TofInterval) ProtoMessage() {}

func (x *TofInterval) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_tco_tco_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TofInterval.ProtoReflect.Descriptor instead.
func (*TofInterval) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_tco_tco_proto_rawDescGZIP(), []int{11}
}

func (x *TofInterval) GetErtStart() *timestamppb.Timestamp {
	if x != nil {
		return x.ErtStart
	}
	return nil
}

func (x *TofInterval) GetErtStop() *timestamppb.Timestamp {
	if x != nil {
		return x.ErtStop
	}
	return nil
}

func (x *TofInterval) GetPolCoef() []float64 {
	if x != nil {
		return x.PolCoef
	}
	return nil
}

var File_yamcs_protobuf_tco_tco_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_tco_tco_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x63, 0x6f, 0x2f, 0x74, 0x63, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74,
	0x63, 0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x54, 0x63, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x54, 0x63, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x63, 0x6f, 0x2e, 0x54, 0x63,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x4f, 0x0a, 0x0f, 0x54, 0x63, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x87, 0x01, 0x0a, 0x09, 0x54, 0x63, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x6e,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x6f, 0x66, 0x22, 0x53, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x54, 0x63, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x9f, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x74, 0x63, 0x6f, 0x2e, 0x54, 0x63, 0x6f, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0x9e, 0x01, 0x0a, 0x1f, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x63, 0x6f, 0x2e, 0x54, 0x6f, 0x66, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x66, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x54, 0x63,
	0x6f, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x03, 0x75, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x75, 0x74, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x62, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6f, 0x62, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0xf3, 0x01, 0x0a, 0x09, 0x54, 0x63, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x47, 0x0a, 0x0c, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x63, 0x6f, 0x2e, 0x54, 0x63, 0x6f, 0x43, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x74, 0x63, 0x6f, 0x2e, 0x54, 0x63, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x09, 0x54, 0x63, 0x6f, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x74, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x75,
	0x74, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x62, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x6f, 0x62, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x54, 0x6f, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x07,
	0x65, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x72, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x43, 0x6f, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x43, 0x6f, 0x65, 0x66, 0x32, 0x8f, 0x08, 0x0a,
	0x12, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x70, 0x69, 0x12, 0x83, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x74, 0x63, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x63, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x63, 0x6f, 0x2e,
	0x54, 0x63, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2e, 0x8a, 0x92, 0x03, 0x2a, 0x0a,
	0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x63, 0x6f, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x63, 0x6f, 0x2e, 0x53, 0x65, 0x74,
	0x54, 0x63, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x36, 0x8a, 0x92, 0x03, 0x32, 0x3a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x63, 0x6f,
	0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x83, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x74, 0x63, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x63, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x63, 0x6f, 0x2e, 0x54, 0x63, 0x6f,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2e, 0x8a, 0x92, 0x03, 0x2a, 0x0a, 0x28, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x63, 0x6f, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x63, 0x6f, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x42,
	0x8a, 0x92, 0x03, 0x3e, 0x3a, 0x0c, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x63, 0x6f, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x73, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x63, 0x6f,
	0x2e, 0x54, 0x63, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2d, 0x8a, 0x92, 0x03, 0x29, 0x1a, 0x27,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x63, 0x6f, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x3a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0xa4, 0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x66, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x74, 0x63, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x66, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x3b, 0x8a, 0x92, 0x03, 0x37, 0x3a, 0x01, 0x2a, 0x1a, 0x32, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x63, 0x6f, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f,
	0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x6f,
	0x66, 0x3a, 0x61, 0x64, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0xad,
	0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x36,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x74, 0x63, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e,
	0x8a, 0x92, 0x03, 0x3a, 0x3a, 0x01, 0x2a, 0x1a, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x63,
	0x6f, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x6f, 0x66, 0x3a, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x42, 0x63,
	0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x42, 0x08, 0x54, 0x63, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f,
	0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61,
	0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x63, 0x6f,
})

var (
	file_yamcs_protobuf_tco_tco_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_tco_tco_proto_rawDescData []byte
)

func file_yamcs_protobuf_tco_tco_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_tco_tco_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_tco_tco_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_tco_tco_proto_rawDesc), len(file_yamcs_protobuf_tco_tco_proto_rawDesc)))
	})
	return file_yamcs_protobuf_tco_tco_proto_rawDescData
}

var file_yamcs_protobuf_tco_tco_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_yamcs_protobuf_tco_tco_proto_goTypes = []any{
	(*GetTcoConfigRequest)(nil),                // 0: yamcs.protobuf.tco.GetTcoConfigRequest
	(*SetTcoConfigRequest)(nil),                // 1: yamcs.protobuf.tco.SetTcoConfigRequest
	(*TcoResetRequest)(nil),                    // 2: yamcs.protobuf.tco.TcoResetRequest
	(*TcoConfig)(nil),                          // 3: yamcs.protobuf.tco.TcoConfig
	(*GetTcoStatusRequest)(nil),                // 4: yamcs.protobuf.tco.GetTcoStatusRequest
	(*SetCoefficientsRequest)(nil),             // 5: yamcs.protobuf.tco.SetCoefficientsRequest
	(*AddTimeOfFlightIntervalsRequest)(nil),    // 6: yamcs.protobuf.tco.AddTimeOfFlightIntervalsRequest
	(*DeleteTimeOfFlightIntervalsRequest)(nil), // 7: yamcs.protobuf.tco.DeleteTimeOfFlightIntervalsRequest
	(*TcoCoefficients)(nil),                    // 8: yamcs.protobuf.tco.TcoCoefficients
	(*TcoStatus)(nil),                          // 9: yamcs.protobuf.tco.TcoStatus
	(*TcoSample)(nil),                          // 10: yamcs.protobuf.tco.TcoSample
	(*TofInterval)(nil),                        // 11: yamcs.protobuf.tco.TofInterval
	(*timestamppb.Timestamp)(nil),              // 12: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                      // 13: google.protobuf.Empty
}
var file_yamcs_protobuf_tco_tco_proto_depIdxs = []int32{
	3,  // 0: yamcs.protobuf.tco.SetTcoConfigRequest.config:type_name -> yamcs.protobuf.tco.TcoConfig
	8,  // 1: yamcs.protobuf.tco.SetCoefficientsRequest.coefficients:type_name -> yamcs.protobuf.tco.TcoCoefficients
	11, // 2: yamcs.protobuf.tco.AddTimeOfFlightIntervalsRequest.intervals:type_name -> yamcs.protobuf.tco.TofInterval
	12, // 3: yamcs.protobuf.tco.DeleteTimeOfFlightIntervalsRequest.start:type_name -> google.protobuf.Timestamp
	12, // 4: yamcs.protobuf.tco.DeleteTimeOfFlightIntervalsRequest.stop:type_name -> google.protobuf.Timestamp
	12, // 5: yamcs.protobuf.tco.TcoCoefficients.utc:type_name -> google.protobuf.Timestamp
	8,  // 6: yamcs.protobuf.tco.TcoStatus.coefficients:type_name -> yamcs.protobuf.tco.TcoCoefficients
	12, // 7: yamcs.protobuf.tco.TcoStatus.coefficientsTime:type_name -> google.protobuf.Timestamp
	10, // 8: yamcs.protobuf.tco.TcoStatus.samples:type_name -> yamcs.protobuf.tco.TcoSample
	12, // 9: yamcs.protobuf.tco.TcoSample.utc:type_name -> google.protobuf.Timestamp
	12, // 10: yamcs.protobuf.tco.TofInterval.ertStart:type_name -> google.protobuf.Timestamp
	12, // 11: yamcs.protobuf.tco.TofInterval.ertStop:type_name -> google.protobuf.Timestamp
	0,  // 12: yamcs.protobuf.tco.TimeCorrelationApi.GetConfig:input_type -> yamcs.protobuf.tco.GetTcoConfigRequest
	1,  // 13: yamcs.protobuf.tco.TimeCorrelationApi.SetConfig:input_type -> yamcs.protobuf.tco.SetTcoConfigRequest
	4,  // 14: yamcs.protobuf.tco.TimeCorrelationApi.GetStatus:input_type -> yamcs.protobuf.tco.GetTcoStatusRequest
	5,  // 15: yamcs.protobuf.tco.TimeCorrelationApi.SetCoefficients:input_type -> yamcs.protobuf.tco.SetCoefficientsRequest
	2,  // 16: yamcs.protobuf.tco.TimeCorrelationApi.Reset:input_type -> yamcs.protobuf.tco.TcoResetRequest
	6,  // 17: yamcs.protobuf.tco.TimeCorrelationApi.AddTimeOfFlightIntervals:input_type -> yamcs.protobuf.tco.AddTimeOfFlightIntervalsRequest
	7,  // 18: yamcs.protobuf.tco.TimeCorrelationApi.DeleteTimeOfFlightIntervals:input_type -> yamcs.protobuf.tco.DeleteTimeOfFlightIntervalsRequest
	3,  // 19: yamcs.protobuf.tco.TimeCorrelationApi.GetConfig:output_type -> yamcs.protobuf.tco.TcoConfig
	13, // 20: yamcs.protobuf.tco.TimeCorrelationApi.SetConfig:output_type -> google.protobuf.Empty
	9,  // 21: yamcs.protobuf.tco.TimeCorrelationApi.GetStatus:output_type -> yamcs.protobuf.tco.TcoStatus
	13, // 22: yamcs.protobuf.tco.TimeCorrelationApi.SetCoefficients:output_type -> google.protobuf.Empty
	13, // 23: yamcs.protobuf.tco.TimeCorrelationApi.Reset:output_type -> google.protobuf.Empty
	13, // 24: yamcs.protobuf.tco.TimeCorrelationApi.AddTimeOfFlightIntervals:output_type -> google.protobuf.Empty
	13, // 25: yamcs.protobuf.tco.TimeCorrelationApi.DeleteTimeOfFlightIntervals:output_type -> google.protobuf.Empty
	19, // [19:26] is the sub-list for method output_type
	12, // [12:19] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_tco_tco_proto_init() }
func file_yamcs_protobuf_tco_tco_proto_init() {
	if File_yamcs_protobuf_tco_tco_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_tco_tco_proto_rawDesc), len(file_yamcs_protobuf_tco_tco_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_tco_tco_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_tco_tco_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_tco_tco_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_tco_tco_proto = out.File
	file_yamcs_protobuf_tco_tco_proto_goTypes = nil
	file_yamcs_protobuf_tco_tco_proto_depIdxs = nil
}
