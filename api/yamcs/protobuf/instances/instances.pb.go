// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/instances/instances.proto

package instances

import (
	mdb "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf/mdb"
	yamcsManagement "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf/yamcsManagement"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type YamcsInstance_InstanceState int32

const (
	YamcsInstance_OFFLINE      YamcsInstance_InstanceState = 0
	YamcsInstance_INITIALIZING YamcsInstance_InstanceState = 1
	YamcsInstance_INITIALIZED  YamcsInstance_InstanceState = 2
	YamcsInstance_STARTING     YamcsInstance_InstanceState = 3
	YamcsInstance_RUNNING      YamcsInstance_InstanceState = 4
	YamcsInstance_STOPPING     YamcsInstance_InstanceState = 5
	YamcsInstance_FAILED       YamcsInstance_InstanceState = 6
)

// Enum value maps for YamcsInstance_InstanceState.
var (
	YamcsInstance_InstanceState_name = map[int32]string{
		0: "OFFLINE",
		1: "INITIALIZING",
		2: "INITIALIZED",
		3: "STARTING",
		4: "RUNNING",
		5: "STOPPING",
		6: "FAILED",
	}
	YamcsInstance_InstanceState_value = map[string]int32{
		"OFFLINE":      0,
		"INITIALIZING": 1,
		"INITIALIZED":  2,
		"STARTING":     3,
		"RUNNING":      4,
		"STOPPING":     5,
		"FAILED":       6,
	}
)

func (x YamcsInstance_InstanceState) Enum() *YamcsInstance_InstanceState {
	p := new(YamcsInstance_InstanceState)
	*p = x
	return p
}

func (x YamcsInstance_InstanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (YamcsInstance_InstanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_instances_instances_proto_enumTypes[0].Descriptor()
}

func (YamcsInstance_InstanceState) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_instances_instances_proto_enumTypes[0]
}

func (x YamcsInstance_InstanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *YamcsInstance_InstanceState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = YamcsInstance_InstanceState(num)
	return nil
}

// Deprecated: Use YamcsInstance_InstanceState.Descriptor instead.
func (YamcsInstance_InstanceState) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_instances_instances_proto_rawDescGZIP(), []int{0, 0}
}

type YamcsInstance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Instance name.
	Name            *string                          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MissionDatabase *mdb.MissionDatabase             `protobuf:"bytes,3,opt,name=missionDatabase" json:"missionDatabase,omitempty"`
	Processors      []*yamcsManagement.ProcessorInfo `protobuf:"bytes,4,rep,name=processors" json:"processors,omitempty"`
	State           *YamcsInstance_InstanceState     `protobuf:"varint,11,opt,name=state,enum=yamcs.protobuf.instances.YamcsInstance_InstanceState" json:"state,omitempty"`
	// in case the state=FAILED, this field will indicate the cause of the failure
	// the missionDatabase and other fields may not be filled when this happens
	FailureCause *string                `protobuf:"bytes,9,opt,name=failureCause" json:"failureCause,omitempty"`
	MissionTime  *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=missionTime" json:"missionTime,omitempty"`
	// Labels assigned to this instance. Each entry is keyed by the tag name
	// of the label. The value represent the label value for that tag.
	Labels map[string]string `protobuf:"bytes,12,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Feature capability hints for client use
	Capabilities []string `protobuf:"bytes,13,rep,name=capabilities" json:"capabilities,omitempty"`
	// Name of the template, if this instance was generated
	Template *string `protobuf:"bytes,14,opt,name=template" json:"template,omitempty"`
	// Arguments used during template processing, if this instance
	// was generated
	TemplateArgs map[string]string `protobuf:"bytes,15,rep,name=templateArgs" json:"templateArgs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Whether the template is stil available
	TemplateAvailable *bool `protobuf:"varint,16,opt,name=templateAvailable" json:"templateAvailable,omitempty"`
	// Whether the template has changed since this instance was
	// generated
	TemplateChanged *bool `protobuf:"varint,17,opt,name=templateChanged" json:"templateChanged,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *YamcsInstance) Reset() {
	*x = YamcsInstance{}
	mi := &file_yamcs_protobuf_instances_instances_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YamcsInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YamcsInstance) ProtoMessage() {}

func (x *YamcsInstance) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_instances_instances_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YamcsInstance.ProtoReflect.Descriptor instead.
func (*YamcsInstance) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_instances_instances_proto_rawDescGZIP(), []int{0}
}

func (x *YamcsInstance) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *YamcsInstance) GetMissionDatabase() *mdb.MissionDatabase {
	if x != nil {
		return x.MissionDatabase
	}
	return nil
}

func (x *YamcsInstance) GetProcessors() []*yamcsManagement.ProcessorInfo {
	if x != nil {
		return x.Processors
	}
	return nil
}

func (x *YamcsInstance) GetState() YamcsInstance_InstanceState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return YamcsInstance_OFFLINE
}

func (x *YamcsInstance) GetFailureCause() string {
	if x != nil && x.FailureCause != nil {
		return *x.FailureCause
	}
	return ""
}

func (x *YamcsInstance) GetMissionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MissionTime
	}
	return nil
}

func (x *YamcsInstance) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *YamcsInstance) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *YamcsInstance) GetTemplate() string {
	if x != nil && x.Template != nil {
		return *x.Template
	}
	return ""
}

func (x *YamcsInstance) GetTemplateArgs() map[string]string {
	if x != nil {
		return x.TemplateArgs
	}
	return nil
}

func (x *YamcsInstance) GetTemplateAvailable() bool {
	if x != nil && x.TemplateAvailable != nil {
		return *x.TemplateAvailable
	}
	return false
}

func (x *YamcsInstance) GetTemplateChanged() bool {
	if x != nil && x.TemplateChanged != nil {
		return *x.TemplateChanged
	}
	return false
}

type InstanceTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Template name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Human-friendly description
	Description *string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// List of variables that this template may expect
	Variables     []*TemplateVariable `protobuf:"bytes,2,rep,name=variables" json:"variables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstanceTemplate) Reset() {
	*x = InstanceTemplate{}
	mi := &file_yamcs_protobuf_instances_instances_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceTemplate) ProtoMessage() {}

func (x *InstanceTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_instances_instances_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceTemplate.ProtoReflect.Descriptor instead.
func (*InstanceTemplate) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_instances_instances_proto_rawDescGZIP(), []int{1}
}

func (x *InstanceTemplate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InstanceTemplate) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *InstanceTemplate) GetVariables() []*TemplateVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

type TemplateVariable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Variable name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Verbose name for use in UI forms
	Label *string `protobuf:"bytes,6,opt,name=label" json:"label,omitempty"`
	// Type of variable (Java class extending org.yamcs.templating.Variable)
	Type *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	// Verbose user guidance (HTML)
	Help *string `protobuf:"bytes,2,opt,name=help" json:"help,omitempty"`
	// Whether this variable is required input
	Required *bool `protobuf:"varint,3,opt,name=required" json:"required,omitempty"`
	// List of valid choices
	Choices []string `protobuf:"bytes,5,rep,name=choices" json:"choices,omitempty"`
	// Initial value for use in UI forms
	Initial       *string `protobuf:"bytes,7,opt,name=initial" json:"initial,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TemplateVariable) Reset() {
	*x = TemplateVariable{}
	mi := &file_yamcs_protobuf_instances_instances_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TemplateVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateVariable) ProtoMessage() {}

func (x *TemplateVariable) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_instances_instances_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateVariable.ProtoReflect.Descriptor instead.
func (*TemplateVariable) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_instances_instances_proto_rawDescGZIP(), []int{2}
}

func (x *TemplateVariable) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TemplateVariable) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *TemplateVariable) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *TemplateVariable) GetHelp() string {
	if x != nil && x.Help != nil {
		return *x.Help
	}
	return ""
}

func (x *TemplateVariable) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

func (x *TemplateVariable) GetChoices() []string {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *TemplateVariable) GetInitial() string {
	if x != nil && x.Initial != nil {
		return *x.Initial
	}
	return ""
}

var File_yamcs_protobuf_instances_instances_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_instances_instances_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x07, 0x0a, 0x0d, 0x59, 0x61,
	0x6d, 0x63, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x0f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x0f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x4b, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x59, 0x61, 0x6d, 0x63, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x59, 0x61, 0x6d, 0x63, 0x73, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x59, 0x61, 0x6d, 0x63, 0x73,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x74, 0x0a, 0x0d,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x06, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a,
	0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65,
	0x6c, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x6f,
	0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x42, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67,
	0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f,
	0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
})

var (
	file_yamcs_protobuf_instances_instances_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_instances_instances_proto_rawDescData []byte
)

func file_yamcs_protobuf_instances_instances_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_instances_instances_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_instances_instances_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_instances_instances_proto_rawDesc), len(file_yamcs_protobuf_instances_instances_proto_rawDesc)))
	})
	return file_yamcs_protobuf_instances_instances_proto_rawDescData
}

var file_yamcs_protobuf_instances_instances_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_yamcs_protobuf_instances_instances_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_yamcs_protobuf_instances_instances_proto_goTypes = []any{
	(YamcsInstance_InstanceState)(0),      // 0: yamcs.protobuf.instances.YamcsInstance.InstanceState
	(*YamcsInstance)(nil),                 // 1: yamcs.protobuf.instances.YamcsInstance
	(*InstanceTemplate)(nil),              // 2: yamcs.protobuf.instances.InstanceTemplate
	(*TemplateVariable)(nil),              // 3: yamcs.protobuf.instances.TemplateVariable
	nil,                                   // 4: yamcs.protobuf.instances.YamcsInstance.LabelsEntry
	nil,                                   // 5: yamcs.protobuf.instances.YamcsInstance.TemplateArgsEntry
	(*mdb.MissionDatabase)(nil),           // 6: yamcs.protobuf.mdb.MissionDatabase
	(*yamcsManagement.ProcessorInfo)(nil), // 7: yamcs.protobuf.yamcsManagement.ProcessorInfo
	(*timestamppb.Timestamp)(nil),         // 8: google.protobuf.Timestamp
}
var file_yamcs_protobuf_instances_instances_proto_depIdxs = []int32{
	6, // 0: yamcs.protobuf.instances.YamcsInstance.missionDatabase:type_name -> yamcs.protobuf.mdb.MissionDatabase
	7, // 1: yamcs.protobuf.instances.YamcsInstance.processors:type_name -> yamcs.protobuf.yamcsManagement.ProcessorInfo
	0, // 2: yamcs.protobuf.instances.YamcsInstance.state:type_name -> yamcs.protobuf.instances.YamcsInstance.InstanceState
	8, // 3: yamcs.protobuf.instances.YamcsInstance.missionTime:type_name -> google.protobuf.Timestamp
	4, // 4: yamcs.protobuf.instances.YamcsInstance.labels:type_name -> yamcs.protobuf.instances.YamcsInstance.LabelsEntry
	5, // 5: yamcs.protobuf.instances.YamcsInstance.templateArgs:type_name -> yamcs.protobuf.instances.YamcsInstance.TemplateArgsEntry
	3, // 6: yamcs.protobuf.instances.InstanceTemplate.variables:type_name -> yamcs.protobuf.instances.TemplateVariable
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_instances_instances_proto_init() }
func file_yamcs_protobuf_instances_instances_proto_init() {
	if File_yamcs_protobuf_instances_instances_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_instances_instances_proto_rawDesc), len(file_yamcs_protobuf_instances_instances_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yamcs_protobuf_instances_instances_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_instances_instances_proto_depIdxs,
		EnumInfos:         file_yamcs_protobuf_instances_instances_proto_enumTypes,
		MessageInfos:      file_yamcs_protobuf_instances_instances_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_instances_instances_proto = out.File
	file_yamcs_protobuf_instances_instances_proto_goTypes = nil
	file_yamcs_protobuf_instances_instances_proto_depIdxs = nil
}
