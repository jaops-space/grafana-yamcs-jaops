// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/events/events_service.proto

package events

import (
	api "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The zero-based row number at which to start outputting results.
	// Default: “0“
	//
	// This option is deprecated and will be removed in a later version.
	// Use the returned continuationToken instead.
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/events/events_service.proto.
	Pos *int64 `protobuf:"varint,2,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned records per page. Choose this value too high
	// and you risk hitting the maximum response size limit enforced by the server.
	// Default: “100“
	Limit *int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// The order of the returned results. Can be either “asc“ or “desc“.
	// Default: “desc“
	Order *string `protobuf:"bytes,4,opt,name=order" json:"order,omitempty"`
	// The minimum severity level of the events. One of “info“, “watch“, “warning“,
	// “distress“, “critical“ or “severe“. Default: “info“
	Severity *string `protobuf:"bytes,5,opt,name=severity" json:"severity,omitempty"`
	// The source of the events. Names must match exactly.
	Source []string `protobuf:"bytes,6,rep,name=source" json:"source,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,7,opt,name=next" json:"next,omitempty"`
	// Filter the lower bound of the event's generation time. Specify a date string in
	// ISO 8601 format. This bound is inclusive.
	Start *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the event's generation time. Specify a date string in
	// ISO 8601 format. This bound is exclusive.
	Stop *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=stop" json:"stop,omitempty"`
	// Text to search for in the message.
	Q *string `protobuf:"bytes,10,opt,name=q" json:"q,omitempty"`
	// Filter query. See :doc:`../filtering` for how to write a filter query.
	//
	// Literal text search matches against the fields “message“, “source“ and
	// “type“.
	//
	// Field comparisons can use any of the following fields:
	//
	// .. list-table::
	//
	//	:widths: 25 25 50
	//
	//	* - ``message``
	//	  - string
	//	  -
	//	* - ``seqNumber``
	//	  - number
	//	  -
	//	* - ``severity``
	//	  - enum
	//	  - One of ``info``, ``watch``, ``warning``, ``distress``, ``critical`` or ``severe``.
	//	* - ``source``
	//	  - string
	//	  -
	//	* - ``type``
	//	  - string
	//	  -
	Filter        *string `protobuf:"bytes,11,opt,name=filter" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_events_events_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListEventsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

// Deprecated: Marked as deprecated in yamcs/protobuf/events/events_service.proto.
func (x *ListEventsRequest) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ListEventsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListEventsRequest) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

func (x *ListEventsRequest) GetSeverity() string {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return ""
}

func (x *ListEventsRequest) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ListEventsRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListEventsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListEventsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ListEventsRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *ListEventsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

type ListEventsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated, use “events“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/events/events_service.proto.
	Event []*Event `protobuf:"bytes,1,rep,name=event" json:"event,omitempty"`
	// Page with matching events
	Events []*Event `protobuf:"bytes,3,rep,name=events" json:"events,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListEventsResponse) Reset() {
	*x = ListEventsResponse{}
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsResponse) ProtoMessage() {}

func (x *ListEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsResponse.ProtoReflect.Descriptor instead.
func (*ListEventsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_events_events_service_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in yamcs/protobuf/events/events_service.proto.
func (x *ListEventsResponse) GetEvent() []*Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ListEventsResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ListEventsResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

type SubscribeEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Filter query. See :doc:`../filtering` for how to write a filter query.
	//
	// Literal text search matches against the fields “message“, “source“ and
	// “type“.
	//
	// Field comparisons can use any of the following fields:
	//
	// .. list-table::
	//
	//	:widths: 25 25 50
	//
	//	* - ``message``
	//	  - string
	//	  -
	//	* - ``seqNumber``
	//	  - number
	//	  -
	//	* - ``severity``
	//	  - enum
	//	  - One of ``info``, ``watch``, ``warning``, ``distress``, ``critical`` or ``severe``.
	//	* - ``source``
	//	  - string
	//	  -
	//	* - ``type``
	//	  - string
	//	  -
	Filter        *string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeEventsRequest) Reset() {
	*x = SubscribeEventsRequest{}
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEventsRequest) ProtoMessage() {}

func (x *SubscribeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeEventsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_events_events_service_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeEventsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeEventsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

type CreateEventRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Description of the type of the event. Useful for quick classification or filtering.
	Type *string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	// **Required.** Event message.
	Message *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// The severity level of the event. One of “info“, “watch“, “warning“,
	// “distress“, “critical“ or “severe“. Default is “info“
	Severity *string `protobuf:"bytes,4,opt,name=severity" json:"severity,omitempty"`
	// Time associated with the event.
	// If unspecified, this will default to the current mission time.
	Time *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=time" json:"time,omitempty"`
	// Source of the event. Useful for grouping events in the archive. Default is
	// “User“.
	Source *string `protobuf:"bytes,6,opt,name=source" json:"source,omitempty"`
	// Sequence number of this event. This is primarily used to determine unicity of
	// events coming from the same source. If not set Yamcs will automatically
	// assign a sequential number as if every submitted event is unique.
	SequenceNumber *int32 `protobuf:"varint,7,opt,name=sequenceNumber" json:"sequenceNumber,omitempty"`
	// Additional properties
	Extra         map[string]string `protobuf:"bytes,8,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEventRequest) Reset() {
	*x = CreateEventRequest{}
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventRequest) ProtoMessage() {}

func (x *CreateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventRequest.ProtoReflect.Descriptor instead.
func (*CreateEventRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_events_events_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateEventRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *CreateEventRequest) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *CreateEventRequest) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateEventRequest) GetSeverity() string {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return ""
}

func (x *CreateEventRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CreateEventRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *CreateEventRequest) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *CreateEventRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type StreamEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Filter the lower bound of the event's generation time. Specify a date
	// string in ISO 8601 format.
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the event's generation time. Specify a date
	// string in ISO 8601 format.
	Stop *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	// Event sources to include. Leave unset, to include all.
	Source []string `protobuf:"bytes,4,rep,name=source" json:"source,omitempty"`
	// Filter on minimum severity level
	Severity *string `protobuf:"bytes,5,opt,name=severity" json:"severity,omitempty"`
	// Search by text
	Q *string `protobuf:"bytes,6,opt,name=q" json:"q,omitempty"`
	// Filter query. See :doc:`../filtering` for how to write a filter query.
	//
	// Literal text search matches against the fields “message“, “source“ and
	// “type“.
	//
	// Field comparisons can use any of the following fields:
	//
	// .. list-table::
	//
	//	:widths: 25 25 50
	//
	//	* - ``message``
	//	  - string
	//	  -
	//	* - ``seqNumber``
	//	  - number
	//	  -
	//	* - ``severity``
	//	  - enum
	//	  - One of ``info``, ``watch``, ``warning``, ``distress``, ``critical`` or ``severe``.
	//	* - ``source``
	//	  - string
	//	  -
	//	* - ``type``
	//	  - string
	//	  -
	Filter        *string `protobuf:"bytes,7,opt,name=filter" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamEventsRequest) Reset() {
	*x = StreamEventsRequest{}
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEventsRequest) ProtoMessage() {}

func (x *StreamEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEventsRequest.ProtoReflect.Descriptor instead.
func (*StreamEventsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_events_events_service_proto_rawDescGZIP(), []int{4}
}

func (x *StreamEventsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *StreamEventsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StreamEventsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *StreamEventsRequest) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *StreamEventsRequest) GetSeverity() string {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return ""
}

func (x *StreamEventsRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *StreamEventsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

type ListEventSourcesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance      *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEventSourcesRequest) Reset() {
	*x = ListEventSourcesRequest{}
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventSourcesRequest) ProtoMessage() {}

func (x *ListEventSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventSourcesRequest.ProtoReflect.Descriptor instead.
func (*ListEventSourcesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_events_events_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListEventSourcesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type ListEventSourcesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated, use “sources“ instead
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/events/events_service.proto.
	Source []string `protobuf:"bytes,1,rep,name=source" json:"source,omitempty"`
	// Known event sources
	Sources       []string `protobuf:"bytes,2,rep,name=sources" json:"sources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEventSourcesResponse) Reset() {
	*x = ListEventSourcesResponse{}
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEventSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventSourcesResponse) ProtoMessage() {}

func (x *ListEventSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventSourcesResponse.ProtoReflect.Descriptor instead.
func (*ListEventSourcesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_events_events_service_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Marked as deprecated in yamcs/protobuf/events/events_service.proto.
func (x *ListEventSourcesResponse) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ListEventSourcesResponse) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

type ExportEventsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Filter the lower bound of the event's generation time.
	// Specify a date string in ISO 8601 format. This bound is inclusive.
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the event's generation time. Specify a date
	// string in ISO 8601 format. This bound is exclusive.
	Stop *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	// The source of the events. Names must match exactly.
	Source []string `protobuf:"bytes,4,rep,name=source" json:"source,omitempty"`
	// The minimum severity level of the events. One of “info“, “watch“,
	// “warning“, “distress“ or “severe“. Default: “info“
	Severity *string `protobuf:"bytes,5,opt,name=severity" json:"severity,omitempty"`
	// Text to search for in the message.
	Q *string `protobuf:"bytes,6,opt,name=q" json:"q,omitempty"`
	// Filter query. See :doc:`../filtering` for how to write a filter query.
	//
	// Literal text search matches against the fields “message“, “source“ and
	// “type“.
	//
	// Field comparisons can use any of the following fields:
	//
	// .. list-table::
	//
	//	:widths: 25 25 50
	//
	//	* - ``message``
	//	  - string
	//	  -
	//	* - ``seqNumber``
	//	  - number
	//	  -
	//	* - ``severity``
	//	  - enum
	//	  - One of ``info``, ``watch``, ``warning``, ``distress``, ``critical`` or ``severe``.
	//	* - ``source``
	//	  - string
	//	  -
	//	* - ``type``
	//	  - string
	//	  -
	Filter *string `protobuf:"bytes,8,opt,name=filter" json:"filter,omitempty"`
	// Column delimiter. One of “TAB“, “COMMA“ or “SEMICOLON“.
	// Default: “TAB“.
	Delimiter     *string `protobuf:"bytes,7,opt,name=delimiter" json:"delimiter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportEventsRequest) Reset() {
	*x = ExportEventsRequest{}
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportEventsRequest) ProtoMessage() {}

func (x *ExportEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_events_events_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportEventsRequest.ProtoReflect.Descriptor instead.
func (*ExportEventsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_events_events_service_proto_rawDescGZIP(), []int{7}
}

func (x *ExportEventsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ExportEventsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ExportEventsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ExportEventsRequest) GetSource() []string {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ExportEventsRequest) GetSeverity() string {
	if x != nil && x.Severity != nil {
		return *x.Severity
	}
	return ""
}

func (x *ExportEventsRequest) GetQ() string {
	if x != nil && x.Q != nil {
		return *x.Q
	}
	return ""
}

func (x *ExportEventsRequest) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *ExportEventsRequest) GetDelimiter() string {
	if x != nil && x.Delimiter != nil {
		return *x.Delimiter
	}
	return ""
}

var File_yamcs_protobuf_events_events_service_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_events_events_service_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc1, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x0c, 0x0a,
	0x01, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4c, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0xf0, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a,
	0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xed, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x50,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x22, 0x8b, 0x02, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x32, 0xe8,
	0x06, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x41, 0x70, 0x69, 0x12, 0xb1, 0x01, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4e, 0x8a, 0x92, 0x03, 0x4a, 0x5a, 0x28, 0x3a, 0x01, 0x2a, 0x1a, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x6c, 0x69, 0x73, 0x74,
	0x0a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x7f, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x27, 0x8a, 0x92, 0x03, 0x23, 0x3a, 0x01,
	0x2a, 0x1a, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x8a, 0x92, 0x03, 0x28, 0x0a, 0x26, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x34, 0x8a, 0x92, 0x03, 0x30, 0x3a, 0x01, 0x2a, 0x1a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x12, 0x7d, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x2a, 0x8a, 0x92, 0x03, 0x26, 0x0a,
	0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x0c, 0xda, 0x92, 0x03, 0x08, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x01, 0x30, 0x01, 0x42, 0x70, 0x0a, 0x12, 0x6f, 0x72, 0x67,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42,
	0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72,
	0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
})

var (
	file_yamcs_protobuf_events_events_service_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_events_events_service_proto_rawDescData []byte
)

func file_yamcs_protobuf_events_events_service_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_events_events_service_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_events_events_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_events_events_service_proto_rawDesc), len(file_yamcs_protobuf_events_events_service_proto_rawDesc)))
	})
	return file_yamcs_protobuf_events_events_service_proto_rawDescData
}

var file_yamcs_protobuf_events_events_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_yamcs_protobuf_events_events_service_proto_goTypes = []any{
	(*ListEventsRequest)(nil),        // 0: yamcs.protobuf.events.ListEventsRequest
	(*ListEventsResponse)(nil),       // 1: yamcs.protobuf.events.ListEventsResponse
	(*SubscribeEventsRequest)(nil),   // 2: yamcs.protobuf.events.SubscribeEventsRequest
	(*CreateEventRequest)(nil),       // 3: yamcs.protobuf.events.CreateEventRequest
	(*StreamEventsRequest)(nil),      // 4: yamcs.protobuf.events.StreamEventsRequest
	(*ListEventSourcesRequest)(nil),  // 5: yamcs.protobuf.events.ListEventSourcesRequest
	(*ListEventSourcesResponse)(nil), // 6: yamcs.protobuf.events.ListEventSourcesResponse
	(*ExportEventsRequest)(nil),      // 7: yamcs.protobuf.events.ExportEventsRequest
	nil,                              // 8: yamcs.protobuf.events.CreateEventRequest.ExtraEntry
	(*timestamppb.Timestamp)(nil),    // 9: google.protobuf.Timestamp
	(*Event)(nil),                    // 10: yamcs.protobuf.events.Event
	(*api.HttpBody)(nil),             // 11: yamcs.api.HttpBody
}
var file_yamcs_protobuf_events_events_service_proto_depIdxs = []int32{
	9,  // 0: yamcs.protobuf.events.ListEventsRequest.start:type_name -> google.protobuf.Timestamp
	9,  // 1: yamcs.protobuf.events.ListEventsRequest.stop:type_name -> google.protobuf.Timestamp
	10, // 2: yamcs.protobuf.events.ListEventsResponse.event:type_name -> yamcs.protobuf.events.Event
	10, // 3: yamcs.protobuf.events.ListEventsResponse.events:type_name -> yamcs.protobuf.events.Event
	9,  // 4: yamcs.protobuf.events.CreateEventRequest.time:type_name -> google.protobuf.Timestamp
	8,  // 5: yamcs.protobuf.events.CreateEventRequest.extra:type_name -> yamcs.protobuf.events.CreateEventRequest.ExtraEntry
	9,  // 6: yamcs.protobuf.events.StreamEventsRequest.start:type_name -> google.protobuf.Timestamp
	9,  // 7: yamcs.protobuf.events.StreamEventsRequest.stop:type_name -> google.protobuf.Timestamp
	9,  // 8: yamcs.protobuf.events.ExportEventsRequest.start:type_name -> google.protobuf.Timestamp
	9,  // 9: yamcs.protobuf.events.ExportEventsRequest.stop:type_name -> google.protobuf.Timestamp
	0,  // 10: yamcs.protobuf.events.EventsApi.ListEvents:input_type -> yamcs.protobuf.events.ListEventsRequest
	3,  // 11: yamcs.protobuf.events.EventsApi.CreateEvent:input_type -> yamcs.protobuf.events.CreateEventRequest
	5,  // 12: yamcs.protobuf.events.EventsApi.ListEventSources:input_type -> yamcs.protobuf.events.ListEventSourcesRequest
	4,  // 13: yamcs.protobuf.events.EventsApi.StreamEvents:input_type -> yamcs.protobuf.events.StreamEventsRequest
	7,  // 14: yamcs.protobuf.events.EventsApi.ExportEvents:input_type -> yamcs.protobuf.events.ExportEventsRequest
	2,  // 15: yamcs.protobuf.events.EventsApi.SubscribeEvents:input_type -> yamcs.protobuf.events.SubscribeEventsRequest
	1,  // 16: yamcs.protobuf.events.EventsApi.ListEvents:output_type -> yamcs.protobuf.events.ListEventsResponse
	10, // 17: yamcs.protobuf.events.EventsApi.CreateEvent:output_type -> yamcs.protobuf.events.Event
	6,  // 18: yamcs.protobuf.events.EventsApi.ListEventSources:output_type -> yamcs.protobuf.events.ListEventSourcesResponse
	10, // 19: yamcs.protobuf.events.EventsApi.StreamEvents:output_type -> yamcs.protobuf.events.Event
	11, // 20: yamcs.protobuf.events.EventsApi.ExportEvents:output_type -> yamcs.api.HttpBody
	10, // 21: yamcs.protobuf.events.EventsApi.SubscribeEvents:output_type -> yamcs.protobuf.events.Event
	16, // [16:22] is the sub-list for method output_type
	10, // [10:16] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_events_events_service_proto_init() }
func file_yamcs_protobuf_events_events_service_proto_init() {
	if File_yamcs_protobuf_events_events_service_proto != nil {
		return
	}
	file_yamcs_protobuf_events_events_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_events_events_service_proto_rawDesc), len(file_yamcs_protobuf_events_events_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_events_events_service_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_events_events_service_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_events_events_service_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_events_events_service_proto = out.File
	file_yamcs_protobuf_events_events_service_proto_goTypes = nil
	file_yamcs_protobuf_events_events_service_proto_depIdxs = nil
}
