// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/commanding/commanding.proto

package commanding

import (
	protobuf "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf"
	mdb "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf/mdb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueueState int32

const (
	QueueState_BLOCKED  QueueState = 1
	QueueState_DISABLED QueueState = 2
	QueueState_ENABLED  QueueState = 3
)

// Enum value maps for QueueState.
var (
	QueueState_name = map[int32]string{
		1: "BLOCKED",
		2: "DISABLED",
		3: "ENABLED",
	}
	QueueState_value = map[string]int32{
		"BLOCKED":  1,
		"DISABLED": 2,
		"ENABLED":  3,
	}
)

func (x QueueState) Enum() *QueueState {
	p := new(QueueState)
	*p = x
	return p
}

func (x QueueState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueueState) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_commanding_commanding_proto_enumTypes[0].Descriptor()
}

func (QueueState) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_commanding_commanding_proto_enumTypes[0]
}

func (x QueueState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QueueState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QueueState(num)
	return nil
}

// Deprecated: Use QueueState.Descriptor instead.
func (QueueState) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{0}
}

type CommandQueueEvent_Type int32

const (
	CommandQueueEvent_COMMAND_ADDED    CommandQueueEvent_Type = 1
	CommandQueueEvent_COMMAND_REJECTED CommandQueueEvent_Type = 2
	CommandQueueEvent_COMMAND_SENT     CommandQueueEvent_Type = 3
	CommandQueueEvent_COMMAND_UPDATED  CommandQueueEvent_Type = 4
)

// Enum value maps for CommandQueueEvent_Type.
var (
	CommandQueueEvent_Type_name = map[int32]string{
		1: "COMMAND_ADDED",
		2: "COMMAND_REJECTED",
		3: "COMMAND_SENT",
		4: "COMMAND_UPDATED",
	}
	CommandQueueEvent_Type_value = map[string]int32{
		"COMMAND_ADDED":    1,
		"COMMAND_REJECTED": 2,
		"COMMAND_SENT":     3,
		"COMMAND_UPDATED":  4,
	}
)

func (x CommandQueueEvent_Type) Enum() *CommandQueueEvent_Type {
	p := new(CommandQueueEvent_Type)
	*p = x
	return p
}

func (x CommandQueueEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandQueueEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_commanding_commanding_proto_enumTypes[1].Descriptor()
}

func (CommandQueueEvent_Type) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_commanding_commanding_proto_enumTypes[1]
}

func (x CommandQueueEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CommandQueueEvent_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CommandQueueEvent_Type(num)
	return nil
}

// Deprecated: Use CommandQueueEvent_Type.Descriptor instead.
func (CommandQueueEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{3, 0}
}

type CommandId struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	GenerationTime *int64                 `protobuf:"varint,1,req,name=generationTime" json:"generationTime,omitempty"`
	Origin         *string                `protobuf:"bytes,2,req,name=origin" json:"origin,omitempty"`
	SequenceNumber *int32                 `protobuf:"varint,3,req,name=sequenceNumber" json:"sequenceNumber,omitempty"` //unique in relation to generationTime and origin
	CommandName    *string                `protobuf:"bytes,4,opt,name=commandName" json:"commandName,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CommandId) Reset() {
	*x = CommandId{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandId) ProtoMessage() {}

func (x *CommandId) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandId.ProtoReflect.Descriptor instead.
func (*CommandId) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{0}
}

func (x *CommandId) GetGenerationTime() int64 {
	if x != nil && x.GenerationTime != nil {
		return *x.GenerationTime
	}
	return 0
}

func (x *CommandId) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *CommandId) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *CommandId) GetCommandName() string {
	if x != nil && x.CommandName != nil {
		return *x.CommandName
	}
	return ""
}

type CommandQueueInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name
	ProcessorName *string `protobuf:"bytes,2,opt,name=processorName" json:"processorName,omitempty"`
	// Command queue name
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Current queue state
	State *QueueState `protobuf:"varint,4,opt,name=state,enum=yamcs.protobuf.commanding.QueueState" json:"state,omitempty"`
	// Submitted commands are matches to the first queue that
	// whose filter criteria (if any) match the command's
	// features. Queues are considered in the order specified by
	// this field, going from lowest to highest.
	Order *int32 `protobuf:"varint,9,opt,name=order" json:"order,omitempty"`
	// This queue only considers commands that are issued
	// by one of the users in this list.
	//
	// If the list is empty, all commands are considered.
	//
	// Note that users/groups are considered at the same time
	// (a match with any of the two is sufficient).
	Users []string `protobuf:"bytes,10,rep,name=users" json:"users,omitempty"`
	// This queue only considers commands that are issued
	// by one of the users who belongs to any of these groups.
	//
	// If the list is empty, all commands are considered.
	//
	// Note that users/groups are considered at the same time
	// (a match with any of the two is sufficient).
	Groups []string `protobuf:"bytes,11,rep,name=groups" json:"groups,omitempty"`
	// This queue only considers commands that are at least
	// as significant as this level.
	MinLevel *mdb.SignificanceInfo_SignificanceLevelType `protobuf:"varint,12,opt,name=minLevel,enum=yamcs.protobuf.mdb.SignificanceInfo_SignificanceLevelType" json:"minLevel,omitempty"`
	// This queue only considers commands whose qualified name
	// matches any of the regular expressions in this list.
	//
	// If the list is empty, all commands are considered.
	TcPatterns []string `protobuf:"bytes,13,rep,name=tcPatterns" json:"tcPatterns,omitempty"`
	// Currently pending (queued) commands
	Entries []*CommandQueueEntry `protobuf:"bytes,14,rep,name=entries" json:"entries,omitempty"`
	// Number of commands that successfully passed through this queue.
	AcceptedCommandsCount *int32 `protobuf:"varint,15,opt,name=acceptedCommandsCount" json:"acceptedCommandsCount,omitempty"`
	// Number of commands that were rejected by this queue.
	RejectedCommandsCount *int32 `protobuf:"varint,16,opt,name=rejectedCommandsCount" json:"rejectedCommandsCount,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CommandQueueInfo) Reset() {
	*x = CommandQueueInfo{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandQueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandQueueInfo) ProtoMessage() {}

func (x *CommandQueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandQueueInfo.ProtoReflect.Descriptor instead.
func (*CommandQueueInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{1}
}

func (x *CommandQueueInfo) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *CommandQueueInfo) GetProcessorName() string {
	if x != nil && x.ProcessorName != nil {
		return *x.ProcessorName
	}
	return ""
}

func (x *CommandQueueInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CommandQueueInfo) GetState() QueueState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return QueueState_BLOCKED
}

func (x *CommandQueueInfo) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *CommandQueueInfo) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *CommandQueueInfo) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *CommandQueueInfo) GetMinLevel() mdb.SignificanceInfo_SignificanceLevelType {
	if x != nil && x.MinLevel != nil {
		return *x.MinLevel
	}
	return mdb.SignificanceInfo_SignificanceLevelType(1)
}

func (x *CommandQueueInfo) GetTcPatterns() []string {
	if x != nil {
		return x.TcPatterns
	}
	return nil
}

func (x *CommandQueueInfo) GetEntries() []*CommandQueueEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *CommandQueueInfo) GetAcceptedCommandsCount() int32 {
	if x != nil && x.AcceptedCommandsCount != nil {
		return *x.AcceptedCommandsCount
	}
	return 0
}

func (x *CommandQueueInfo) GetRejectedCommandsCount() int32 {
	if x != nil && x.RejectedCommandsCount != nil {
		return *x.RejectedCommandsCount
	}
	return 0
}

// One entry (command) in the command queue
type CommandQueueEntry struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Instance       *string                `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	ProcessorName  *string                `protobuf:"bytes,2,opt,name=processorName" json:"processorName,omitempty"`
	QueueName      *string                `protobuf:"bytes,3,opt,name=queueName" json:"queueName,omitempty"`
	Id             *string                `protobuf:"bytes,14,opt,name=id" json:"id,omitempty"`
	Origin         *string                `protobuf:"bytes,15,opt,name=origin" json:"origin,omitempty"`
	SequenceNumber *int32                 `protobuf:"varint,16,opt,name=sequenceNumber" json:"sequenceNumber,omitempty"`
	CommandName    *string                `protobuf:"bytes,17,opt,name=commandName" json:"commandName,omitempty"`
	Assignments    []*CommandAssignment   `protobuf:"bytes,18,rep,name=assignments" json:"assignments,omitempty"`
	Binary         []byte                 `protobuf:"bytes,6,opt,name=binary" json:"binary,omitempty"`
	Username       *string                `protobuf:"bytes,7,opt,name=username" json:"username,omitempty"`
	Comment        *string                `protobuf:"bytes,11,opt,name=comment" json:"comment,omitempty"`
	GenerationTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=generationTime" json:"generationTime,omitempty"`
	// If true, the command has been accepted and is due for release
	// as soon as transmission constraints are satisfied.
	PendingTransmissionConstraints *bool `protobuf:"varint,13,opt,name=pendingTransmissionConstraints" json:"pendingTransmissionConstraints,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *CommandQueueEntry) Reset() {
	*x = CommandQueueEntry{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandQueueEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandQueueEntry) ProtoMessage() {}

func (x *CommandQueueEntry) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandQueueEntry.ProtoReflect.Descriptor instead.
func (*CommandQueueEntry) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{2}
}

func (x *CommandQueueEntry) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *CommandQueueEntry) GetProcessorName() string {
	if x != nil && x.ProcessorName != nil {
		return *x.ProcessorName
	}
	return ""
}

func (x *CommandQueueEntry) GetQueueName() string {
	if x != nil && x.QueueName != nil {
		return *x.QueueName
	}
	return ""
}

func (x *CommandQueueEntry) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CommandQueueEntry) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *CommandQueueEntry) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *CommandQueueEntry) GetCommandName() string {
	if x != nil && x.CommandName != nil {
		return *x.CommandName
	}
	return ""
}

func (x *CommandQueueEntry) GetAssignments() []*CommandAssignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *CommandQueueEntry) GetBinary() []byte {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *CommandQueueEntry) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *CommandQueueEntry) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *CommandQueueEntry) GetGenerationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GenerationTime
	}
	return nil
}

func (x *CommandQueueEntry) GetPendingTransmissionConstraints() bool {
	if x != nil && x.PendingTransmissionConstraints != nil {
		return *x.PendingTransmissionConstraints
	}
	return false
}

type CommandQueueEvent struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Type          *CommandQueueEvent_Type `protobuf:"varint,1,opt,name=type,enum=yamcs.protobuf.commanding.CommandQueueEvent_Type" json:"type,omitempty"`
	Data          *CommandQueueEntry      `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandQueueEvent) Reset() {
	*x = CommandQueueEvent{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandQueueEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandQueueEvent) ProtoMessage() {}

func (x *CommandQueueEvent) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandQueueEvent.ProtoReflect.Descriptor instead.
func (*CommandQueueEvent) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{3}
}

func (x *CommandQueueEvent) GetType() CommandQueueEvent_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CommandQueueEvent_COMMAND_ADDED
}

func (x *CommandQueueEvent) GetData() *CommandQueueEntry {
	if x != nil {
		return x.Data
	}
	return nil
}

type CommandQueueRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueInfo     *CommandQueueInfo      `protobuf:"bytes,1,opt,name=queueInfo" json:"queueInfo,omitempty"`    // for SetQueueState
	QueueEntry    *CommandQueueEntry     `protobuf:"bytes,2,opt,name=queueEntry" json:"queueEntry,omitempty"`  //for SendCommand and RejectCommand
	Rebuild       *bool                  `protobuf:"varint,3,opt,name=rebuild,def=0" json:"rebuild,omitempty"` //if rebuild is true, the binary packet will be recreated to include new time and sequence count
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for CommandQueueRequest fields.
const (
	Default_CommandQueueRequest_Rebuild = bool(false)
)

func (x *CommandQueueRequest) Reset() {
	*x = CommandQueueRequest{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandQueueRequest) ProtoMessage() {}

func (x *CommandQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandQueueRequest.ProtoReflect.Descriptor instead.
func (*CommandQueueRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{4}
}

func (x *CommandQueueRequest) GetQueueInfo() *CommandQueueInfo {
	if x != nil {
		return x.QueueInfo
	}
	return nil
}

func (x *CommandQueueRequest) GetQueueEntry() *CommandQueueEntry {
	if x != nil {
		return x.QueueEntry
	}
	return nil
}

func (x *CommandQueueRequest) GetRebuild() bool {
	if x != nil && x.Rebuild != nil {
		return *x.Rebuild
	}
	return Default_CommandQueueRequest_Rebuild
}

// this message is sent as response to validate, in case the significance is defined for a commands
type CommandSignificance struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SequenceNumber *int32                 `protobuf:"varint,1,opt,name=sequenceNumber" json:"sequenceNumber,omitempty"` //the sequence number of the command sent
	Significance   *mdb.SignificanceInfo  `protobuf:"bytes,2,opt,name=significance" json:"significance,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CommandSignificance) Reset() {
	*x = CommandSignificance{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandSignificance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandSignificance) ProtoMessage() {}

func (x *CommandSignificance) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandSignificance.ProtoReflect.Descriptor instead.
func (*CommandSignificance) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{5}
}

func (x *CommandSignificance) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *CommandSignificance) GetSignificance() *mdb.SignificanceInfo {
	if x != nil {
		return x.Significance
	}
	return nil
}

// can be used when sending commands to affect the way post transmission verifiers are running
type VerifierConfig struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Disable       *bool                       `protobuf:"varint,2,opt,name=disable" json:"disable,omitempty"` //disable the verifier
	CheckWindow   *VerifierConfig_CheckWindow `protobuf:"bytes,3,opt,name=checkWindow" json:"checkWindow,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifierConfig) Reset() {
	*x = VerifierConfig{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifierConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifierConfig) ProtoMessage() {}

func (x *VerifierConfig) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifierConfig.ProtoReflect.Descriptor instead.
func (*VerifierConfig) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{6}
}

func (x *VerifierConfig) GetDisable() bool {
	if x != nil && x.Disable != nil {
		return *x.Disable
	}
	return false
}

func (x *VerifierConfig) GetCheckWindow() *VerifierConfig_CheckWindow {
	if x != nil {
		return x.CheckWindow
	}
	return nil
}

type CommandHistoryAttribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value         *protobuf.Value        `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Time          *int64                 `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandHistoryAttribute) Reset() {
	*x = CommandHistoryAttribute{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandHistoryAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandHistoryAttribute) ProtoMessage() {}

func (x *CommandHistoryAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandHistoryAttribute.ProtoReflect.Descriptor instead.
func (*CommandHistoryAttribute) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{7}
}

func (x *CommandHistoryAttribute) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CommandHistoryAttribute) GetValue() *protobuf.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CommandHistoryAttribute) GetTime() int64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

type CommandAssignment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value         *protobuf.Value        `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	UserInput     *bool                  `protobuf:"varint,3,opt,name=userInput" json:"userInput,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandAssignment) Reset() {
	*x = CommandAssignment{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandAssignment) ProtoMessage() {}

func (x *CommandAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandAssignment.ProtoReflect.Descriptor instead.
func (*CommandAssignment) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{8}
}

func (x *CommandAssignment) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CommandAssignment) GetValue() *protobuf.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CommandAssignment) GetUserInput() bool {
	if x != nil && x.UserInput != nil {
		return *x.UserInput
	}
	return false
}

type CommandHistoryEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    *string                `protobuf:"bytes,7,opt,name=id" json:"id,omitempty"`
	// Qualified name
	CommandName *string `protobuf:"bytes,8,opt,name=commandName" json:"commandName,omitempty"`
	// Name aliases keyed by namespace.
	// (as currently present in Mission Database)
	Aliases        map[string]string          `protobuf:"bytes,12,rep,name=aliases" json:"aliases,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Origin         *string                    `protobuf:"bytes,9,opt,name=origin" json:"origin,omitempty"`
	SequenceNumber *int32                     `protobuf:"varint,10,opt,name=sequenceNumber" json:"sequenceNumber,omitempty"`
	CommandId      *CommandId                 `protobuf:"bytes,1,opt,name=commandId" json:"commandId,omitempty"`
	Attr           []*CommandHistoryAttribute `protobuf:"bytes,3,rep,name=attr" json:"attr,omitempty"`
	GenerationTime *timestamppb.Timestamp     `protobuf:"bytes,6,opt,name=generationTime" json:"generationTime,omitempty"`
	Assignments    []*CommandAssignment       `protobuf:"bytes,11,rep,name=assignments" json:"assignments,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CommandHistoryEntry) Reset() {
	*x = CommandHistoryEntry{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandHistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandHistoryEntry) ProtoMessage() {}

func (x *CommandHistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandHistoryEntry.ProtoReflect.Descriptor instead.
func (*CommandHistoryEntry) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{9}
}

func (x *CommandHistoryEntry) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *CommandHistoryEntry) GetCommandName() string {
	if x != nil && x.CommandName != nil {
		return *x.CommandName
	}
	return ""
}

func (x *CommandHistoryEntry) GetAliases() map[string]string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *CommandHistoryEntry) GetOrigin() string {
	if x != nil && x.Origin != nil {
		return *x.Origin
	}
	return ""
}

func (x *CommandHistoryEntry) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *CommandHistoryEntry) GetCommandId() *CommandId {
	if x != nil {
		return x.CommandId
	}
	return nil
}

func (x *CommandHistoryEntry) GetAttr() []*CommandHistoryAttribute {
	if x != nil {
		return x.Attr
	}
	return nil
}

func (x *CommandHistoryEntry) GetGenerationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GenerationTime
	}
	return nil
}

func (x *CommandHistoryEntry) GetAssignments() []*CommandAssignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

type VerifierConfig_CheckWindow struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TimeToStartChecking *int64                 `protobuf:"varint,1,opt,name=timeToStartChecking" json:"timeToStartChecking,omitempty"`
	TimeToStopChecking  *int64                 `protobuf:"varint,2,opt,name=timeToStopChecking" json:"timeToStopChecking,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VerifierConfig_CheckWindow) Reset() {
	*x = VerifierConfig_CheckWindow{}
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifierConfig_CheckWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifierConfig_CheckWindow) ProtoMessage() {}

func (x *VerifierConfig_CheckWindow) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_commanding_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifierConfig_CheckWindow.ProtoReflect.Descriptor instead.
func (*VerifierConfig_CheckWindow) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP(), []int{6, 0}
}

func (x *VerifierConfig_CheckWindow) GetTimeToStartChecking() int64 {
	if x != nil && x.TimeToStartChecking != nil {
		return *x.TimeToStartChecking
	}
	return 0
}

func (x *VerifierConfig_CheckWindow) GetTimeToStopChecking() int64 {
	if x != nil && x.TimeToStopChecking != nil {
		return *x.TimeToStopChecking
	}
	return 0
}

var File_yamcs_protobuf_commanding_commanding_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_commanding_commanding_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x1a, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x04, 0x0a, 0x10, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x56, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x63, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x63, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x46,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x8f, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x1e,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x53, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x22, 0xcf, 0x01, 0x0a, 0x13,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4c,
	0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x07,
	0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x48, 0x0a,
	0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xf4, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x6f, 0x0a,
	0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x13,
	0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2e,
	0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65,
	0x54, 0x6f, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x6e,
	0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x72,
	0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0xba, 0x04, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x07,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x04, 0x61, 0x74, 0x74, 0x72, 0x12,
	0x42, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x34, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x5e, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5a, 0x48, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67,
})

var (
	file_yamcs_protobuf_commanding_commanding_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_commanding_commanding_proto_rawDescData []byte
)

func file_yamcs_protobuf_commanding_commanding_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_commanding_commanding_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_commanding_commanding_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_commanding_commanding_proto_rawDesc), len(file_yamcs_protobuf_commanding_commanding_proto_rawDesc)))
	})
	return file_yamcs_protobuf_commanding_commanding_proto_rawDescData
}

var file_yamcs_protobuf_commanding_commanding_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yamcs_protobuf_commanding_commanding_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_yamcs_protobuf_commanding_commanding_proto_goTypes = []any{
	(QueueState)(0),                                 // 0: yamcs.protobuf.commanding.QueueState
	(CommandQueueEvent_Type)(0),                     // 1: yamcs.protobuf.commanding.CommandQueueEvent.Type
	(*CommandId)(nil),                               // 2: yamcs.protobuf.commanding.CommandId
	(*CommandQueueInfo)(nil),                        // 3: yamcs.protobuf.commanding.CommandQueueInfo
	(*CommandQueueEntry)(nil),                       // 4: yamcs.protobuf.commanding.CommandQueueEntry
	(*CommandQueueEvent)(nil),                       // 5: yamcs.protobuf.commanding.CommandQueueEvent
	(*CommandQueueRequest)(nil),                     // 6: yamcs.protobuf.commanding.CommandQueueRequest
	(*CommandSignificance)(nil),                     // 7: yamcs.protobuf.commanding.CommandSignificance
	(*VerifierConfig)(nil),                          // 8: yamcs.protobuf.commanding.VerifierConfig
	(*CommandHistoryAttribute)(nil),                 // 9: yamcs.protobuf.commanding.CommandHistoryAttribute
	(*CommandAssignment)(nil),                       // 10: yamcs.protobuf.commanding.CommandAssignment
	(*CommandHistoryEntry)(nil),                     // 11: yamcs.protobuf.commanding.CommandHistoryEntry
	(*VerifierConfig_CheckWindow)(nil),              // 12: yamcs.protobuf.commanding.VerifierConfig.CheckWindow
	nil,                                             // 13: yamcs.protobuf.commanding.CommandHistoryEntry.AliasesEntry
	(mdb.SignificanceInfo_SignificanceLevelType)(0), // 14: yamcs.protobuf.mdb.SignificanceInfo.SignificanceLevelType
	(*timestamppb.Timestamp)(nil),                   // 15: google.protobuf.Timestamp
	(*mdb.SignificanceInfo)(nil),                    // 16: yamcs.protobuf.mdb.SignificanceInfo
	(*protobuf.Value)(nil),                          // 17: yamcs.protobuf.Value
}
var file_yamcs_protobuf_commanding_commanding_proto_depIdxs = []int32{
	0,  // 0: yamcs.protobuf.commanding.CommandQueueInfo.state:type_name -> yamcs.protobuf.commanding.QueueState
	14, // 1: yamcs.protobuf.commanding.CommandQueueInfo.minLevel:type_name -> yamcs.protobuf.mdb.SignificanceInfo.SignificanceLevelType
	4,  // 2: yamcs.protobuf.commanding.CommandQueueInfo.entries:type_name -> yamcs.protobuf.commanding.CommandQueueEntry
	10, // 3: yamcs.protobuf.commanding.CommandQueueEntry.assignments:type_name -> yamcs.protobuf.commanding.CommandAssignment
	15, // 4: yamcs.protobuf.commanding.CommandQueueEntry.generationTime:type_name -> google.protobuf.Timestamp
	1,  // 5: yamcs.protobuf.commanding.CommandQueueEvent.type:type_name -> yamcs.protobuf.commanding.CommandQueueEvent.Type
	4,  // 6: yamcs.protobuf.commanding.CommandQueueEvent.data:type_name -> yamcs.protobuf.commanding.CommandQueueEntry
	3,  // 7: yamcs.protobuf.commanding.CommandQueueRequest.queueInfo:type_name -> yamcs.protobuf.commanding.CommandQueueInfo
	4,  // 8: yamcs.protobuf.commanding.CommandQueueRequest.queueEntry:type_name -> yamcs.protobuf.commanding.CommandQueueEntry
	16, // 9: yamcs.protobuf.commanding.CommandSignificance.significance:type_name -> yamcs.protobuf.mdb.SignificanceInfo
	12, // 10: yamcs.protobuf.commanding.VerifierConfig.checkWindow:type_name -> yamcs.protobuf.commanding.VerifierConfig.CheckWindow
	17, // 11: yamcs.protobuf.commanding.CommandHistoryAttribute.value:type_name -> yamcs.protobuf.Value
	17, // 12: yamcs.protobuf.commanding.CommandAssignment.value:type_name -> yamcs.protobuf.Value
	13, // 13: yamcs.protobuf.commanding.CommandHistoryEntry.aliases:type_name -> yamcs.protobuf.commanding.CommandHistoryEntry.AliasesEntry
	2,  // 14: yamcs.protobuf.commanding.CommandHistoryEntry.commandId:type_name -> yamcs.protobuf.commanding.CommandId
	9,  // 15: yamcs.protobuf.commanding.CommandHistoryEntry.attr:type_name -> yamcs.protobuf.commanding.CommandHistoryAttribute
	15, // 16: yamcs.protobuf.commanding.CommandHistoryEntry.generationTime:type_name -> google.protobuf.Timestamp
	10, // 17: yamcs.protobuf.commanding.CommandHistoryEntry.assignments:type_name -> yamcs.protobuf.commanding.CommandAssignment
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_commanding_commanding_proto_init() }
func file_yamcs_protobuf_commanding_commanding_proto_init() {
	if File_yamcs_protobuf_commanding_commanding_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_commanding_commanding_proto_rawDesc), len(file_yamcs_protobuf_commanding_commanding_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yamcs_protobuf_commanding_commanding_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_commanding_commanding_proto_depIdxs,
		EnumInfos:         file_yamcs_protobuf_commanding_commanding_proto_enumTypes,
		MessageInfos:      file_yamcs_protobuf_commanding_commanding_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_commanding_commanding_proto = out.File
	file_yamcs_protobuf_commanding_commanding_proto_goTypes = nil
	file_yamcs_protobuf_commanding_commanding_proto_depIdxs = nil
}
