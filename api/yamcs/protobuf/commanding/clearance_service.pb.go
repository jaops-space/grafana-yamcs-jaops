// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/commanding/clearance_service.proto

package commanding

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	mdb "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf/mdb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListClearancesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Clearances    []*ClearanceInfo       `protobuf:"bytes,1,rep,name=clearances" json:"clearances,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClearancesResponse) Reset() {
	*x = ListClearancesResponse{}
	mi := &file_yamcs_protobuf_commanding_clearance_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClearancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClearancesResponse) ProtoMessage() {}

func (x *ListClearancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_clearance_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClearancesResponse.ProtoReflect.Descriptor instead.
func (*ListClearancesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_clearance_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListClearancesResponse) GetClearances() []*ClearanceInfo {
	if x != nil {
		return x.Clearances
	}
	return nil
}

type ClearanceInfo struct {
	state                protoimpl.MessageState                      `protogen:"open.v1"`
	Username             *string                                     `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Level                *mdb.SignificanceInfo_SignificanceLevelType `protobuf:"varint,2,opt,name=level,enum=yamcs.protobuf.mdb.SignificanceInfo_SignificanceLevelType" json:"level,omitempty"`
	IssuedBy             *string                                     `protobuf:"bytes,3,opt,name=issuedBy" json:"issuedBy,omitempty"`
	IssueTime            *timestamppb.Timestamp                      `protobuf:"bytes,4,opt,name=issueTime" json:"issueTime,omitempty"`
	HasCommandPrivileges *bool                                       `protobuf:"varint,5,opt,name=hasCommandPrivileges" json:"hasCommandPrivileges,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ClearanceInfo) Reset() {
	*x = ClearanceInfo{}
	mi := &file_yamcs_protobuf_commanding_clearance_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearanceInfo) ProtoMessage() {}

func (x *ClearanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_clearance_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearanceInfo.ProtoReflect.Descriptor instead.
func (*ClearanceInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_clearance_service_proto_rawDescGZIP(), []int{1}
}

func (x *ClearanceInfo) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *ClearanceInfo) GetLevel() mdb.SignificanceInfo_SignificanceLevelType {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return mdb.SignificanceInfo_SignificanceLevelType(1)
}

func (x *ClearanceInfo) GetIssuedBy() string {
	if x != nil && x.IssuedBy != nil {
		return *x.IssuedBy
	}
	return ""
}

func (x *ClearanceInfo) GetIssueTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IssueTime
	}
	return nil
}

func (x *ClearanceInfo) GetHasCommandPrivileges() bool {
	if x != nil && x.HasCommandPrivileges != nil {
		return *x.HasCommandPrivileges
	}
	return false
}

type UpdateClearanceRequest struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Username      *string                                     `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Level         *mdb.SignificanceInfo_SignificanceLevelType `protobuf:"varint,2,opt,name=level,enum=yamcs.protobuf.mdb.SignificanceInfo_SignificanceLevelType" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClearanceRequest) Reset() {
	*x = UpdateClearanceRequest{}
	mi := &file_yamcs_protobuf_commanding_clearance_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClearanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClearanceRequest) ProtoMessage() {}

func (x *UpdateClearanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_clearance_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClearanceRequest.ProtoReflect.Descriptor instead.
func (*UpdateClearanceRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_clearance_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateClearanceRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *UpdateClearanceRequest) GetLevel() mdb.SignificanceInfo_SignificanceLevelType {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return mdb.SignificanceInfo_SignificanceLevelType(1)
}

type DeleteClearanceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      *string                `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClearanceRequest) Reset() {
	*x = DeleteClearanceRequest{}
	mi := &file_yamcs_protobuf_commanding_clearance_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClearanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClearanceRequest) ProtoMessage() {}

func (x *DeleteClearanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_commanding_clearance_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClearanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteClearanceRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_commanding_clearance_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteClearanceRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

var File_yamcs_protobuf_commanding_clearance_service_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_commanding_clearance_service_proto_rawDesc = string([]byte{
	0x0a, 0x31, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x6d, 0x64,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x0d,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x34,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0xdc, 0x04, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x70, 0x69, 0x12, 0x72, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x15, 0x8a, 0x92, 0x03, 0x11, 0x0a, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0xc1, 0x01, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x8a, 0x92, 0x03, 0x4d,
	0x3a, 0x01, 0x2a, 0x62, 0x2c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x27, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x27, 0x20, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x7b, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x7d, 0x2a, 0x1a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa8, 0x01,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x4a, 0x8a, 0x92,
	0x03, 0x46, 0x62, 0x28, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x72, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x27, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x27, 0x22, 0x1a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x69, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x0f, 0xda, 0x92, 0x03, 0x0b, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x30, 0x01, 0x42, 0x77, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x15, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a,
	0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61,
	0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
})

var (
	file_yamcs_protobuf_commanding_clearance_service_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_commanding_clearance_service_proto_rawDescData []byte
)

func file_yamcs_protobuf_commanding_clearance_service_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_commanding_clearance_service_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_commanding_clearance_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_commanding_clearance_service_proto_rawDesc), len(file_yamcs_protobuf_commanding_clearance_service_proto_rawDesc)))
	})
	return file_yamcs_protobuf_commanding_clearance_service_proto_rawDescData
}

var file_yamcs_protobuf_commanding_clearance_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_yamcs_protobuf_commanding_clearance_service_proto_goTypes = []any{
	(*ListClearancesResponse)(nil),                  // 0: yamcs.protobuf.commanding.ListClearancesResponse
	(*ClearanceInfo)(nil),                           // 1: yamcs.protobuf.commanding.ClearanceInfo
	(*UpdateClearanceRequest)(nil),                  // 2: yamcs.protobuf.commanding.UpdateClearanceRequest
	(*DeleteClearanceRequest)(nil),                  // 3: yamcs.protobuf.commanding.DeleteClearanceRequest
	(mdb.SignificanceInfo_SignificanceLevelType)(0), // 4: yamcs.protobuf.mdb.SignificanceInfo.SignificanceLevelType
	(*timestamppb.Timestamp)(nil),                   // 5: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                           // 6: google.protobuf.Empty
}
var file_yamcs_protobuf_commanding_clearance_service_proto_depIdxs = []int32{
	1, // 0: yamcs.protobuf.commanding.ListClearancesResponse.clearances:type_name -> yamcs.protobuf.commanding.ClearanceInfo
	4, // 1: yamcs.protobuf.commanding.ClearanceInfo.level:type_name -> yamcs.protobuf.mdb.SignificanceInfo.SignificanceLevelType
	5, // 2: yamcs.protobuf.commanding.ClearanceInfo.issueTime:type_name -> google.protobuf.Timestamp
	4, // 3: yamcs.protobuf.commanding.UpdateClearanceRequest.level:type_name -> yamcs.protobuf.mdb.SignificanceInfo.SignificanceLevelType
	6, // 4: yamcs.protobuf.commanding.ClearanceApi.ListClearances:input_type -> google.protobuf.Empty
	2, // 5: yamcs.protobuf.commanding.ClearanceApi.UpdateClearance:input_type -> yamcs.protobuf.commanding.UpdateClearanceRequest
	3, // 6: yamcs.protobuf.commanding.ClearanceApi.DeleteClearance:input_type -> yamcs.protobuf.commanding.DeleteClearanceRequest
	6, // 7: yamcs.protobuf.commanding.ClearanceApi.SubscribeClearance:input_type -> google.protobuf.Empty
	0, // 8: yamcs.protobuf.commanding.ClearanceApi.ListClearances:output_type -> yamcs.protobuf.commanding.ListClearancesResponse
	1, // 9: yamcs.protobuf.commanding.ClearanceApi.UpdateClearance:output_type -> yamcs.protobuf.commanding.ClearanceInfo
	6, // 10: yamcs.protobuf.commanding.ClearanceApi.DeleteClearance:output_type -> google.protobuf.Empty
	1, // 11: yamcs.protobuf.commanding.ClearanceApi.SubscribeClearance:output_type -> yamcs.protobuf.commanding.ClearanceInfo
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_commanding_clearance_service_proto_init() }
func file_yamcs_protobuf_commanding_clearance_service_proto_init() {
	if File_yamcs_protobuf_commanding_clearance_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_commanding_clearance_service_proto_rawDesc), len(file_yamcs_protobuf_commanding_clearance_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_commanding_clearance_service_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_commanding_clearance_service_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_commanding_clearance_service_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_commanding_clearance_service_proto = out.File
	file_yamcs_protobuf_commanding_clearance_service_proto_goTypes = nil
	file_yamcs_protobuf_commanding_clearance_service_proto_depIdxs = nil
}
