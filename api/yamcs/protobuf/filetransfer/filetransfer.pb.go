// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/filetransfer/filetransfer.proto

package filetransfer

import (
	_ "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	actions "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf/actions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransferDirection int32

const (
	TransferDirection_UPLOAD   TransferDirection = 1
	TransferDirection_DOWNLOAD TransferDirection = 2
)

// Enum value maps for TransferDirection.
var (
	TransferDirection_name = map[int32]string{
		1: "UPLOAD",
		2: "DOWNLOAD",
	}
	TransferDirection_value = map[string]int32{
		"UPLOAD":   1,
		"DOWNLOAD": 2,
	}
)

func (x TransferDirection) Enum() *TransferDirection {
	p := new(TransferDirection)
	*p = x
	return p
}

func (x TransferDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_enumTypes[0].Descriptor()
}

func (TransferDirection) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_filetransfer_filetransfer_proto_enumTypes[0]
}

func (x TransferDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TransferDirection) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TransferDirection(num)
	return nil
}

// Deprecated: Use TransferDirection.Descriptor instead.
func (TransferDirection) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{0}
}

type TransferState int32

const (
	TransferState_RUNNING    TransferState = 1
	TransferState_PAUSED     TransferState = 2
	TransferState_FAILED     TransferState = 3
	TransferState_COMPLETED  TransferState = 4
	TransferState_QUEUED     TransferState = 5
	TransferState_CANCELLING TransferState = 6
)

// Enum value maps for TransferState.
var (
	TransferState_name = map[int32]string{
		1: "RUNNING",
		2: "PAUSED",
		3: "FAILED",
		4: "COMPLETED",
		5: "QUEUED",
		6: "CANCELLING",
	}
	TransferState_value = map[string]int32{
		"RUNNING":    1,
		"PAUSED":     2,
		"FAILED":     3,
		"COMPLETED":  4,
		"QUEUED":     5,
		"CANCELLING": 6,
	}
)

func (x TransferState) Enum() *TransferState {
	p := new(TransferState)
	*p = x
	return p
}

func (x TransferState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferState) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_enumTypes[1].Descriptor()
}

func (TransferState) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_filetransfer_filetransfer_proto_enumTypes[1]
}

func (x TransferState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TransferState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TransferState(num)
	return nil
}

// Deprecated: Use TransferState.Descriptor instead.
func (TransferState) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{1}
}

type FileTransferOption_Type int32

const (
	// Shown as checkbox in the UI
	FileTransferOption_BOOLEAN FileTransferOption_Type = 0
	// Shown as a number field or drop-down if values is specified
	FileTransferOption_DOUBLE FileTransferOption_Type = 1
	// Shown as text field or drop-down if values is specified
	FileTransferOption_STRING FileTransferOption_Type = 2
)

// Enum value maps for FileTransferOption_Type.
var (
	FileTransferOption_Type_name = map[int32]string{
		0: "BOOLEAN",
		1: "DOUBLE",
		2: "STRING",
	}
	FileTransferOption_Type_value = map[string]int32{
		"BOOLEAN": 0,
		"DOUBLE":  1,
		"STRING":  2,
	}
)

func (x FileTransferOption_Type) Enum() *FileTransferOption_Type {
	p := new(FileTransferOption_Type)
	*p = x
	return p
}

func (x FileTransferOption_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileTransferOption_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_enumTypes[2].Descriptor()
}

func (FileTransferOption_Type) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_filetransfer_filetransfer_proto_enumTypes[2]
}

func (x FileTransferOption_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FileTransferOption_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FileTransferOption_Type(num)
	return nil
}

// Deprecated: Use FileTransferOption_Type.Descriptor instead.
func (FileTransferOption_Type) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{21, 0}
}

type TransactionId struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SequenceNumber  *uint32                `protobuf:"varint,1,opt,name=sequenceNumber" json:"sequenceNumber,omitempty"`
	InitiatorEntity *uint64                `protobuf:"varint,2,opt,name=initiatorEntity" json:"initiatorEntity,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TransactionId) Reset() {
	*x = TransactionId{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionId) ProtoMessage() {}

func (x *TransactionId) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionId.ProtoReflect.Descriptor instead.
func (*TransactionId) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionId) GetSequenceNumber() uint32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *TransactionId) GetInitiatorEntity() uint64 {
	if x != nil && x.InitiatorEntity != nil {
		return *x.InitiatorEntity
	}
	return 0
}

type ListFileTransferServicesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance      *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFileTransferServicesRequest) Reset() {
	*x = ListFileTransferServicesRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFileTransferServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFileTransferServicesRequest) ProtoMessage() {}

func (x *ListFileTransferServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFileTransferServicesRequest.ProtoReflect.Descriptor instead.
func (*ListFileTransferServicesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{1}
}

func (x *ListFileTransferServicesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type GetFileTransferServiceRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	ServiceName   *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFileTransferServiceRequest) Reset() {
	*x = GetFileTransferServiceRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFileTransferServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileTransferServiceRequest) ProtoMessage() {}

func (x *GetFileTransferServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileTransferServiceRequest.ProtoReflect.Descriptor instead.
func (*GetFileTransferServiceRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{2}
}

func (x *GetFileTransferServiceRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetFileTransferServiceRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

type ListFileTransferServicesResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Services      []*FileTransferServiceInfo `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFileTransferServicesResponse) Reset() {
	*x = ListFileTransferServicesResponse{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFileTransferServicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFileTransferServicesResponse) ProtoMessage() {}

func (x *ListFileTransferServicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFileTransferServicesResponse.ProtoReflect.Descriptor instead.
func (*ListFileTransferServicesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{3}
}

func (x *ListFileTransferServicesResponse) GetServices() []*FileTransferServiceInfo {
	if x != nil {
		return x.Services
	}
	return nil
}

type FileTransferCapabilities struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether the transfer service supports uploads
	Upload *bool `protobuf:"varint,1,opt,name=upload" json:"upload,omitempty"`
	// Whether the transfer service supports downloads
	Download *bool `protobuf:"varint,2,opt,name=download" json:"download,omitempty"`
	// Whether the transfer service supports specifying an upload path
	RemotePath *bool `protobuf:"varint,4,opt,name=remotePath" json:"remotePath,omitempty"`
	// Whether the transfer service supports remote file listings
	FileList *bool `protobuf:"varint,5,opt,name=fileList" json:"fileList,omitempty"`
	// Whether transfers contain a column describing the Transfer Type
	HasTransferType *bool `protobuf:"varint,6,opt,name=hasTransferType" json:"hasTransferType,omitempty"`
	// Whether the transfer service supports pause/resume
	PauseResume *bool `protobuf:"varint,9,opt,name=pauseResume" json:"pauseResume,omitempty"`
	// Additional columns to show in a file listing, where id
	// is a key of “RemoteFile.extra“
	FileListExtraColumns []*ExtraColumnInfo `protobuf:"bytes,7,rep,name=fileListExtraColumns" json:"fileListExtraColumns,omitempty"`
	// Additional actions that may be executed on remote files
	FileActions   []*actions.ActionInfo `protobuf:"bytes,8,rep,name=fileActions" json:"fileActions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferCapabilities) Reset() {
	*x = FileTransferCapabilities{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferCapabilities) ProtoMessage() {}

func (x *FileTransferCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferCapabilities.ProtoReflect.Descriptor instead.
func (*FileTransferCapabilities) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{4}
}

func (x *FileTransferCapabilities) GetUpload() bool {
	if x != nil && x.Upload != nil {
		return *x.Upload
	}
	return false
}

func (x *FileTransferCapabilities) GetDownload() bool {
	if x != nil && x.Download != nil {
		return *x.Download
	}
	return false
}

func (x *FileTransferCapabilities) GetRemotePath() bool {
	if x != nil && x.RemotePath != nil {
		return *x.RemotePath
	}
	return false
}

func (x *FileTransferCapabilities) GetFileList() bool {
	if x != nil && x.FileList != nil {
		return *x.FileList
	}
	return false
}

func (x *FileTransferCapabilities) GetHasTransferType() bool {
	if x != nil && x.HasTransferType != nil {
		return *x.HasTransferType
	}
	return false
}

func (x *FileTransferCapabilities) GetPauseResume() bool {
	if x != nil && x.PauseResume != nil {
		return *x.PauseResume
	}
	return false
}

func (x *FileTransferCapabilities) GetFileListExtraColumns() []*ExtraColumnInfo {
	if x != nil {
		return x.FileListExtraColumns
	}
	return nil
}

func (x *FileTransferCapabilities) GetFileActions() []*actions.ActionInfo {
	if x != nil {
		return x.FileActions
	}
	return nil
}

type ExtraColumnInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Label         *string                `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtraColumnInfo) Reset() {
	*x = ExtraColumnInfo{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtraColumnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraColumnInfo) ProtoMessage() {}

func (x *ExtraColumnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraColumnInfo.ProtoReflect.Descriptor instead.
func (*ExtraColumnInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{5}
}

func (x *ExtraColumnInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ExtraColumnInfo) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

type FileTransferServiceInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	Name            *string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	LocalEntities   []*EntityInfo             `protobuf:"bytes,3,rep,name=localEntities" json:"localEntities,omitempty"`
	RemoteEntities  []*EntityInfo             `protobuf:"bytes,4,rep,name=remoteEntities" json:"remoteEntities,omitempty"`
	Capabilities    *FileTransferCapabilities `protobuf:"bytes,5,opt,name=capabilities" json:"capabilities,omitempty"`
	TransferOptions []*FileTransferOption     `protobuf:"bytes,6,rep,name=transferOptions" json:"transferOptions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FileTransferServiceInfo) Reset() {
	*x = FileTransferServiceInfo{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferServiceInfo) ProtoMessage() {}

func (x *FileTransferServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferServiceInfo.ProtoReflect.Descriptor instead.
func (*FileTransferServiceInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{6}
}

func (x *FileTransferServiceInfo) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *FileTransferServiceInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FileTransferServiceInfo) GetLocalEntities() []*EntityInfo {
	if x != nil {
		return x.LocalEntities
	}
	return nil
}

func (x *FileTransferServiceInfo) GetRemoteEntities() []*EntityInfo {
	if x != nil {
		return x.RemoteEntities
	}
	return nil
}

func (x *FileTransferServiceInfo) GetCapabilities() *FileTransferCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *FileTransferServiceInfo) GetTransferOptions() []*FileTransferOption {
	if x != nil {
		return x.TransferOptions
	}
	return nil
}

type EntityInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id            *uint64                `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntityInfo) Reset() {
	*x = EntityInfo{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityInfo) ProtoMessage() {}

func (x *EntityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntityInfo.ProtoReflect.Descriptor instead.
func (*EntityInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{7}
}

func (x *EntityInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *EntityInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type TransferInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// unique identifier assigned by the file transfer service
	Id *uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// when the transfer has started. Note that this will not be set for QUEUED transfers.
	StartTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=startTime" json:"startTime,omitempty"`
	State           *TransferState         `protobuf:"varint,3,opt,name=state,enum=yamcs.protobuf.filetransfer.TransferState" json:"state,omitempty"`
	Bucket          *string                `protobuf:"bytes,4,opt,name=bucket" json:"bucket,omitempty"`
	ObjectName      *string                `protobuf:"bytes,5,opt,name=objectName" json:"objectName,omitempty"`
	RemotePath      *string                `protobuf:"bytes,6,opt,name=remotePath" json:"remotePath,omitempty"`
	Direction       *TransferDirection     `protobuf:"varint,7,opt,name=direction,enum=yamcs.protobuf.filetransfer.TransferDirection" json:"direction,omitempty"`
	TotalSize       *uint64                `protobuf:"varint,8,opt,name=totalSize" json:"totalSize,omitempty"`
	SizeTransferred *uint64                `protobuf:"varint,9,opt,name=sizeTransferred" json:"sizeTransferred,omitempty"`
	// reliable = true -> class 2 transfer
	// reliable = false -> class 1 transfer
	Reliable *bool `protobuf:"varint,10,opt,name=reliable" json:"reliable,omitempty"`
	// in case the transcation is failed, this provides more information
	FailureReason *string `protobuf:"bytes,11,opt,name=failureReason" json:"failureReason,omitempty"`
	// valid for CFDP: transaction id;
	// for the incoming transfers it is assigned by the remote peer so therefore might not be unique
	TransactionId *TransactionId `protobuf:"bytes,12,opt,name=transactionId" json:"transactionId,omitempty"`
	// when the transfer has been created.
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=creationTime" json:"creationTime,omitempty"`
	// depending on the implementation, can mean normal file transfer, directory listing request, file download request, etc.
	TransferType *string `protobuf:"bytes,14,opt,name=transferType" json:"transferType,omitempty"`
	// Local entity, may be empty if there is only one such entity.
	LocalEntity *EntityInfo `protobuf:"bytes,15,opt,name=localEntity" json:"localEntity,omitempty"`
	// Remote entity, may be empty if there is only one such entity.
	RemoteEntity  *EntityInfo `protobuf:"bytes,16,opt,name=remoteEntity" json:"remoteEntity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferInfo) Reset() {
	*x = TransferInfo{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInfo) ProtoMessage() {}

func (x *TransferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInfo.ProtoReflect.Descriptor instead.
func (*TransferInfo) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{8}
}

func (x *TransferInfo) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TransferInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TransferInfo) GetState() TransferState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return TransferState_RUNNING
}

func (x *TransferInfo) GetBucket() string {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return ""
}

func (x *TransferInfo) GetObjectName() string {
	if x != nil && x.ObjectName != nil {
		return *x.ObjectName
	}
	return ""
}

func (x *TransferInfo) GetRemotePath() string {
	if x != nil && x.RemotePath != nil {
		return *x.RemotePath
	}
	return ""
}

func (x *TransferInfo) GetDirection() TransferDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return TransferDirection_UPLOAD
}

func (x *TransferInfo) GetTotalSize() uint64 {
	if x != nil && x.TotalSize != nil {
		return *x.TotalSize
	}
	return 0
}

func (x *TransferInfo) GetSizeTransferred() uint64 {
	if x != nil && x.SizeTransferred != nil {
		return *x.SizeTransferred
	}
	return 0
}

func (x *TransferInfo) GetReliable() bool {
	if x != nil && x.Reliable != nil {
		return *x.Reliable
	}
	return false
}

func (x *TransferInfo) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *TransferInfo) GetTransactionId() *TransactionId {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *TransferInfo) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *TransferInfo) GetTransferType() string {
	if x != nil && x.TransferType != nil {
		return *x.TransferType
	}
	return ""
}

func (x *TransferInfo) GetLocalEntity() *EntityInfo {
	if x != nil {
		return x.LocalEntity
	}
	return nil
}

func (x *TransferInfo) GetRemoteEntity() *EntityInfo {
	if x != nil {
		return x.RemoteEntity
	}
	return nil
}

type CreateTransferRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	ServiceName *string `protobuf:"bytes,8,opt,name=serviceName" json:"serviceName,omitempty"`
	// **Required** One of “UPLOAD“ or “DOWNLOAD“.
	Direction *TransferDirection `protobuf:"varint,2,opt,name=direction,enum=yamcs.protobuf.filetransfer.TransferDirection" json:"direction,omitempty"`
	// **Required** The bucket containing the local Yamcs object.
	Bucket *string `protobuf:"bytes,3,opt,name=bucket" json:"bucket,omitempty"`
	// **Required** The object name in Yamcs bucket storage. For UPLOAD transfers,
	// this object must exist and is what Yamcs will transfer to the remote
	// entity. For DOWNLOAD transfers, it refers to the object that
	// Yamcs will write to when downloading from a remote entity.
	ObjectName *string `protobuf:"bytes,4,opt,name=objectName" json:"objectName,omitempty"`
	// **Required** The path at the remote entity. Example: “a/local/path/some_filename“.
	RemotePath *string `protobuf:"bytes,5,opt,name=remotePath" json:"remotePath,omitempty"`
	// used to derive the source entity id
	Source *string `protobuf:"bytes,9,opt,name=source" json:"source,omitempty"`
	// used to derive the destination entity id
	Destination *string `protobuf:"bytes,10,opt,name=destination" json:"destination,omitempty"`
	// Options for the transfer
	Options       *structpb.Struct `protobuf:"bytes,11,opt,name=options" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTransferRequest) Reset() {
	*x = CreateTransferRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransferRequest) ProtoMessage() {}

func (x *CreateTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransferRequest.ProtoReflect.Descriptor instead.
func (*CreateTransferRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTransferRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *CreateTransferRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *CreateTransferRequest) GetDirection() TransferDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return TransferDirection_UPLOAD
}

func (x *CreateTransferRequest) GetBucket() string {
	if x != nil && x.Bucket != nil {
		return *x.Bucket
	}
	return ""
}

func (x *CreateTransferRequest) GetObjectName() string {
	if x != nil && x.ObjectName != nil {
		return *x.ObjectName
	}
	return ""
}

func (x *CreateTransferRequest) GetRemotePath() string {
	if x != nil && x.RemotePath != nil {
		return *x.RemotePath
	}
	return ""
}

func (x *CreateTransferRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *CreateTransferRequest) GetDestination() string {
	if x != nil && x.Destination != nil {
		return *x.Destination
	}
	return ""
}

func (x *CreateTransferRequest) GetOptions() *structpb.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

type PauseTransferRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	ServiceName *string `protobuf:"bytes,3,opt,name=serviceName" json:"serviceName,omitempty"`
	// Transfer identifier (assigned by Yamcs)
	Id            *int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PauseTransferRequest) Reset() {
	*x = PauseTransferRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PauseTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseTransferRequest) ProtoMessage() {}

func (x *PauseTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseTransferRequest.ProtoReflect.Descriptor instead.
func (*PauseTransferRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{10}
}

func (x *PauseTransferRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *PauseTransferRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *PauseTransferRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type CancelTransferRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	ServiceName *string `protobuf:"bytes,3,opt,name=serviceName" json:"serviceName,omitempty"`
	// Transfer identifier (assigned by Yamcs)
	Id            *int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTransferRequest) Reset() {
	*x = CancelTransferRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTransferRequest) ProtoMessage() {}

func (x *CancelTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTransferRequest.ProtoReflect.Descriptor instead.
func (*CancelTransferRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{11}
}

func (x *CancelTransferRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *CancelTransferRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *CancelTransferRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ResumeTransferRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	ServiceName *string `protobuf:"bytes,3,opt,name=serviceName" json:"serviceName,omitempty"`
	// Transfer identifier (assigned by Yamcs)
	Id            *int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResumeTransferRequest) Reset() {
	*x = ResumeTransferRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResumeTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResumeTransferRequest) ProtoMessage() {}

func (x *ResumeTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResumeTransferRequest.ProtoReflect.Descriptor instead.
func (*ResumeTransferRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{12}
}

func (x *ResumeTransferRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ResumeTransferRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *ResumeTransferRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ListTransfersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	ServiceName *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	// Filter the lower bound of the transfer's creation time.
	// Specify a date string in ISO 8601 format. This bound is
	// inclusive.
	Start *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the transfer's creation time.
	// Specify a date string in ISO 8601 format. This bound is
	// exclusive.
	Stop *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stop" json:"stop,omitempty"`
	// Filter by local entity identifier
	LocalEntityId *int64 `protobuf:"varint,5,opt,name=localEntityId" json:"localEntityId,omitempty"`
	// Filter by remote entity identifier
	RemoteEntityId *int64 `protobuf:"varint,6,opt,name=remoteEntityId" json:"remoteEntityId,omitempty"`
	// Filter by transfer state. Leave empty to return any.
	State []TransferState `protobuf:"varint,7,rep,name=state,enum=yamcs.protobuf.filetransfer.TransferState" json:"state,omitempty"`
	// Filter by transfer direction (UPLOAD or DOWNLOAD)
	Direction *TransferDirection `protobuf:"varint,8,opt,name=direction,enum=yamcs.protobuf.filetransfer.TransferDirection" json:"direction,omitempty"`
	// The maximum number of returned records per page. Choose this value too high
	// and you risk hitting the maximum response size limit enforced by the server.
	// Default: “100“
	Limit *int32 `protobuf:"varint,9,opt,name=limit" json:"limit,omitempty"`
	// The order of the returned results. Can be either “asc“ or “desc“.
	// Default: “desc“
	Order         *string `protobuf:"bytes,10,opt,name=order" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransfersRequest) Reset() {
	*x = ListTransfersRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersRequest) ProtoMessage() {}

func (x *ListTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersRequest.ProtoReflect.Descriptor instead.
func (*ListTransfersRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{13}
}

func (x *ListTransfersRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListTransfersRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *ListTransfersRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListTransfersRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ListTransfersRequest) GetLocalEntityId() int64 {
	if x != nil && x.LocalEntityId != nil {
		return *x.LocalEntityId
	}
	return 0
}

func (x *ListTransfersRequest) GetRemoteEntityId() int64 {
	if x != nil && x.RemoteEntityId != nil {
		return *x.RemoteEntityId
	}
	return 0
}

func (x *ListTransfersRequest) GetState() []TransferState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ListTransfersRequest) GetDirection() TransferDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return TransferDirection_UPLOAD
}

func (x *ListTransfersRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListTransfersRequest) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

type GetTransferRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	ServiceName *string `protobuf:"bytes,3,opt,name=serviceName" json:"serviceName,omitempty"`
	// Transfer identifier (assigned by Yamcs)
	Id            *int64 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransferRequest) Reset() {
	*x = GetTransferRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransferRequest) ProtoMessage() {}

func (x *GetTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransferRequest.ProtoReflect.Descriptor instead.
func (*GetTransferRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{14}
}

func (x *GetTransferRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetTransferRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *GetTransferRequest) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type ListTransfersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transfers     []*TransferInfo        `protobuf:"bytes,1,rep,name=transfers" json:"transfers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTransfersResponse) Reset() {
	*x = ListTransfersResponse{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTransfersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTransfersResponse) ProtoMessage() {}

func (x *ListTransfersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTransfersResponse.ProtoReflect.Descriptor instead.
func (*ListTransfersResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{15}
}

func (x *ListTransfersResponse) GetTransfers() []*TransferInfo {
	if x != nil {
		return x.Transfers
	}
	return nil
}

type SubscribeTransfersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	ServiceName *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	// If true, send info on all currently ongoing transfers,
	// as well as any future updates (recommended).
	//
	// For legacy reasons, the default is “false“, which will
	// send also finished transfers upon subscription. This behaviour
	// is due for removal in a future release (if you want to receive
	// past transfers, do a GET request).
	OngoingOnly   *bool `protobuf:"varint,3,opt,name=ongoingOnly" json:"ongoingOnly,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeTransfersRequest) Reset() {
	*x = SubscribeTransfersRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeTransfersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTransfersRequest) ProtoMessage() {}

func (x *SubscribeTransfersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTransfersRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTransfersRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{16}
}

func (x *SubscribeTransfersRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeTransfersRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *SubscribeTransfersRequest) GetOngoingOnly() bool {
	if x != nil && x.OngoingOnly != nil {
		return *x.OngoingOnly
	}
	return false
}

type ListFilesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	ServiceName *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	// Entity from which to get the file list
	Source *string `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// Entity from which to get the file list
	Destination *string `protobuf:"bytes,4,opt,name=destination" json:"destination,omitempty"`
	// Path of folder to list files from
	RemotePath *string `protobuf:"bytes,5,opt,name=remotePath" json:"remotePath,omitempty"`
	// Options for the transfer
	Options       *structpb.Struct `protobuf:"bytes,6,opt,name=options" json:"options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFilesRequest) Reset() {
	*x = ListFilesRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesRequest) ProtoMessage() {}

func (x *ListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesRequest.ProtoReflect.Descriptor instead.
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{17}
}

func (x *ListFilesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ListFilesRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *ListFilesRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *ListFilesRequest) GetDestination() string {
	if x != nil && x.Destination != nil {
		return *x.Destination
	}
	return ""
}

func (x *ListFilesRequest) GetRemotePath() string {
	if x != nil && x.RemotePath != nil {
		return *x.RemotePath
	}
	return ""
}

func (x *ListFilesRequest) GetOptions() *structpb.Struct {
	if x != nil {
		return x.Options
	}
	return nil
}

type RemoteFile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// File identifier
	//
	// Typically, a remote file path, or a filename
	// in case of a flat file table.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Optional display name. Can be used when the “name“
	// field contains information that should be hidden from the user.
	DisplayName *string `protobuf:"bytes,5,opt,name=displayName" json:"displayName,omitempty"`
	// True if the path represents a directory
	IsDirectory *bool `protobuf:"varint,2,opt,name=isDirectory" json:"isDirectory,omitempty"`
	// File size
	Size *uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	// Modification time
	Modified *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=modified" json:"modified,omitempty"`
	// Implementation-specific fields
	Extra         *structpb.Struct `protobuf:"bytes,6,opt,name=extra" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteFile) Reset() {
	*x = RemoteFile{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteFile) ProtoMessage() {}

func (x *RemoteFile) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteFile.ProtoReflect.Descriptor instead.
func (*RemoteFile) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{18}
}

func (x *RemoteFile) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RemoteFile) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *RemoteFile) GetIsDirectory() bool {
	if x != nil && x.IsDirectory != nil {
		return *x.IsDirectory
	}
	return false
}

func (x *RemoteFile) GetSize() uint64 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *RemoteFile) GetModified() *timestamppb.Timestamp {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *RemoteFile) GetExtra() *structpb.Struct {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ListFilesResponse struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Files       []*RemoteFile          `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	Destination *string                `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	RemotePath  *string                `protobuf:"bytes,3,opt,name=remotePath" json:"remotePath,omitempty"`
	ListTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=listTime" json:"listTime,omitempty"`
	State       *string                `protobuf:"bytes,5,opt,name=state" json:"state,omitempty"`
	// Progress message, in case the file listing is still underway
	ProgressMessage *string `protobuf:"bytes,6,opt,name=progressMessage" json:"progressMessage,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListFilesResponse) Reset() {
	*x = ListFilesResponse{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesResponse) ProtoMessage() {}

func (x *ListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesResponse.ProtoReflect.Descriptor instead.
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{19}
}

func (x *ListFilesResponse) GetFiles() []*RemoteFile {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *ListFilesResponse) GetDestination() string {
	if x != nil && x.Destination != nil {
		return *x.Destination
	}
	return ""
}

func (x *ListFilesResponse) GetRemotePath() string {
	if x != nil && x.RemotePath != nil {
		return *x.RemotePath
	}
	return ""
}

func (x *ListFilesResponse) GetListTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ListTime
	}
	return nil
}

func (x *ListFilesResponse) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *ListFilesResponse) GetProgressMessage() string {
	if x != nil && x.ProgressMessage != nil {
		return *x.ProgressMessage
	}
	return ""
}

type RunFileActionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// File transfer service name
	ServiceName *string `protobuf:"bytes,2,opt,name=serviceName" json:"serviceName,omitempty"`
	// Remote entity
	RemoteEntity *string `protobuf:"bytes,3,opt,name=remoteEntity" json:"remoteEntity,omitempty"`
	// File identifier
	File *string `protobuf:"bytes,4,opt,name=file" json:"file,omitempty"`
	// Action name
	Action *string `protobuf:"bytes,5,opt,name=action" json:"action,omitempty"`
	// Action message
	Message       *structpb.Struct `protobuf:"bytes,6,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunFileActionRequest) Reset() {
	*x = RunFileActionRequest{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunFileActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFileActionRequest) ProtoMessage() {}

func (x *RunFileActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFileActionRequest.ProtoReflect.Descriptor instead.
func (*RunFileActionRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{20}
}

func (x *RunFileActionRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *RunFileActionRequest) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *RunFileActionRequest) GetRemoteEntity() string {
	if x != nil && x.RemoteEntity != nil {
		return *x.RemoteEntity
	}
	return ""
}

func (x *RunFileActionRequest) GetFile() string {
	if x != nil && x.File != nil {
		return *x.File
	}
	return ""
}

func (x *RunFileActionRequest) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *RunFileActionRequest) GetMessage() *structpb.Struct {
	if x != nil {
		return x.Message
	}
	return nil
}

// CUSTOMISABLE FILE TRANSFER OPTIONS
type FileTransferOption struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Option type
	Type *FileTransferOption_Type `protobuf:"varint,2,opt,name=type,enum=yamcs.protobuf.filetransfer.FileTransferOption_Type" json:"type,omitempty"`
	// Title for the option
	Title *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	// Help text shown on hover
	Description *string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// Placeholder for fields and label for checkboxes
	AssociatedText *string `protobuf:"bytes,5,opt,name=associatedText" json:"associatedText,omitempty"`
	// Default value for the field
	Default *string `protobuf:"bytes,6,opt,name=default" json:"default,omitempty"`
	// Values for potential dropdown menu
	Values []*FileTransferOption_Value `protobuf:"bytes,7,rep,name=values" json:"values,omitempty"`
	// Whether a custom field is needed when using the drop-down menu
	AllowCustomOption *bool `protobuf:"varint,8,opt,name=allowCustomOption" json:"allowCustomOption,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *FileTransferOption) Reset() {
	*x = FileTransferOption{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferOption) ProtoMessage() {}

func (x *FileTransferOption) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferOption.ProtoReflect.Descriptor instead.
func (*FileTransferOption) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{21}
}

func (x *FileTransferOption) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FileTransferOption) GetType() FileTransferOption_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return FileTransferOption_BOOLEAN
}

func (x *FileTransferOption) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *FileTransferOption) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FileTransferOption) GetAssociatedText() string {
	if x != nil && x.AssociatedText != nil {
		return *x.AssociatedText
	}
	return ""
}

func (x *FileTransferOption) GetDefault() string {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return ""
}

func (x *FileTransferOption) GetValues() []*FileTransferOption_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *FileTransferOption) GetAllowCustomOption() bool {
	if x != nil && x.AllowCustomOption != nil {
		return *x.AllowCustomOption
	}
	return false
}

type FileTransferOption_Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Real value for the option (used to sent to the server)
	Value *string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	// Display name for the value
	VerboseName   *string `protobuf:"bytes,2,opt,name=verboseName" json:"verboseName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileTransferOption_Value) Reset() {
	*x = FileTransferOption_Value{}
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileTransferOption_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTransferOption_Value) ProtoMessage() {}

func (x *FileTransferOption_Value) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTransferOption_Value.ProtoReflect.Descriptor instead.
func (*FileTransferOption_Value) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP(), []int{21, 0}
}

func (x *FileTransferOption_Value) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *FileTransferOption_Value) GetVerboseName() string {
	if x != nil && x.VerboseName != nil {
		return *x.VerboseName
	}
	return ""
}

var File_yamcs_protobuf_filetransfer_filetransfer_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDesc = string([]byte{
	0x0a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x3d, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5d,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x22, 0xfe, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x14,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x44,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x0f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x9f, 0x03,
	0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x30, 0x0a, 0x0a, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x98, 0x06, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x69, 0x7a,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xe8, 0x02, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x64, 0x0a, 0x14, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a,
	0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc0, 0x03, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x73, 0x74, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x62,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x60, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x22, 0x7b, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c,
	0x79, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x31,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xdf, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x22, 0x8c, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x69,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd7, 0x03, 0x0a,
	0x12, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x62, 0x6f,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x2d, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x50, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c,
	0x4f, 0x41, 0x44, 0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55,
	0x45, 0x55, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x32, 0xc3, 0x11, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x70, 0x69, 0x12, 0xc4, 0x01, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x8a, 0x92, 0x03, 0x27, 0x0a, 0x25, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x7b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0xc5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39,
	0x8a, 0x92, 0x03, 0x35, 0x0a, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xb2, 0x01, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x31, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3a, 0x8a, 0x92, 0x03, 0x36, 0x0a, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0xaa,
	0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2f,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x8a, 0x92, 0x03, 0x3b,
	0x0a, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xae, 0x01, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x32,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3d, 0x8a,
	0x92, 0x03, 0x39, 0x3a, 0x01, 0x2a, 0x1a, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0xa1, 0x01, 0x0a,
	0x0d, 0x50, 0x61, 0x75, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x31,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x45, 0x8a, 0x92, 0x03, 0x41, 0x1a,
	0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x12, 0xa4, 0x01, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x46, 0x8a, 0x92, 0x03, 0x42, 0x1a, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x3a, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0xa4, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x46, 0x8a, 0x92, 0x03, 0x42, 0x1a, 0x40, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x8f,
	0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x36, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x14, 0xda, 0x92, 0x03, 0x10, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x65, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x30, 0x01,
	0x12, 0x9b, 0x01, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0xda, 0x92, 0x03, 0x12, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2d, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x30, 0x01, 0x12, 0x96,
	0x01, 0x0a, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x3e, 0x8a, 0x92, 0x03, 0x3a, 0x3a, 0x01, 0x2a,
	0x1a, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x3a, 0x73, 0x79, 0x6e, 0x63, 0x12, 0xab, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x8a, 0x92, 0x03, 0x39, 0x52, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x0a, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x22, 0x47, 0x8a, 0x92, 0x03, 0x43, 0x3a, 0x01, 0x2a, 0x1a, 0x3e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x3a, 0x72,
	0x75, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x0a, 0x12,
	0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x42, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f,
	0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61,
	0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72,
})

var (
	file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescData []byte
)

func file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDesc), len(file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDesc)))
	})
	return file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDescData
}

var file_yamcs_protobuf_filetransfer_filetransfer_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_yamcs_protobuf_filetransfer_filetransfer_proto_goTypes = []any{
	(TransferDirection)(0),                   // 0: yamcs.protobuf.filetransfer.TransferDirection
	(TransferState)(0),                       // 1: yamcs.protobuf.filetransfer.TransferState
	(FileTransferOption_Type)(0),             // 2: yamcs.protobuf.filetransfer.FileTransferOption.Type
	(*TransactionId)(nil),                    // 3: yamcs.protobuf.filetransfer.TransactionId
	(*ListFileTransferServicesRequest)(nil),  // 4: yamcs.protobuf.filetransfer.ListFileTransferServicesRequest
	(*GetFileTransferServiceRequest)(nil),    // 5: yamcs.protobuf.filetransfer.GetFileTransferServiceRequest
	(*ListFileTransferServicesResponse)(nil), // 6: yamcs.protobuf.filetransfer.ListFileTransferServicesResponse
	(*FileTransferCapabilities)(nil),         // 7: yamcs.protobuf.filetransfer.FileTransferCapabilities
	(*ExtraColumnInfo)(nil),                  // 8: yamcs.protobuf.filetransfer.ExtraColumnInfo
	(*FileTransferServiceInfo)(nil),          // 9: yamcs.protobuf.filetransfer.FileTransferServiceInfo
	(*EntityInfo)(nil),                       // 10: yamcs.protobuf.filetransfer.EntityInfo
	(*TransferInfo)(nil),                     // 11: yamcs.protobuf.filetransfer.TransferInfo
	(*CreateTransferRequest)(nil),            // 12: yamcs.protobuf.filetransfer.CreateTransferRequest
	(*PauseTransferRequest)(nil),             // 13: yamcs.protobuf.filetransfer.PauseTransferRequest
	(*CancelTransferRequest)(nil),            // 14: yamcs.protobuf.filetransfer.CancelTransferRequest
	(*ResumeTransferRequest)(nil),            // 15: yamcs.protobuf.filetransfer.ResumeTransferRequest
	(*ListTransfersRequest)(nil),             // 16: yamcs.protobuf.filetransfer.ListTransfersRequest
	(*GetTransferRequest)(nil),               // 17: yamcs.protobuf.filetransfer.GetTransferRequest
	(*ListTransfersResponse)(nil),            // 18: yamcs.protobuf.filetransfer.ListTransfersResponse
	(*SubscribeTransfersRequest)(nil),        // 19: yamcs.protobuf.filetransfer.SubscribeTransfersRequest
	(*ListFilesRequest)(nil),                 // 20: yamcs.protobuf.filetransfer.ListFilesRequest
	(*RemoteFile)(nil),                       // 21: yamcs.protobuf.filetransfer.RemoteFile
	(*ListFilesResponse)(nil),                // 22: yamcs.protobuf.filetransfer.ListFilesResponse
	(*RunFileActionRequest)(nil),             // 23: yamcs.protobuf.filetransfer.RunFileActionRequest
	(*FileTransferOption)(nil),               // 24: yamcs.protobuf.filetransfer.FileTransferOption
	(*FileTransferOption_Value)(nil),         // 25: yamcs.protobuf.filetransfer.FileTransferOption.Value
	(*actions.ActionInfo)(nil),               // 26: yamcs.protobuf.actions.ActionInfo
	(*timestamppb.Timestamp)(nil),            // 27: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                  // 28: google.protobuf.Struct
	(*emptypb.Empty)(nil),                    // 29: google.protobuf.Empty
}
var file_yamcs_protobuf_filetransfer_filetransfer_proto_depIdxs = []int32{
	9,  // 0: yamcs.protobuf.filetransfer.ListFileTransferServicesResponse.services:type_name -> yamcs.protobuf.filetransfer.FileTransferServiceInfo
	8,  // 1: yamcs.protobuf.filetransfer.FileTransferCapabilities.fileListExtraColumns:type_name -> yamcs.protobuf.filetransfer.ExtraColumnInfo
	26, // 2: yamcs.protobuf.filetransfer.FileTransferCapabilities.fileActions:type_name -> yamcs.protobuf.actions.ActionInfo
	10, // 3: yamcs.protobuf.filetransfer.FileTransferServiceInfo.localEntities:type_name -> yamcs.protobuf.filetransfer.EntityInfo
	10, // 4: yamcs.protobuf.filetransfer.FileTransferServiceInfo.remoteEntities:type_name -> yamcs.protobuf.filetransfer.EntityInfo
	7,  // 5: yamcs.protobuf.filetransfer.FileTransferServiceInfo.capabilities:type_name -> yamcs.protobuf.filetransfer.FileTransferCapabilities
	24, // 6: yamcs.protobuf.filetransfer.FileTransferServiceInfo.transferOptions:type_name -> yamcs.protobuf.filetransfer.FileTransferOption
	27, // 7: yamcs.protobuf.filetransfer.TransferInfo.startTime:type_name -> google.protobuf.Timestamp
	1,  // 8: yamcs.protobuf.filetransfer.TransferInfo.state:type_name -> yamcs.protobuf.filetransfer.TransferState
	0,  // 9: yamcs.protobuf.filetransfer.TransferInfo.direction:type_name -> yamcs.protobuf.filetransfer.TransferDirection
	3,  // 10: yamcs.protobuf.filetransfer.TransferInfo.transactionId:type_name -> yamcs.protobuf.filetransfer.TransactionId
	27, // 11: yamcs.protobuf.filetransfer.TransferInfo.creationTime:type_name -> google.protobuf.Timestamp
	10, // 12: yamcs.protobuf.filetransfer.TransferInfo.localEntity:type_name -> yamcs.protobuf.filetransfer.EntityInfo
	10, // 13: yamcs.protobuf.filetransfer.TransferInfo.remoteEntity:type_name -> yamcs.protobuf.filetransfer.EntityInfo
	0,  // 14: yamcs.protobuf.filetransfer.CreateTransferRequest.direction:type_name -> yamcs.protobuf.filetransfer.TransferDirection
	28, // 15: yamcs.protobuf.filetransfer.CreateTransferRequest.options:type_name -> google.protobuf.Struct
	27, // 16: yamcs.protobuf.filetransfer.ListTransfersRequest.start:type_name -> google.protobuf.Timestamp
	27, // 17: yamcs.protobuf.filetransfer.ListTransfersRequest.stop:type_name -> google.protobuf.Timestamp
	1,  // 18: yamcs.protobuf.filetransfer.ListTransfersRequest.state:type_name -> yamcs.protobuf.filetransfer.TransferState
	0,  // 19: yamcs.protobuf.filetransfer.ListTransfersRequest.direction:type_name -> yamcs.protobuf.filetransfer.TransferDirection
	11, // 20: yamcs.protobuf.filetransfer.ListTransfersResponse.transfers:type_name -> yamcs.protobuf.filetransfer.TransferInfo
	28, // 21: yamcs.protobuf.filetransfer.ListFilesRequest.options:type_name -> google.protobuf.Struct
	27, // 22: yamcs.protobuf.filetransfer.RemoteFile.modified:type_name -> google.protobuf.Timestamp
	28, // 23: yamcs.protobuf.filetransfer.RemoteFile.extra:type_name -> google.protobuf.Struct
	21, // 24: yamcs.protobuf.filetransfer.ListFilesResponse.files:type_name -> yamcs.protobuf.filetransfer.RemoteFile
	27, // 25: yamcs.protobuf.filetransfer.ListFilesResponse.listTime:type_name -> google.protobuf.Timestamp
	28, // 26: yamcs.protobuf.filetransfer.RunFileActionRequest.message:type_name -> google.protobuf.Struct
	2,  // 27: yamcs.protobuf.filetransfer.FileTransferOption.type:type_name -> yamcs.protobuf.filetransfer.FileTransferOption.Type
	25, // 28: yamcs.protobuf.filetransfer.FileTransferOption.values:type_name -> yamcs.protobuf.filetransfer.FileTransferOption.Value
	4,  // 29: yamcs.protobuf.filetransfer.FileTransferApi.ListFileTransferServices:input_type -> yamcs.protobuf.filetransfer.ListFileTransferServicesRequest
	5,  // 30: yamcs.protobuf.filetransfer.FileTransferApi.GetFileTransferService:input_type -> yamcs.protobuf.filetransfer.GetFileTransferServiceRequest
	16, // 31: yamcs.protobuf.filetransfer.FileTransferApi.ListTransfers:input_type -> yamcs.protobuf.filetransfer.ListTransfersRequest
	17, // 32: yamcs.protobuf.filetransfer.FileTransferApi.GetTransfer:input_type -> yamcs.protobuf.filetransfer.GetTransferRequest
	12, // 33: yamcs.protobuf.filetransfer.FileTransferApi.CreateTransfer:input_type -> yamcs.protobuf.filetransfer.CreateTransferRequest
	13, // 34: yamcs.protobuf.filetransfer.FileTransferApi.PauseTransfer:input_type -> yamcs.protobuf.filetransfer.PauseTransferRequest
	14, // 35: yamcs.protobuf.filetransfer.FileTransferApi.CancelTransfer:input_type -> yamcs.protobuf.filetransfer.CancelTransferRequest
	15, // 36: yamcs.protobuf.filetransfer.FileTransferApi.ResumeTransfer:input_type -> yamcs.protobuf.filetransfer.ResumeTransferRequest
	19, // 37: yamcs.protobuf.filetransfer.FileTransferApi.SubscribeTransfers:input_type -> yamcs.protobuf.filetransfer.SubscribeTransfersRequest
	19, // 38: yamcs.protobuf.filetransfer.FileTransferApi.SubscribeRemoteFileList:input_type -> yamcs.protobuf.filetransfer.SubscribeTransfersRequest
	20, // 39: yamcs.protobuf.filetransfer.FileTransferApi.FetchFileList:input_type -> yamcs.protobuf.filetransfer.ListFilesRequest
	20, // 40: yamcs.protobuf.filetransfer.FileTransferApi.GetFileList:input_type -> yamcs.protobuf.filetransfer.ListFilesRequest
	23, // 41: yamcs.protobuf.filetransfer.FileTransferApi.RunFileAction:input_type -> yamcs.protobuf.filetransfer.RunFileActionRequest
	6,  // 42: yamcs.protobuf.filetransfer.FileTransferApi.ListFileTransferServices:output_type -> yamcs.protobuf.filetransfer.ListFileTransferServicesResponse
	9,  // 43: yamcs.protobuf.filetransfer.FileTransferApi.GetFileTransferService:output_type -> yamcs.protobuf.filetransfer.FileTransferServiceInfo
	18, // 44: yamcs.protobuf.filetransfer.FileTransferApi.ListTransfers:output_type -> yamcs.protobuf.filetransfer.ListTransfersResponse
	11, // 45: yamcs.protobuf.filetransfer.FileTransferApi.GetTransfer:output_type -> yamcs.protobuf.filetransfer.TransferInfo
	11, // 46: yamcs.protobuf.filetransfer.FileTransferApi.CreateTransfer:output_type -> yamcs.protobuf.filetransfer.TransferInfo
	29, // 47: yamcs.protobuf.filetransfer.FileTransferApi.PauseTransfer:output_type -> google.protobuf.Empty
	29, // 48: yamcs.protobuf.filetransfer.FileTransferApi.CancelTransfer:output_type -> google.protobuf.Empty
	29, // 49: yamcs.protobuf.filetransfer.FileTransferApi.ResumeTransfer:output_type -> google.protobuf.Empty
	11, // 50: yamcs.protobuf.filetransfer.FileTransferApi.SubscribeTransfers:output_type -> yamcs.protobuf.filetransfer.TransferInfo
	22, // 51: yamcs.protobuf.filetransfer.FileTransferApi.SubscribeRemoteFileList:output_type -> yamcs.protobuf.filetransfer.ListFilesResponse
	29, // 52: yamcs.protobuf.filetransfer.FileTransferApi.FetchFileList:output_type -> google.protobuf.Empty
	22, // 53: yamcs.protobuf.filetransfer.FileTransferApi.GetFileList:output_type -> yamcs.protobuf.filetransfer.ListFilesResponse
	28, // 54: yamcs.protobuf.filetransfer.FileTransferApi.RunFileAction:output_type -> google.protobuf.Struct
	42, // [42:55] is the sub-list for method output_type
	29, // [29:42] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_filetransfer_filetransfer_proto_init() }
func file_yamcs_protobuf_filetransfer_filetransfer_proto_init() {
	if File_yamcs_protobuf_filetransfer_filetransfer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDesc), len(file_yamcs_protobuf_filetransfer_filetransfer_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_filetransfer_filetransfer_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_filetransfer_filetransfer_proto_depIdxs,
		EnumInfos:         file_yamcs_protobuf_filetransfer_filetransfer_proto_enumTypes,
		MessageInfos:      file_yamcs_protobuf_filetransfer_filetransfer_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_filetransfer_filetransfer_proto = out.File
	file_yamcs_protobuf_filetransfer_filetransfer_proto_goTypes = nil
	file_yamcs_protobuf_filetransfer_filetransfer_proto_depIdxs = nil
}
