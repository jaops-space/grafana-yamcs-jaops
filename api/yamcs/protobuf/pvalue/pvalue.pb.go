// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/pvalue/pvalue.proto

package pvalue

import (
	protobuf "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf"
	mdb "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf/mdb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// this can also be called validity status
type AcquisitionStatus int32

const (
	// OK!
	AcquisitionStatus_ACQUIRED AcquisitionStatus = 0
	// No value received so far
	AcquisitionStatus_NOT_RECEIVED AcquisitionStatus = 1
	// Some value has been received but is invalid
	AcquisitionStatus_INVALID AcquisitionStatus = 2
	// The parameter is coming from a packet which has not since updated although it should have been
	AcquisitionStatus_EXPIRED AcquisitionStatus = 3
)

// Enum value maps for AcquisitionStatus.
var (
	AcquisitionStatus_name = map[int32]string{
		0: "ACQUIRED",
		1: "NOT_RECEIVED",
		2: "INVALID",
		3: "EXPIRED",
	}
	AcquisitionStatus_value = map[string]int32{
		"ACQUIRED":     0,
		"NOT_RECEIVED": 1,
		"INVALID":      2,
		"EXPIRED":      3,
	}
)

func (x AcquisitionStatus) Enum() *AcquisitionStatus {
	p := new(AcquisitionStatus)
	*p = x
	return p
}

func (x AcquisitionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcquisitionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_pvalue_pvalue_proto_enumTypes[0].Descriptor()
}

func (AcquisitionStatus) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_pvalue_pvalue_proto_enumTypes[0]
}

func (x AcquisitionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AcquisitionStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AcquisitionStatus(num)
	return nil
}

// Deprecated: Use AcquisitionStatus.Descriptor instead.
func (AcquisitionStatus) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP(), []int{0}
}

type MonitoringResult int32

const (
	MonitoringResult_DISABLED  MonitoringResult = 0
	MonitoringResult_IN_LIMITS MonitoringResult = 1
	MonitoringResult_WATCH     MonitoringResult = 7
	MonitoringResult_WARNING   MonitoringResult = 10
	MonitoringResult_DISTRESS  MonitoringResult = 13
	MonitoringResult_CRITICAL  MonitoringResult = 16
	MonitoringResult_SEVERE    MonitoringResult = 19
)

// Enum value maps for MonitoringResult.
var (
	MonitoringResult_name = map[int32]string{
		0:  "DISABLED",
		1:  "IN_LIMITS",
		7:  "WATCH",
		10: "WARNING",
		13: "DISTRESS",
		16: "CRITICAL",
		19: "SEVERE",
	}
	MonitoringResult_value = map[string]int32{
		"DISABLED":  0,
		"IN_LIMITS": 1,
		"WATCH":     7,
		"WARNING":   10,
		"DISTRESS":  13,
		"CRITICAL":  16,
		"SEVERE":    19,
	}
)

func (x MonitoringResult) Enum() *MonitoringResult {
	p := new(MonitoringResult)
	*p = x
	return p
}

func (x MonitoringResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MonitoringResult) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_pvalue_pvalue_proto_enumTypes[1].Descriptor()
}

func (MonitoringResult) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_pvalue_pvalue_proto_enumTypes[1]
}

func (x MonitoringResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MonitoringResult) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MonitoringResult(num)
	return nil
}

// Deprecated: Use MonitoringResult.Descriptor instead.
func (MonitoringResult) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP(), []int{1}
}

type RangeCondition int32

const (
	RangeCondition_LOW  RangeCondition = 0
	RangeCondition_HIGH RangeCondition = 1
)

// Enum value maps for RangeCondition.
var (
	RangeCondition_name = map[int32]string{
		0: "LOW",
		1: "HIGH",
	}
	RangeCondition_value = map[string]int32{
		"LOW":  0,
		"HIGH": 1,
	}
)

func (x RangeCondition) Enum() *RangeCondition {
	p := new(RangeCondition)
	*p = x
	return p
}

func (x RangeCondition) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangeCondition) Descriptor() protoreflect.EnumDescriptor {
	return file_yamcs_protobuf_pvalue_pvalue_proto_enumTypes[2].Descriptor()
}

func (RangeCondition) Type() protoreflect.EnumType {
	return &file_yamcs_protobuf_pvalue_pvalue_proto_enumTypes[2]
}

func (x RangeCondition) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RangeCondition) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RangeCondition(num)
	return nil
}

// Deprecated: Use RangeCondition.Descriptor instead.
func (RangeCondition) EnumDescriptor() ([]byte, []int) {
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP(), []int{2}
}

type ParameterValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parameter identifier
	Id *protobuf.NamedObjectId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Raw value (uncalibrated)
	RawValue *protobuf.Value `protobuf:"bytes,2,opt,name=rawValue" json:"rawValue,omitempty"`
	// Engineering value (calibrated)
	EngValue *protobuf.Value `protobuf:"bytes,3,opt,name=engValue" json:"engValue,omitempty"`
	// Time of Yamcs reception
	AcquisitionTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=acquisitionTime" json:"acquisitionTime,omitempty"`
	// Time of generation (~ packet time)
	GenerationTime    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=generationTime" json:"generationTime,omitempty"`
	AcquisitionStatus *AcquisitionStatus     `protobuf:"varint,6,opt,name=acquisitionStatus,enum=yamcs.protobuf.pvalue.AcquisitionStatus" json:"acquisitionStatus,omitempty"`
	// Deprecated: this field was originally introduced for compatibility
	// with Airbus CGS/CD-MCS system. It was redundant, because when false,
	// the acquisitionStatus is also set to INVALID.
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/pvalue/pvalue.proto.
	ProcessingStatus *bool             `protobuf:"varint,7,opt,name=processingStatus" json:"processingStatus,omitempty"`
	MonitoringResult *MonitoringResult `protobuf:"varint,8,opt,name=monitoringResult,enum=yamcs.protobuf.pvalue.MonitoringResult" json:"monitoringResult,omitempty"`
	RangeCondition   *RangeCondition   `protobuf:"varint,9,opt,name=rangeCondition,enum=yamcs.protobuf.pvalue.RangeCondition" json:"rangeCondition,omitempty"`
	// Context-dependent ranges
	AlarmRange []*mdb.AlarmRange `protobuf:"bytes,25,rep,name=alarmRange" json:"alarmRange,omitempty"`
	// How long (in milliseconds) this parameter value is valid
	// Note that there is an option when subscribing to parameters to get
	// updated when the parameter values expire.
	ExpireMillis *int64 `protobuf:"varint,26,opt,name=expireMillis" json:"expireMillis,omitempty"`
	// When transferring parameters over WebSocket, this value might be used
	// instead of the id above in order to reduce the bandwidth.
	// Note that the id <-> numericId assignment is only valid in the context
	// of a single WebSocket call.
	NumericId     *uint32 `protobuf:"varint,27,opt,name=numericId" json:"numericId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParameterValue) Reset() {
	*x = ParameterValue{}
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterValue) ProtoMessage() {}

func (x *ParameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterValue.ProtoReflect.Descriptor instead.
func (*ParameterValue) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP(), []int{0}
}

func (x *ParameterValue) GetId() *protobuf.NamedObjectId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParameterValue) GetRawValue() *protobuf.Value {
	if x != nil {
		return x.RawValue
	}
	return nil
}

func (x *ParameterValue) GetEngValue() *protobuf.Value {
	if x != nil {
		return x.EngValue
	}
	return nil
}

func (x *ParameterValue) GetAcquisitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AcquisitionTime
	}
	return nil
}

func (x *ParameterValue) GetGenerationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GenerationTime
	}
	return nil
}

func (x *ParameterValue) GetAcquisitionStatus() AcquisitionStatus {
	if x != nil && x.AcquisitionStatus != nil {
		return *x.AcquisitionStatus
	}
	return AcquisitionStatus_ACQUIRED
}

// Deprecated: Marked as deprecated in yamcs/protobuf/pvalue/pvalue.proto.
func (x *ParameterValue) GetProcessingStatus() bool {
	if x != nil && x.ProcessingStatus != nil {
		return *x.ProcessingStatus
	}
	return false
}

func (x *ParameterValue) GetMonitoringResult() MonitoringResult {
	if x != nil && x.MonitoringResult != nil {
		return *x.MonitoringResult
	}
	return MonitoringResult_DISABLED
}

func (x *ParameterValue) GetRangeCondition() RangeCondition {
	if x != nil && x.RangeCondition != nil {
		return *x.RangeCondition
	}
	return RangeCondition_LOW
}

func (x *ParameterValue) GetAlarmRange() []*mdb.AlarmRange {
	if x != nil {
		return x.AlarmRange
	}
	return nil
}

func (x *ParameterValue) GetExpireMillis() int64 {
	if x != nil && x.ExpireMillis != nil {
		return *x.ExpireMillis
	}
	return 0
}

func (x *ParameterValue) GetNumericId() uint32 {
	if x != nil && x.NumericId != nil {
		return *x.NumericId
	}
	return 0
}

// used in the ParameterArchive to store the status flags associated to one parameter value
type ParameterStatus struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AcquisitionStatus *AcquisitionStatus     `protobuf:"varint,1,opt,name=acquisitionStatus,enum=yamcs.protobuf.pvalue.AcquisitionStatus" json:"acquisitionStatus,omitempty"`
	MonitoringResult  *MonitoringResult      `protobuf:"varint,2,opt,name=monitoringResult,enum=yamcs.protobuf.pvalue.MonitoringResult" json:"monitoringResult,omitempty"`
	RangeCondition    *RangeCondition        `protobuf:"varint,3,opt,name=rangeCondition,enum=yamcs.protobuf.pvalue.RangeCondition" json:"rangeCondition,omitempty"`
	// context-dependent ranges
	AlarmRange []*mdb.AlarmRange `protobuf:"bytes,4,rep,name=alarmRange" json:"alarmRange,omitempty"`
	// when the value expires
	ExpireMillis  *int64 `protobuf:"varint,5,opt,name=expireMillis" json:"expireMillis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParameterStatus) Reset() {
	*x = ParameterStatus{}
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterStatus) ProtoMessage() {}

func (x *ParameterStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterStatus.ProtoReflect.Descriptor instead.
func (*ParameterStatus) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP(), []int{1}
}

func (x *ParameterStatus) GetAcquisitionStatus() AcquisitionStatus {
	if x != nil && x.AcquisitionStatus != nil {
		return *x.AcquisitionStatus
	}
	return AcquisitionStatus_ACQUIRED
}

func (x *ParameterStatus) GetMonitoringResult() MonitoringResult {
	if x != nil && x.MonitoringResult != nil {
		return *x.MonitoringResult
	}
	return MonitoringResult_DISABLED
}

func (x *ParameterStatus) GetRangeCondition() RangeCondition {
	if x != nil && x.RangeCondition != nil {
		return *x.RangeCondition
	}
	return RangeCondition_LOW
}

func (x *ParameterStatus) GetAlarmRange() []*mdb.AlarmRange {
	if x != nil {
		return x.AlarmRange
	}
	return nil
}

func (x *ParameterStatus) GetExpireMillis() int64 {
	if x != nil && x.ExpireMillis != nil {
		return *x.ExpireMillis
	}
	return 0
}

type ParameterData struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Parameter []*ParameterValue      `protobuf:"bytes,1,rep,name=parameter" json:"parameter,omitempty"`
	// The next three fields are used by the recorder as unique key to store
	// parameters in "rows" and also by components that provide parameters
	// from external sources. The time should roughly correspond to the parameter
	// time but can be rounded for better efficiency.
	Group          *string `protobuf:"bytes,2,opt,name=group" json:"group,omitempty"`
	GenerationTime *int64  `protobuf:"varint,3,opt,name=generationTime" json:"generationTime,omitempty"`
	SeqNum         *int32  `protobuf:"varint,4,opt,name=seqNum" json:"seqNum,omitempty"`
	// Used when parameter data is delivered as result of subscriptions
	SubscriptionId *int32 `protobuf:"varint,5,opt,name=subscriptionId" json:"subscriptionId,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ParameterData) Reset() {
	*x = ParameterData{}
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterData) ProtoMessage() {}

func (x *ParameterData) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterData.ProtoReflect.Descriptor instead.
func (*ParameterData) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP(), []int{2}
}

func (x *ParameterData) GetParameter() []*ParameterValue {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *ParameterData) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *ParameterData) GetGenerationTime() int64 {
	if x != nil && x.GenerationTime != nil {
		return *x.GenerationTime
	}
	return 0
}

func (x *ParameterData) GetSeqNum() int32 {
	if x != nil && x.SeqNum != nil {
		return *x.SeqNum
	}
	return 0
}

func (x *ParameterData) GetSubscriptionId() int32 {
	if x != nil && x.SubscriptionId != nil {
		return *x.SubscriptionId
	}
	return 0
}

type TimeSeries struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of samples.
	Sample        []*TimeSeries_Sample `protobuf:"bytes,1,rep,name=sample" json:"sample,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeSeries) Reset() {
	*x = TimeSeries{}
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeries) ProtoMessage() {}

func (x *TimeSeries) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeries.ProtoReflect.Descriptor instead.
func (*TimeSeries) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP(), []int{3}
}

func (x *TimeSeries) GetSample() []*TimeSeries_Sample {
	if x != nil {
		return x.Sample
	}
	return nil
}

type Ranges struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Range         []*Ranges_Range        `protobuf:"bytes,1,rep,name=range" json:"range,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ranges) Reset() {
	*x = Ranges{}
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ranges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ranges) ProtoMessage() {}

func (x *Ranges) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ranges.ProtoReflect.Descriptor instead.
func (*Ranges) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP(), []int{4}
}

func (x *Ranges) GetRange() []*Ranges_Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type TimeSeries_Sample struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start time of the sample interval.
	Time *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time" json:"time,omitempty"`
	// Average numeric value during the sample interval.
	Avg *float64 `protobuf:"fixed64,2,opt,name=avg" json:"avg,omitempty"`
	// Minimum numeric value during the sample interval.
	Min *float64 `protobuf:"fixed64,3,opt,name=min" json:"min,omitempty"`
	// Maximum numeric value during the sample interval.
	Max *float64 `protobuf:"fixed64,4,opt,name=max" json:"max,omitempty"`
	// Number of samples during the sample interval.
	// If this value is zero, it indicates a gap.
	N *int32 `protobuf:"varint,5,opt,name=n" json:"n,omitempty"`
	// Generation time of the “min“ value.
	MinTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=minTime" json:"minTime,omitempty"`
	// Generation time of the “max“ value.
	MaxTime       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=maxTime" json:"maxTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeSeries_Sample) Reset() {
	*x = TimeSeries_Sample{}
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeSeries_Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSeries_Sample) ProtoMessage() {}

func (x *TimeSeries_Sample) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSeries_Sample.ProtoReflect.Descriptor instead.
func (*TimeSeries_Sample) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TimeSeries_Sample) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TimeSeries_Sample) GetAvg() float64 {
	if x != nil && x.Avg != nil {
		return *x.Avg
	}
	return 0
}

func (x *TimeSeries_Sample) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *TimeSeries_Sample) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *TimeSeries_Sample) GetN() int32 {
	if x != nil && x.N != nil {
		return *x.N
	}
	return 0
}

func (x *TimeSeries_Sample) GetMinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MinTime
	}
	return nil
}

func (x *TimeSeries_Sample) GetMaxTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MaxTime
	}
	return nil
}

type Ranges_Range struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Generation time of a parameter value.
	Start *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start" json:"start,omitempty"`
	// If the value changes, “stop“ is the generation time of the new value.
	// If the parameter expires or the “maxGap“ has been set, “stop“ is
	// the generation time of the last value plus the expiration time or the
	// “maxGap“.
	Stop *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=stop" json:"stop,omitempty"`
	// Number of parameter values received in the interval.
	// This is the total count of parameters in the interval.
	// If the count does not match the sum(counts), it means that not all the values have been sent
	Count *int32 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	// Since Yamcs 5.4.1 there is a new parameter minRange in the GetParameterRangesRequest which allows
	// specifying the minimum length of the range returned.
	// Practically we guarantee that stop-start >= minRange (mind the leap seconds!).
	//
	// If the minRange parameter is set, the returning ranges may include multiple values.
	// These are given by the engValues and counts below.
	//
	// Since Yamcs 5.4.2 there is a new parameter maxValues which allows to limit the number
	// of distinct values returned across all the ranges.
	// In order to not return ranges containing no value, each range will have at least one value even if
	// that will cause the total number of range values returned to exceed the maxValues parameter
	//
	// The counts correspond one to one to the engValues, the two arrays will always have the same length.
	EngValues []*protobuf.Value `protobuf:"bytes,5,rep,name=engValues" json:"engValues,omitempty"`
	// The counts correspond one to one to the engValues
	Counts        []int32 `protobuf:"varint,6,rep,name=counts" json:"counts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ranges_Range) Reset() {
	*x = Ranges_Range{}
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ranges_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ranges_Range) ProtoMessage() {}

func (x *Ranges_Range) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ranges_Range.ProtoReflect.Descriptor instead.
func (*Ranges_Range) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Ranges_Range) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Ranges_Range) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *Ranges_Range) GetCount() int32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *Ranges_Range) GetEngValues() []*protobuf.Value {
	if x != nil {
		return x.EngValues
	}
	return nil
}

func (x *Ranges_Range) GetCounts() []int32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

var File_yamcs_protobuf_pvalue_pvalue_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_pvalue_pvalue_proto_rawDesc = string([]byte{
	0x0a, 0x22, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1a, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x6d, 0x64, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x05, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x53, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x49, 0x64, 0x22, 0xf1, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a, 0x11, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x11, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x53, 0x0a, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xb9, 0x02, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x1a, 0xe8, 0x01, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6e, 0x12,
	0x34, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6d, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x06,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x1a, 0xcc, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x65, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2a, 0x4d, 0x0a, 0x11, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x6f, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x57, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43,
	0x41, 0x4c, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x56, 0x45, 0x52, 0x45, 0x10, 0x13,
	0x2a, 0x23, 0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x49, 0x47, 0x48, 0x10, 0x01, 0x42, 0x5a, 0x0a, 0x12, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5a, 0x44, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2f, 0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2d, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x76, 0x61, 0x6c, 0x75,
	0x65,
})

var (
	file_yamcs_protobuf_pvalue_pvalue_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_pvalue_pvalue_proto_rawDescData []byte
)

func file_yamcs_protobuf_pvalue_pvalue_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_pvalue_pvalue_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_pvalue_pvalue_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_pvalue_pvalue_proto_rawDesc), len(file_yamcs_protobuf_pvalue_pvalue_proto_rawDesc)))
	})
	return file_yamcs_protobuf_pvalue_pvalue_proto_rawDescData
}

var file_yamcs_protobuf_pvalue_pvalue_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_yamcs_protobuf_pvalue_pvalue_proto_goTypes = []any{
	(AcquisitionStatus)(0),         // 0: yamcs.protobuf.pvalue.AcquisitionStatus
	(MonitoringResult)(0),          // 1: yamcs.protobuf.pvalue.MonitoringResult
	(RangeCondition)(0),            // 2: yamcs.protobuf.pvalue.RangeCondition
	(*ParameterValue)(nil),         // 3: yamcs.protobuf.pvalue.ParameterValue
	(*ParameterStatus)(nil),        // 4: yamcs.protobuf.pvalue.ParameterStatus
	(*ParameterData)(nil),          // 5: yamcs.protobuf.pvalue.ParameterData
	(*TimeSeries)(nil),             // 6: yamcs.protobuf.pvalue.TimeSeries
	(*Ranges)(nil),                 // 7: yamcs.protobuf.pvalue.Ranges
	(*TimeSeries_Sample)(nil),      // 8: yamcs.protobuf.pvalue.TimeSeries.Sample
	(*Ranges_Range)(nil),           // 9: yamcs.protobuf.pvalue.Ranges.Range
	(*protobuf.NamedObjectId)(nil), // 10: yamcs.protobuf.NamedObjectId
	(*protobuf.Value)(nil),         // 11: yamcs.protobuf.Value
	(*timestamppb.Timestamp)(nil),  // 12: google.protobuf.Timestamp
	(*mdb.AlarmRange)(nil),         // 13: yamcs.protobuf.mdb.AlarmRange
}
var file_yamcs_protobuf_pvalue_pvalue_proto_depIdxs = []int32{
	10, // 0: yamcs.protobuf.pvalue.ParameterValue.id:type_name -> yamcs.protobuf.NamedObjectId
	11, // 1: yamcs.protobuf.pvalue.ParameterValue.rawValue:type_name -> yamcs.protobuf.Value
	11, // 2: yamcs.protobuf.pvalue.ParameterValue.engValue:type_name -> yamcs.protobuf.Value
	12, // 3: yamcs.protobuf.pvalue.ParameterValue.acquisitionTime:type_name -> google.protobuf.Timestamp
	12, // 4: yamcs.protobuf.pvalue.ParameterValue.generationTime:type_name -> google.protobuf.Timestamp
	0,  // 5: yamcs.protobuf.pvalue.ParameterValue.acquisitionStatus:type_name -> yamcs.protobuf.pvalue.AcquisitionStatus
	1,  // 6: yamcs.protobuf.pvalue.ParameterValue.monitoringResult:type_name -> yamcs.protobuf.pvalue.MonitoringResult
	2,  // 7: yamcs.protobuf.pvalue.ParameterValue.rangeCondition:type_name -> yamcs.protobuf.pvalue.RangeCondition
	13, // 8: yamcs.protobuf.pvalue.ParameterValue.alarmRange:type_name -> yamcs.protobuf.mdb.AlarmRange
	0,  // 9: yamcs.protobuf.pvalue.ParameterStatus.acquisitionStatus:type_name -> yamcs.protobuf.pvalue.AcquisitionStatus
	1,  // 10: yamcs.protobuf.pvalue.ParameterStatus.monitoringResult:type_name -> yamcs.protobuf.pvalue.MonitoringResult
	2,  // 11: yamcs.protobuf.pvalue.ParameterStatus.rangeCondition:type_name -> yamcs.protobuf.pvalue.RangeCondition
	13, // 12: yamcs.protobuf.pvalue.ParameterStatus.alarmRange:type_name -> yamcs.protobuf.mdb.AlarmRange
	3,  // 13: yamcs.protobuf.pvalue.ParameterData.parameter:type_name -> yamcs.protobuf.pvalue.ParameterValue
	8,  // 14: yamcs.protobuf.pvalue.TimeSeries.sample:type_name -> yamcs.protobuf.pvalue.TimeSeries.Sample
	9,  // 15: yamcs.protobuf.pvalue.Ranges.range:type_name -> yamcs.protobuf.pvalue.Ranges.Range
	12, // 16: yamcs.protobuf.pvalue.TimeSeries.Sample.time:type_name -> google.protobuf.Timestamp
	12, // 17: yamcs.protobuf.pvalue.TimeSeries.Sample.minTime:type_name -> google.protobuf.Timestamp
	12, // 18: yamcs.protobuf.pvalue.TimeSeries.Sample.maxTime:type_name -> google.protobuf.Timestamp
	12, // 19: yamcs.protobuf.pvalue.Ranges.Range.start:type_name -> google.protobuf.Timestamp
	12, // 20: yamcs.protobuf.pvalue.Ranges.Range.stop:type_name -> google.protobuf.Timestamp
	11, // 21: yamcs.protobuf.pvalue.Ranges.Range.engValues:type_name -> yamcs.protobuf.Value
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_pvalue_pvalue_proto_init() }
func file_yamcs_protobuf_pvalue_pvalue_proto_init() {
	if File_yamcs_protobuf_pvalue_pvalue_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_pvalue_pvalue_proto_rawDesc), len(file_yamcs_protobuf_pvalue_pvalue_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yamcs_protobuf_pvalue_pvalue_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_pvalue_pvalue_proto_depIdxs,
		EnumInfos:         file_yamcs_protobuf_pvalue_pvalue_proto_enumTypes,
		MessageInfos:      file_yamcs_protobuf_pvalue_pvalue_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_pvalue_pvalue_proto = out.File
	file_yamcs_protobuf_pvalue_pvalue_proto_goTypes = nil
	file_yamcs_protobuf_pvalue_pvalue_proto_depIdxs = nil
}
