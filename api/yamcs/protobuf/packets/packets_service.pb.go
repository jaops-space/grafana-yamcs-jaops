// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: yamcs/protobuf/packets/packets_service.proto

package packets

import (
	api "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/api"
	protobuf "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf"
	mdb "github.com/jaops-space/grafana-yamcs-jaops/api/yamcs/protobuf/mdb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListPacketNamesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance      *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPacketNamesRequest) Reset() {
	*x = ListPacketNamesRequest{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPacketNamesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPacketNamesRequest) ProtoMessage() {}

func (x *ListPacketNamesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPacketNamesRequest.ProtoReflect.Descriptor instead.
func (*ListPacketNamesRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListPacketNamesRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

type ListPacketNamesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Known packet names.
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/packets/packets_service.proto.
	Name []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	// Known packet names.
	Packets []string `protobuf:"bytes,2,rep,name=packets" json:"packets,omitempty"`
	// Known link names.
	Links         []string `protobuf:"bytes,3,rep,name=links" json:"links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPacketNamesResponse) Reset() {
	*x = ListPacketNamesResponse{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPacketNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPacketNamesResponse) ProtoMessage() {}

func (x *ListPacketNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPacketNamesResponse.ProtoReflect.Descriptor instead.
func (*ListPacketNamesResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Marked as deprecated in yamcs/protobuf/packets/packets_service.proto.
func (x *ListPacketNamesResponse) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListPacketNamesResponse) GetPackets() []string {
	if x != nil {
		return x.Packets
	}
	return nil
}

func (x *ListPacketNamesResponse) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

type ListPacketsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// The zero-based row number at which to start outputting results.
	// Default: “0“
	//
	// This option is deprecated and will be removed in a later version.
	// Use the returned continuationToken instead.
	//
	// Deprecated: Marked as deprecated in yamcs/protobuf/packets/packets_service.proto.
	Pos *int64 `protobuf:"varint,2,opt,name=pos" json:"pos,omitempty"`
	// The maximum number of returned records per page. Choose this value too high
	// and you risk hitting the maximum response size limit enforced by the server.
	// Default: “100“
	Limit *int32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	// The order of the returned results. Can be either “asc“ or “desc“. Default: “desc“
	Order *string `protobuf:"bytes,4,opt,name=order" json:"order,omitempty"`
	// The archived name of the packets. Names must match exactly.
	Name []string `protobuf:"bytes,5,rep,name=name" json:"name,omitempty"`
	// Filter by the link where the packet was received from.
	Link *string `protobuf:"bytes,9,opt,name=link" json:"link,omitempty"`
	// Continuation token returned by a previous page response.
	Next *string `protobuf:"bytes,6,opt,name=next" json:"next,omitempty"`
	// Filter the lower bound of the packet's generation time. Specify a date
	// string in ISO 8601 format. This bound is inclusive.
	Start *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the packet's generation time. Specify a date
	// string in ISO 8601 format. This bound is exclusive.
	Stop          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=stop" json:"stop,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPacketsRequest) Reset() {
	*x = ListPacketsRequest{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPacketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPacketsRequest) ProtoMessage() {}

func (x *ListPacketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPacketsRequest.ProtoReflect.Descriptor instead.
func (*ListPacketsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListPacketsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

// Deprecated: Marked as deprecated in yamcs/protobuf/packets/packets_service.proto.
func (x *ListPacketsRequest) GetPos() int64 {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return 0
}

func (x *ListPacketsRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListPacketsRequest) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

func (x *ListPacketsRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ListPacketsRequest) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *ListPacketsRequest) GetNext() string {
	if x != nil && x.Next != nil {
		return *x.Next
	}
	return ""
}

func (x *ListPacketsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListPacketsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

type ListPacketsResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Packet []*TmPacketData        `protobuf:"bytes,1,rep,name=packet" json:"packet,omitempty"`
	// Token indicating the response is only partial. More results can then
	// be obtained by performing the same request (including all original
	// query parameters) and setting the “next“ parameter to this token.
	ContinuationToken *string `protobuf:"bytes,2,opt,name=continuationToken" json:"continuationToken,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListPacketsResponse) Reset() {
	*x = ListPacketsResponse{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPacketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPacketsResponse) ProtoMessage() {}

func (x *ListPacketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPacketsResponse.ProtoReflect.Descriptor instead.
func (*ListPacketsResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListPacketsResponse) GetPacket() []*TmPacketData {
	if x != nil {
		return x.Packet
	}
	return nil
}

func (x *ListPacketsResponse) GetContinuationToken() string {
	if x != nil && x.ContinuationToken != nil {
		return *x.ContinuationToken
	}
	return ""
}

type GetPacketRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Stored packet name
	Pname *string `protobuf:"bytes,4,opt,name=pname" json:"pname,omitempty"`
	// An exact match of the packet's generation time in
	// ISO 8601 format.
	Gentime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=gentime" json:"gentime,omitempty"`
	// Yamcs-specific archive distinguisher
	Seqnum        *int32 `protobuf:"varint,3,opt,name=seqnum" json:"seqnum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPacketRequest) Reset() {
	*x = GetPacketRequest{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPacketRequest) ProtoMessage() {}

func (x *GetPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPacketRequest.ProtoReflect.Descriptor instead.
func (*GetPacketRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetPacketRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *GetPacketRequest) GetPname() string {
	if x != nil && x.Pname != nil {
		return *x.Pname
	}
	return ""
}

func (x *GetPacketRequest) GetGentime() *timestamppb.Timestamp {
	if x != nil {
		return x.Gentime
	}
	return nil
}

func (x *GetPacketRequest) GetSeqnum() int32 {
	if x != nil && x.Seqnum != nil {
		return *x.Seqnum
	}
	return 0
}

type StreamPacketsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance      *string                `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	Stop          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	Name          []string               `protobuf:"bytes,4,rep,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPacketsRequest) Reset() {
	*x = StreamPacketsRequest{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPacketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPacketsRequest) ProtoMessage() {}

func (x *StreamPacketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPacketsRequest.ProtoReflect.Descriptor instead.
func (*StreamPacketsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{5}
}

func (x *StreamPacketsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *StreamPacketsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *StreamPacketsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *StreamPacketsRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type ExtractPacketRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Stored packet name
	Pname *string `protobuf:"bytes,4,opt,name=pname" json:"pname,omitempty"`
	// An exact match of the packet's generation time in
	// ISO 8601 format.
	Gentime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=gentime" json:"gentime,omitempty"`
	// Yamcs-specific archive distinguisher
	Seqnum        *int32 `protobuf:"varint,3,opt,name=seqnum" json:"seqnum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractPacketRequest) Reset() {
	*x = ExtractPacketRequest{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractPacketRequest) ProtoMessage() {}

func (x *ExtractPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractPacketRequest.ProtoReflect.Descriptor instead.
func (*ExtractPacketRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{6}
}

func (x *ExtractPacketRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ExtractPacketRequest) GetPname() string {
	if x != nil && x.Pname != nil {
		return *x.Pname
	}
	return ""
}

func (x *ExtractPacketRequest) GetGentime() *timestamppb.Timestamp {
	if x != nil {
		return x.Gentime
	}
	return nil
}

func (x *ExtractPacketRequest) GetSeqnum() int32 {
	if x != nil && x.Seqnum != nil {
		return *x.Seqnum
	}
	return 0
}

type ExtractPacketResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Packet name
	PacketName *string `protobuf:"bytes,1,opt,name=packetName" json:"packetName,omitempty"`
	// Contained entries
	ParameterValues []*ExtractedParameterValue `protobuf:"bytes,2,rep,name=parameterValues" json:"parameterValues,omitempty"`
	// Messages generated during packet extraction
	Messages      []string `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractPacketResponse) Reset() {
	*x = ExtractPacketResponse{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractPacketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractPacketResponse) ProtoMessage() {}

func (x *ExtractPacketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractPacketResponse.ProtoReflect.Descriptor instead.
func (*ExtractPacketResponse) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{7}
}

func (x *ExtractPacketResponse) GetPacketName() string {
	if x != nil && x.PacketName != nil {
		return *x.PacketName
	}
	return ""
}

func (x *ExtractPacketResponse) GetParameterValues() []*ExtractedParameterValue {
	if x != nil {
		return x.ParameterValues
	}
	return nil
}

func (x *ExtractPacketResponse) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Contents of a container, can be either a parameter entry, or
// a nested container entry.
type ExtractedParameterValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Qualified name of the parameter
	Parameter *mdb.ParameterInfo `protobuf:"bytes,1,opt,name=parameter" json:"parameter,omitempty"`
	// Qualified name of the container that defines this
	// specific entry.
	EntryContainer *mdb.ContainerInfo `protobuf:"bytes,2,opt,name=entryContainer" json:"entryContainer,omitempty"`
	// Absolute location in bits, within the full packet
	Location *int32 `protobuf:"varint,3,opt,name=location" json:"location,omitempty"`
	// Bit length
	Size *int32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	// Raw value
	RawValue *protobuf.Value `protobuf:"bytes,5,opt,name=rawValue" json:"rawValue,omitempty"`
	// Engineering value
	EngValue      *protobuf.Value `protobuf:"bytes,6,opt,name=engValue" json:"engValue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtractedParameterValue) Reset() {
	*x = ExtractedParameterValue{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtractedParameterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtractedParameterValue) ProtoMessage() {}

func (x *ExtractedParameterValue) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtractedParameterValue.ProtoReflect.Descriptor instead.
func (*ExtractedParameterValue) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{8}
}

func (x *ExtractedParameterValue) GetParameter() *mdb.ParameterInfo {
	if x != nil {
		return x.Parameter
	}
	return nil
}

func (x *ExtractedParameterValue) GetEntryContainer() *mdb.ContainerInfo {
	if x != nil {
		return x.EntryContainer
	}
	return nil
}

func (x *ExtractedParameterValue) GetLocation() int32 {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return 0
}

func (x *ExtractedParameterValue) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *ExtractedParameterValue) GetRawValue() *protobuf.Value {
	if x != nil {
		return x.RawValue
	}
	return nil
}

func (x *ExtractedParameterValue) GetEngValue() *protobuf.Value {
	if x != nil {
		return x.EngValue
	}
	return nil
}

type ExportPacketRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Stored packet name
	Pname *string `protobuf:"bytes,4,opt,name=pname" json:"pname,omitempty"`
	// An exact match of the packet's generation time in
	// ISO 8601 format.
	Gentime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=gentime" json:"gentime,omitempty"`
	// Yamcs-specific archive distinguisher
	Seqnum        *int32 `protobuf:"varint,3,opt,name=seqnum" json:"seqnum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportPacketRequest) Reset() {
	*x = ExportPacketRequest{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportPacketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPacketRequest) ProtoMessage() {}

func (x *ExportPacketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPacketRequest.ProtoReflect.Descriptor instead.
func (*ExportPacketRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{9}
}

func (x *ExportPacketRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ExportPacketRequest) GetPname() string {
	if x != nil && x.Pname != nil {
		return *x.Pname
	}
	return ""
}

func (x *ExportPacketRequest) GetGentime() *timestamppb.Timestamp {
	if x != nil {
		return x.Gentime
	}
	return nil
}

func (x *ExportPacketRequest) GetSeqnum() int32 {
	if x != nil && x.Seqnum != nil {
		return *x.Seqnum
	}
	return 0
}

type ExportPacketsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Filter the lower bound of the packet's generation time. Specify a date
	// string in ISO 8601 format. This bound is inclusive.
	Start *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start" json:"start,omitempty"`
	// Filter the upper bound of the packet's generation time. Specify a date
	// string in ISO 8601 format. This bound is exclusive.
	Stop *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stop" json:"stop,omitempty"`
	// The archived name of the packets. Names must match exactly.
	Name          []string `protobuf:"bytes,4,rep,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportPacketsRequest) Reset() {
	*x = ExportPacketsRequest{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportPacketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPacketsRequest) ProtoMessage() {}

func (x *ExportPacketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPacketsRequest.ProtoReflect.Descriptor instead.
func (*ExportPacketsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{10}
}

func (x *ExportPacketsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *ExportPacketsRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ExportPacketsRequest) GetStop() *timestamppb.Timestamp {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *ExportPacketsRequest) GetName() []string {
	if x != nil {
		return x.Name
	}
	return nil
}

type SubscribePacketsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Stream name. This is mutually exclusive with the field “processor“.
	Stream *string `protobuf:"bytes,2,opt,name=stream" json:"stream,omitempty"`
	// Processor name. This is mutually exclusive with the field “stream“.
	Processor     *string `protobuf:"bytes,3,opt,name=processor" json:"processor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribePacketsRequest) Reset() {
	*x = SubscribePacketsRequest{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribePacketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePacketsRequest) ProtoMessage() {}

func (x *SubscribePacketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePacketsRequest.ProtoReflect.Descriptor instead.
func (*SubscribePacketsRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{11}
}

func (x *SubscribePacketsRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribePacketsRequest) GetStream() string {
	if x != nil && x.Stream != nil {
		return *x.Stream
	}
	return ""
}

func (x *SubscribePacketsRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

type SubscribeContainersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Yamcs instance name.
	Instance *string `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	// Processor name.
	Processor *string `protobuf:"bytes,2,opt,name=processor" json:"processor,omitempty"`
	// Container names to subscribe to.
	Names         []string `protobuf:"bytes,3,rep,name=names" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeContainersRequest) Reset() {
	*x = SubscribeContainersRequest{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeContainersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeContainersRequest) ProtoMessage() {}

func (x *SubscribeContainersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeContainersRequest.ProtoReflect.Descriptor instead.
func (*SubscribeContainersRequest) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{12}
}

func (x *SubscribeContainersRequest) GetInstance() string {
	if x != nil && x.Instance != nil {
		return *x.Instance
	}
	return ""
}

func (x *SubscribeContainersRequest) GetProcessor() string {
	if x != nil && x.Processor != nil {
		return *x.Processor
	}
	return ""
}

func (x *SubscribeContainersRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type ContainerData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Container name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// When the container's packet was generated (packet time)
	GenerationTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=generationTime" json:"generationTime,omitempty"`
	// Whent the container's packet was received by Yamcs
	ReceptionTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=receptionTime" json:"receptionTime,omitempty"`
	// Container bytes
	Binary []byte `protobuf:"bytes,4,opt,name=binary" json:"binary,omitempty"`
	// Sequence count - it is generated by the link when the container is injected into Yamcs.
	// In case this is part of a sub-container, the sequence count is the one from the encompassing container
	SeqCount      *uint32 `protobuf:"varint,5,opt,name=seqCount" json:"seqCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerData) Reset() {
	*x = ContainerData{}
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerData) ProtoMessage() {}

func (x *ContainerData) ProtoReflect() protoreflect.Message {
	mi := &file_yamcs_protobuf_packets_packets_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerData.ProtoReflect.Descriptor instead.
func (*ContainerData) Descriptor() ([]byte, []int) {
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP(), []int{13}
}

func (x *ContainerData) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContainerData) GetGenerationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GenerationTime
	}
	return nil
}

func (x *ContainerData) GetReceptionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceptionTime
	}
	return nil
}

func (x *ContainerData) GetBinary() []byte {
	if x != nil {
		return x.Binary
	}
	return nil
}

func (x *ContainerData) GetSeqCount() uint32 {
	if x != nil && x.SeqCount != nil {
		return *x.SeqCount
	}
	return 0
}

var File_yamcs_protobuf_packets_packets_service_proto protoreflect.FileDescriptor

var file_yamcs_protobuf_packets_packets_service_proto_rawDesc = string([]byte{
	0x0a, 0x2c, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x64, 0x62, 0x2f, 0x6d,
	0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x61, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x6d, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x92,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x71, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71,
	0x6e, 0x75, 0x6d, 0x22, 0xa8, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x96,
	0x01, 0x0a, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x67, 0x65, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x22, 0xae, 0x01, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x59, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x79, 0x61, 0x6d,
	0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xbb, 0x02, 0x0a, 0x17, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x31, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x61, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x67,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x22, 0xa8,
	0x01, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x17, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x22, 0x6c, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0x93, 0x0c, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x41, 0x70, 0x69, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x8a, 0x92, 0x03, 0x26, 0x0a, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x8a,
	0x92, 0x03, 0x21, 0x0a, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0xd5, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x28, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x78, 0x8a, 0x92, 0x03, 0x74, 0x5a, 0x36, 0x30, 0x01, 0x0a, 0x32, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x67,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x7d,
	0x0a, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x7d, 0x12, 0xf8, 0x01, 0x0a,
	0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2c,
	0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x89, 0x01, 0x8a, 0x92,
	0x03, 0x84, 0x01, 0x5a, 0x3e, 0x30, 0x01, 0x0a, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d,
	0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x7d, 0x3a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x0a, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x67, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x7d, 0x3a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x9c, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x54, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x35, 0x8a,
	0x92, 0x03, 0x31, 0x3a, 0x01, 0x2a, 0x1a, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x30, 0x01, 0x12, 0xda, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2b, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x87, 0x01, 0x8a, 0x92, 0x03, 0x82,
	0x01, 0x5a, 0x3d, 0x30, 0x01, 0x0a, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x7d,
	0x2f, 0x7b, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x7d, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x0a, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x67, 0x65, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x73, 0x65, 0x71, 0x6e, 0x75, 0x6d, 0x7d, 0x3a, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x48, 0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x2b, 0x8a, 0x92, 0x03, 0x27, 0x0a, 0x25,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x7b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x7d, 0x3a, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x79,
	0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x0d, 0xda, 0x92, 0x03, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x30, 0x01, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x32, 0x2e, 0x79, 0x61,
	0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x10, 0xda, 0x92, 0x03, 0x0c, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x30, 0x01, 0x42, 0x72, 0x0a, 0x12, 0x6f, 0x72,
	0x67, 0x2e, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x42, 0x13, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6f, 0x70, 0x73, 0x2d, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f,
	0x67, 0x72, 0x61, 0x66, 0x61, 0x6e, 0x61, 0x2d, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2d, 0x6a, 0x61,
	0x6f, 0x70, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x79, 0x61, 0x6d, 0x63, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
})

var (
	file_yamcs_protobuf_packets_packets_service_proto_rawDescOnce sync.Once
	file_yamcs_protobuf_packets_packets_service_proto_rawDescData []byte
)

func file_yamcs_protobuf_packets_packets_service_proto_rawDescGZIP() []byte {
	file_yamcs_protobuf_packets_packets_service_proto_rawDescOnce.Do(func() {
		file_yamcs_protobuf_packets_packets_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_packets_packets_service_proto_rawDesc), len(file_yamcs_protobuf_packets_packets_service_proto_rawDesc)))
	})
	return file_yamcs_protobuf_packets_packets_service_proto_rawDescData
}

var file_yamcs_protobuf_packets_packets_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_yamcs_protobuf_packets_packets_service_proto_goTypes = []any{
	(*ListPacketNamesRequest)(nil),     // 0: yamcs.protobuf.packets.ListPacketNamesRequest
	(*ListPacketNamesResponse)(nil),    // 1: yamcs.protobuf.packets.ListPacketNamesResponse
	(*ListPacketsRequest)(nil),         // 2: yamcs.protobuf.packets.ListPacketsRequest
	(*ListPacketsResponse)(nil),        // 3: yamcs.protobuf.packets.ListPacketsResponse
	(*GetPacketRequest)(nil),           // 4: yamcs.protobuf.packets.GetPacketRequest
	(*StreamPacketsRequest)(nil),       // 5: yamcs.protobuf.packets.StreamPacketsRequest
	(*ExtractPacketRequest)(nil),       // 6: yamcs.protobuf.packets.ExtractPacketRequest
	(*ExtractPacketResponse)(nil),      // 7: yamcs.protobuf.packets.ExtractPacketResponse
	(*ExtractedParameterValue)(nil),    // 8: yamcs.protobuf.packets.ExtractedParameterValue
	(*ExportPacketRequest)(nil),        // 9: yamcs.protobuf.packets.ExportPacketRequest
	(*ExportPacketsRequest)(nil),       // 10: yamcs.protobuf.packets.ExportPacketsRequest
	(*SubscribePacketsRequest)(nil),    // 11: yamcs.protobuf.packets.SubscribePacketsRequest
	(*SubscribeContainersRequest)(nil), // 12: yamcs.protobuf.packets.SubscribeContainersRequest
	(*ContainerData)(nil),              // 13: yamcs.protobuf.packets.ContainerData
	(*timestamppb.Timestamp)(nil),      // 14: google.protobuf.Timestamp
	(*TmPacketData)(nil),               // 15: yamcs.protobuf.packets.TmPacketData
	(*mdb.ParameterInfo)(nil),          // 16: yamcs.protobuf.mdb.ParameterInfo
	(*mdb.ContainerInfo)(nil),          // 17: yamcs.protobuf.mdb.ContainerInfo
	(*protobuf.Value)(nil),             // 18: yamcs.protobuf.Value
	(*api.HttpBody)(nil),               // 19: yamcs.api.HttpBody
}
var file_yamcs_protobuf_packets_packets_service_proto_depIdxs = []int32{
	14, // 0: yamcs.protobuf.packets.ListPacketsRequest.start:type_name -> google.protobuf.Timestamp
	14, // 1: yamcs.protobuf.packets.ListPacketsRequest.stop:type_name -> google.protobuf.Timestamp
	15, // 2: yamcs.protobuf.packets.ListPacketsResponse.packet:type_name -> yamcs.protobuf.packets.TmPacketData
	14, // 3: yamcs.protobuf.packets.GetPacketRequest.gentime:type_name -> google.protobuf.Timestamp
	14, // 4: yamcs.protobuf.packets.StreamPacketsRequest.start:type_name -> google.protobuf.Timestamp
	14, // 5: yamcs.protobuf.packets.StreamPacketsRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 6: yamcs.protobuf.packets.ExtractPacketRequest.gentime:type_name -> google.protobuf.Timestamp
	8,  // 7: yamcs.protobuf.packets.ExtractPacketResponse.parameterValues:type_name -> yamcs.protobuf.packets.ExtractedParameterValue
	16, // 8: yamcs.protobuf.packets.ExtractedParameterValue.parameter:type_name -> yamcs.protobuf.mdb.ParameterInfo
	17, // 9: yamcs.protobuf.packets.ExtractedParameterValue.entryContainer:type_name -> yamcs.protobuf.mdb.ContainerInfo
	18, // 10: yamcs.protobuf.packets.ExtractedParameterValue.rawValue:type_name -> yamcs.protobuf.Value
	18, // 11: yamcs.protobuf.packets.ExtractedParameterValue.engValue:type_name -> yamcs.protobuf.Value
	14, // 12: yamcs.protobuf.packets.ExportPacketRequest.gentime:type_name -> google.protobuf.Timestamp
	14, // 13: yamcs.protobuf.packets.ExportPacketsRequest.start:type_name -> google.protobuf.Timestamp
	14, // 14: yamcs.protobuf.packets.ExportPacketsRequest.stop:type_name -> google.protobuf.Timestamp
	14, // 15: yamcs.protobuf.packets.ContainerData.generationTime:type_name -> google.protobuf.Timestamp
	14, // 16: yamcs.protobuf.packets.ContainerData.receptionTime:type_name -> google.protobuf.Timestamp
	0,  // 17: yamcs.protobuf.packets.PacketsApi.ListPacketNames:input_type -> yamcs.protobuf.packets.ListPacketNamesRequest
	2,  // 18: yamcs.protobuf.packets.PacketsApi.ListPackets:input_type -> yamcs.protobuf.packets.ListPacketsRequest
	4,  // 19: yamcs.protobuf.packets.PacketsApi.GetPacket:input_type -> yamcs.protobuf.packets.GetPacketRequest
	6,  // 20: yamcs.protobuf.packets.PacketsApi.ExtractPacket:input_type -> yamcs.protobuf.packets.ExtractPacketRequest
	5,  // 21: yamcs.protobuf.packets.PacketsApi.StreamPackets:input_type -> yamcs.protobuf.packets.StreamPacketsRequest
	9,  // 22: yamcs.protobuf.packets.PacketsApi.ExportPacket:input_type -> yamcs.protobuf.packets.ExportPacketRequest
	10, // 23: yamcs.protobuf.packets.PacketsApi.ExportPackets:input_type -> yamcs.protobuf.packets.ExportPacketsRequest
	11, // 24: yamcs.protobuf.packets.PacketsApi.SubscribePackets:input_type -> yamcs.protobuf.packets.SubscribePacketsRequest
	12, // 25: yamcs.protobuf.packets.PacketsApi.SubscribeContainers:input_type -> yamcs.protobuf.packets.SubscribeContainersRequest
	1,  // 26: yamcs.protobuf.packets.PacketsApi.ListPacketNames:output_type -> yamcs.protobuf.packets.ListPacketNamesResponse
	3,  // 27: yamcs.protobuf.packets.PacketsApi.ListPackets:output_type -> yamcs.protobuf.packets.ListPacketsResponse
	15, // 28: yamcs.protobuf.packets.PacketsApi.GetPacket:output_type -> yamcs.protobuf.packets.TmPacketData
	7,  // 29: yamcs.protobuf.packets.PacketsApi.ExtractPacket:output_type -> yamcs.protobuf.packets.ExtractPacketResponse
	15, // 30: yamcs.protobuf.packets.PacketsApi.StreamPackets:output_type -> yamcs.protobuf.packets.TmPacketData
	19, // 31: yamcs.protobuf.packets.PacketsApi.ExportPacket:output_type -> yamcs.api.HttpBody
	19, // 32: yamcs.protobuf.packets.PacketsApi.ExportPackets:output_type -> yamcs.api.HttpBody
	15, // 33: yamcs.protobuf.packets.PacketsApi.SubscribePackets:output_type -> yamcs.protobuf.packets.TmPacketData
	13, // 34: yamcs.protobuf.packets.PacketsApi.SubscribeContainers:output_type -> yamcs.protobuf.packets.ContainerData
	26, // [26:35] is the sub-list for method output_type
	17, // [17:26] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_yamcs_protobuf_packets_packets_service_proto_init() }
func file_yamcs_protobuf_packets_packets_service_proto_init() {
	if File_yamcs_protobuf_packets_packets_service_proto != nil {
		return
	}
	file_yamcs_protobuf_packets_packets_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_yamcs_protobuf_packets_packets_service_proto_rawDesc), len(file_yamcs_protobuf_packets_packets_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yamcs_protobuf_packets_packets_service_proto_goTypes,
		DependencyIndexes: file_yamcs_protobuf_packets_packets_service_proto_depIdxs,
		MessageInfos:      file_yamcs_protobuf_packets_packets_service_proto_msgTypes,
	}.Build()
	File_yamcs_protobuf_packets_packets_service_proto = out.File
	file_yamcs_protobuf_packets_packets_service_proto_goTypes = nil
	file_yamcs_protobuf_packets_packets_service_proto_depIdxs = nil
}
